

namespace test
{
    object Cube3
    {
        dependency( stuff/sphere.mega );
        dependency( stuff/triangle.mega );
        include( <iostream> );
        
        namespace nested2
        {
            action CoolStuff1
            {
                std::cout << "This is cool" << std::endl;
            }
        
            action CoolInherit : CoolStuff1
            {

            }
        }

        table TestTable
        {
            link Cube1  [ 0    : 0   ] <  [ 0   : 0    ] : Cube3;
            link Cube2  [ 1    : 1   ]    [ 1   : 1    ] : Cube3;
            link Cube3  [ 2    : 2   ] >  [ 2   : 2    ] : Cube3;
            link Cube4  [ 123  : 123 ] << [ 123 : 123  ] : Cube3;
            link Cube5  [ *    : *   ] >> [ *   : *    ] : Cube3;
            link Cube6  [ *    : *   ] <<>[ *   : *    ] : Cube3;
            link Cube7  [ !0   : 0   ] <>>[ 0   : !0   ] : Cube3;
            link Cube8  [ !1   : 1   ]    [ 1   : !1   ] : Cube3;
            link Cube9  [ !2   : 2   ] >> [ 2   : !2   ] : Cube3;
            link Cube10 [ !123 : 123 ] << [ 123 : !123 ] : Cube3;
            link Cube11 [ !*   : *   ] >  [ *   : !*   ] : Cube3;
            link Cube12 [ !*   : *   ] <> [ *   : !*   ] : Cube3;
            //link CoolStuff23 [0:*]<<>[*:0] : nested8::CoolStuff23;
        }

        namespace nested8
        {
            action CoolStuff23
            {
                std::cout << "This is cool" << std::endl;
            }
            function foobar( int iValue, float fValue, bool other ) : void
            {
                // do stuff
                int i = 1;
            }
        }

        action Test
        {

            std::cout << "Ed was here" << std::endl;
            std::cout << "Ed was here" << std::endl;


            dim int foo;
        }
        action TestFF
        {
            std::cout << "Ed was here" << std::endl;
            dim int foo;
        }
    }
}
