
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#ifndef GUARD_2023_September_02_rtti
#define GUARD_2023_September_02_rtti

#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "mega/maths_types.hpp"

#include <cstddef>
#include <type_traits>
#include <utility>
#include <bitset>
#include <vector>

// #include <stdbool.h>

namespace mega
{

template< typename T >
struct rtti;

{% for type in types %}
template<>
struct rtti< {{ type.canon }} >
{
    using Type = {{ type.canon }};
    // using Impl = {{ type.impl }}Dimension< {{ type.canon }} >;
    static constexpr char Mangle[] = "{{ type.mangle }}";
    static constexpr char Canon[] = "{{ type.canon }}";
    static constexpr U64 ID = {{ loop.index + 1 }};
};

{% endfor %}

}

#endif //GUARD_2023_September_02_rtti

