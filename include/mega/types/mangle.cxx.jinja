
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#include "impl.hpp"

#include "mega/allocator.hpp"

namespace mega::mangle
{
    template< typename T >
    inline T& reify( void* p ) { return *reinterpret_cast< T* >( p ); }
    template< typename T >
    inline const T& reify( const void* p ) { return *reinterpret_cast< const T* >( p ); }

{% for type in types %}
    // Canonical C++ Type : {{ type.canon }}
    // Mangled name:        {{ type.mangle }}
    // Implementation Type: {{ type.impl }}
    void new_{{ type.mangle }}( void* p )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::construct( p );
    }
    void delete_{{ type.mangle }}( void* p )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::destruct( reify< {{ type.canon }} >( p ) );
    }
    void copy_{{ type.mangle }}( const void* pFrom, void* pTo )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::copy( reify< {{ type.canon }} >( pFrom ), reify< {{ type.canon }} >( pTo ) );
    }
    void save_xml_{{ type.mangle }}( void* p, const char* name, void* pArchive )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::save_xml( reify< mega::XMLSaveArchive >( pArchive ), name, reify< {{ type.canon }} >( p ) );
    }
    void load_xml_{{ type.mangle }}( void* p, const char* name, void* pArchive )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::load_xml( reify< mega::XMLLoadArchive >( pArchive ), name, reify< {{ type.canon }} >( p ) );
    }
    void save_bin_{{ type.mangle }}( void* p, void* pArchive )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::save_bin( reify< mega::BinSaveArchive >( pArchive ), reify< {{ type.canon }} >( p ) );
    }
    void load_bin_{{ type.mangle }}( void* p, void* pArchive )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::load_bin( reify< mega::BinLoadArchive >( pArchive ), reify< {{ type.canon }} >( p ) );
    }
    void save_record_{{ type.mangle }}( const mega::reference& ref, const void* pData )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::save_memory_record( ref, reify< {{ type.canon }} >( pData ) );
    }
    void load_record_{{ type.mangle }}( void* pData, void* pRecord, mega::U64 size)
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::load_memory_record( pRecord, size, reify< {{ type.canon }} >( pData ) );
    }
    Any read_any_{{ type.mangle }}( void* pData )
    {
        return {{ type.impl }}Dimension< {{ type.canon }} >::read_any( reify< {{ type.canon }} >( pData ) );
    }
    void write_any_{{ type.mangle }}( void* pData, mega::Any value )
    {
        {{ type.impl }}Dimension< {{ type.canon }} >::write_any( reify< {{ type.canon }} >( pData ), value );
    }

{% endfor %}
}
