
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/iostream.h>
#include <pybind11/operators.h>

#include "mega/allocator.hpp"
#include "mega/reference.hpp"

#include "traits.hpp"
#include "python_mangle.hpp"

#include <unordered_map>
#include <string>

#include "service/python/python_reference.hpp"

namespace mega::service::python
{
    class PythonModule;
}
extern std::shared_ptr< mega::service::python::PythonModule > getModule();

namespace PYBIND11_NAMESPACE
{
namespace detail
{
template <>
struct type_caster< mega::reference >
{
public:
    /**
     * This macro establishes the name 'inty' in
     * function signatures and declares a local variable
     * 'value' of type inty
     */
    PYBIND11_TYPE_CASTER( mega::reference, const_name( "reference" ) );

    /**
     * Conversion part 1 (Python->C++): convert a PyObject into a inty
     * instance or return false upon failure. The second argument
     * indicates whether implicit conversions should be applied.
     */
    bool load( handle src, bool )
    {
        /* Extract PyObject from handle */
        PyObject* source = src.ptr();
        if( !source )
            return false;

        /* Now try to convert into a C++ int */
        value = mega::service::python::PythonReference::cast( source );

        /* Ensure return code was OK (to avoid out-of-range errors etc) */
        return !( value != mega::reference{} && !PyErr_Occurred() );
    }

    /**
     * Conversion part 2 (C++ -> Python): convert an inty instance into
     * a Python object. The second and third arguments are used to
     * indicate the return value policy and parent object (for
     * ``return_value_policy::reference_internal``) and are generally
     * ignored by implicit casters.
     */
    static handle cast( mega::reference src, return_value_policy /* policy */, handle /* parent */ )
    {
        return mega::service::python::PythonReference::cast( *getModule(), src );
    }
};
} // namespace detail
} // namespace PYBIND11_NAMESPACE


namespace mega::mangle
{
    namespace
    {
{% for type in types %}
        static PyObject* cppToPy_{{ type.mangle }}( void* pCppObject )
        {
            {{ type.canon }}* p = reinterpret_cast< {{ type.canon }}* >( pCppObject );
            auto pyObject = pybind11::cast( *p );
            pyObject.inc_ref();
            return pyObject.ptr();
        }
        static void* pyToCpp_{{ type.mangle }}( PyObject* pyObject )
        {
            pybind11::object obj = pybind11::reinterpret_borrow< pybind11::object >( pyObject );
            static {{ type.canon }} cppObject;
            cppObject = obj.cast< {{ type.canon }} >();
            return &cppObject;
        }
{% endfor %}
    }

    void initialise_{{ name }}( CppToPythonTable& cppToPython, PythonToCppTable& pythonToCpp )
    {
{% for type in types %}
        cppToPython.insert( { "{{ type.mangle }}", &cppToPy_{{ type.mangle }} } );
        pythonToCpp.insert( { "{{ type.mangle }}", &pyToCpp_{{ type.mangle }} } );
{% endfor %}
    }

}
