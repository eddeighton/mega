
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#ifndef GUARD_2023_January_11_invocations
#define GUARD_2023_January_11_invocations

#include "api.hpp"
#include "functions.hpp"

#include "mega/values/runtime/reference.hpp"
#include "mega/values/compilation/invocation_id.hpp"

namespace mega::runtime::invocation
{

enum FunctionType
{
{% for function in functions %}
    e{{ function.name }},
{% endfor %}
    TOTAL_FUNCTION_TYPES
};

{% for function in functions %}
class JIT_EXPORT {{ function.name }}
{
public:
    using FunctionPtr = {{ function.return_type }} ( * ) ({% for arg in function.arguments %}{{ arg.type }}{% if not loop.is_last%}, {% endif %}{% endfor %});
    {{ function.name }}( const char* pszUnitName, const mega::InvocationID& invocationID );
    {{ function.return_type }} operator() ({% for arg in function.arguments %}{{ arg.type }} {{ arg.name }}{% if not loop.is_last%}, {% endif %}{% endfor %}) const;
private:
    const char*               m_pszUnitName;
    const mega::InvocationID& m_invocationID;
    mutable bool              m_bResolving;
    mutable FunctionPtr       m_function;
};

{% endfor %}

} // namespace mega::runtime::invocation

#endif // GUARD_2023_January_11_invocations
