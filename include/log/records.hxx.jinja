
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#ifndef GUARD_2023_February_03_records
#define GUARD_2023_February_03_records

#include "mega/values/native_types.hpp"
#include "mega/values/runtime/reference.hpp"
#include "mega/values/compilation/relation_id.hpp"
#include "mega/values/compilation/transition_id.hpp"

#include "common/assert_verify.hpp"
#include "common/unreachable.hpp"

#include <boost/serialization/split_member.hpp>
#include <boost/serialization/array_wrapper.hpp>

#include <string_view>
#include <string>
#include <type_traits>
#include <array>

namespace mega::log
{

enum class TrackID : U8
{
{% for record in records %}
    e{{ record.type }},
{% endfor %}
    TOTAL
};

inline constexpr typename std::underlying_type< TrackID >::type toInt( TrackID e ) noexcept
{
    return static_cast< typename std::underlying_type< TrackID >::type >( e );
}

inline const std::string& toName( TrackID trackType )
{
    using namespace std::string_literals;
    static const std::array< std::string, toInt( TrackID::TOTAL ) + 1 > strings
        // clang-format off
    = { 
{% for record in records %}
        "{{ record.type }}"s,
{% endfor %}
        "index"s
    };
    // clang-format on
    return strings[ toInt( trackType ) ];
}

using SizeType = U16;
static const char nullbyte = '\0';

inline const void* inc( const char*& p, U64 size )
{
    const char* pResult = p;
    p += size;
    return pResult;
}

{% for record in records %}
namespace {{ record.type }}
{
{%      for enum in record.enums %}
    enum {{ enum.name }} : U8
    {
{%          for value in enum.values %}
        e{{ value }}{% if not loop.is_last%},{% endif %}

{%          endfor %}
    };

    inline static const char* toString( {{ enum.name }} value )
    {
        static const char* strings[] =
        {
{%          for value in enum.values %}
            "{{ value }}"{% if not loop.is_last%},{% endif %}

{%          endfor %}
        };
        return strings[ static_cast< std::underlying_type< {{ enum.name }} >::type >( value ) ];
    }
{%      endfor %}

    struct Data
    {
{% for field in record.fields %}
        {{ field.type }} m_{{ field.name }};
{% endfor %}
{% for enum in record.enums %}
        {{ enum.name }} m_{{ enum.name }};
{% endfor %}
{% if record.padding %}
        std::array< char, {{ record.padding }} > _padding;
{% endif %}
    };

    struct DataIO
    {
        Data m_data;
{%      for buffer in record.buffers %}
        std::string m_{{ buffer.name }};
{%      endfor %}

        template < typename Archive >
        void serialize( Archive& ar, const unsigned int )
        {
            ar & boost::serialization::make_array( (char*)&m_data, sizeof( Data ) );
{%      for buffer in record.buffers %}
            ar & m_{{ buffer.name }};
{%      endfor %}
        }
    };

    static_assert
    (
        sizeof( Data ) % {{ record.align }} == 0U, "Incorrect alignment and padding for record type: {{ record.type }}"
    );

    class Read
    {
    public:
        static constexpr TrackID TRACKID = TrackID::e{{ record.type }};
        static constexpr bool Variable = {{ record.has_buffer }};

        Read( const void* pData )
        {
            ASSERT( reinterpret_cast< U64 >( pData ) % {{ record.align }} == 0U );
            const char* pIter = reinterpret_cast< const char* >( pData );
{% if record.has_buffer %}
            inc( pIter, sizeof( SizeType ) ); // read the variable size header
{% endif %}
            m_pData = reinterpret_cast< const Data* >( inc( pIter, sizeof( Data ) ) );
{%      for buffer in record.buffers %}
            m_{{ buffer.name }} = std::string_view( pIter + sizeof( SizeType ), *reinterpret_cast< const SizeType* >( pIter ) );
            pIter += sizeof( SizeType ) + m_{{ buffer.name }}.size();
{%      endfor %}
        }

        BOOST_SERIALIZATION_SPLIT_MEMBER()

        template < typename Archive >
        void load( Archive& ar, const unsigned int ) const
        {
            UNREACHABLE;
        }
        template < typename Archive >
        void save( Archive& ar, const unsigned int ) const
        {
            ar & boost::serialization::make_array( (char*)m_pData, sizeof( Data ) );
{%      for buffer in record.buffers %}
            ar & std::string( m_{{ buffer.name }}.data(), m_{{ buffer.name }}.size() );
            // ar & boost::serialization::make_array( m_{{ buffer.name }}.data(), m_{{ buffer.name }}.size() );
{%      endfor %}
        }

{% if not record.has_buffer %}
        static constexpr U64 size()
        {
            return sizeof( Data );
        }
{% else %}
        static U64 getVariableSize( const void* pData )
        {
            return *reinterpret_cast< const SizeType* >( pData );
        }
        inline U64 size() const
        {
            return sizeof( Data )
{% if record.has_buffer %}
                 + sizeof( SizeType )
{% endif %}
{%      for buffer in record.buffers %}
                 + m_{{ buffer.name }}.size() + sizeof( SizeType ) + 1U
{%      endfor %}
            ;
        }
{% endif %}

{%      for field in record.fields %}
        inline {{ field.type }} get{{ field.name }}() const { return m_pData->m_{{ field.name }}; }
{%      endfor %}
{%      for enum in record.enums %}
        inline {{ enum.name }} get{{ enum.name }}() const { return m_pData->m_{{ enum.name }}; }
{%      endfor %}
{%      for buffer in record.buffers %}
        inline const std::string_view& get{{ buffer.name }}() const { return m_{{ buffer.name }}; }
{%      endfor %}

    private:
        const Data* m_pData;
{%      for buffer in record.buffers %}
        std::string_view m_{{ buffer.name }};
{%      endfor %}
    };

    class Write
    {
    public:
        static constexpr TrackID TRACKID = TrackID::e{{ record.type }};
        static constexpr bool Variable = {{ record.has_buffer }};

        Write( const Data& data 
{%      for buffer in record.buffers %}
            , const std::string_view& _{{ buffer.name }}
{%      endfor %} 
        )
        : m_data( data )
{%      for buffer in record.buffers %}
            , m_{{ buffer.name }}( _{{ buffer.name }} )
{%      endfor %}
        {
        }

        Write(
{%      for field in record.fields %}
            const {{ field.type }}& _{{ field.name }}{% if not loop.is_last or record.has_enum or record.has_buffer%},{% endif %}

{%      endfor %}
{%      for enum in record.enums %}
            {{ enum.name }} _{{ enum.name }}{% if not loop.is_last or record.has_buffer%},{% endif %}

{%      endfor %}
{%      for buffer in record.buffers %}
            const std::string_view& _{{ buffer.name }}{% if not loop.is_last%},{% endif %}

{%      endfor %}
        )
        : m_data
            { 
{%      for field in record.fields %}
                _{{ field.name }}{% if not loop.is_last or record.has_enum or record.has_buffer%},{% endif %}

{%      endfor %}
{%      for enum in record.enums %}
                _{{ enum.name }}{% if not loop.is_last or record.has_buffer%},{% endif %}

{%      endfor %}
            }
{%      for buffer in record.buffers %}
            , m_{{ buffer.name }}( _{{ buffer.name }} )
{%      endfor %}
        {}

{% if not record.has_buffer %}
        static constexpr U64 size()
        {
            return sizeof( Data );
        }
{% else %}
        inline U64 size() const
        {
            return sizeof( Data )
{% if record.has_buffer %}
                 + sizeof( SizeType )
{% endif %}
{%      for buffer in record.buffers %}
                 + m_{{ buffer.name }}.size() + sizeof( SizeType ) + 1U
{%      endfor %}
            ;
        }
{% endif %}

        template< typename FileType >
        inline auto write( FileType& file ) const
        {
{% if record.has_buffer %}
            {
                // write the variable size
                SizeType variableSize = size();
                file.write( &variableSize, sizeof( SizeType ) );
            }
{% endif %}
            {% if not record.has_buffer %}return {% endif %}file.write( &m_data, sizeof( Data ) );
{%      for buffer in record.buffers %}
            {
                const SizeType sz = static_cast< SizeType >( m_{{ buffer.name }}.size() );
                file.write( &sz, sizeof( SizeType ) );
                file.write( m_{{ buffer.name }}.data(), sz );
                {% if loop.is_last %}return {% endif %}file.write( &nullbyte, 1 );
            }
{%      endfor %}
        }
    private:
        //data
        Data m_data;
{%      for buffer in record.buffers %}
        std::string_view m_{{ buffer.name }};
{%      endfor %}
    };
}
{% endfor %}
}

#endif //GUARD_2023_February_03_records.hxx
