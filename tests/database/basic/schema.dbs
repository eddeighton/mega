//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


///////////////////////////////////////////
// Stages
stage BasicStage
{
    source .manifest;
    file FirstFile;
}

stage SecondStage
{
    dependency BasicStage;
    source .manifest;
    file SecondFile;
    file ThirdFile;
    global accessor ref< TestNamespace::TestObject >;
    global accessor ref< TestNamespace::OtherObject >;
}

stage ThirdStage
{
    dependency SecondStage;
    source .manifest;
    file FourthFile;
    
    global accessor ref< TestNamespace::TestObject >;
    global accessor ref< TestNamespace::OtherObject >;
    global accessor ref< TestNamespace::TestInherit >;
}

stage FourthStage
{
    dependency ThirdStage;
    source .manifest;
    file FifthFile;
    
    global accessor ref< TestNamespace::TestObject >;
    global accessor ref< TestNamespace::OtherObject >;
    global accessor ref< TestNamespace::TestInherit >;
}

///////////////////////////////////////////
// Objects
namespace TestNamespace
{
    object TestObject -> BasicStage::FirstFile
    {
        value< std::string > string;
        array< value< std::string > > array_of_string;
        opt< value< std::string > > optional_string;

        //ref< TestObject > reference;
        array< ref< TestObject > > array_of_references;
        opt< ref< TestObject > > optional_reference;

        late< ref< TestObject > > late_reference;
        late< array< ref< TestObject > > > late_array_of_references;
    }

    object OtherObject -> BasicStage::FirstFile
    {
        value< int > this_stage_value;
        value< int > next_stage_value -> SecondStage::SecondFile;
        value< int > another_stage_value -> SecondStage::ThirdFile;
        value< int > third_stage_value -> ThirdStage::FourthFile;
        value< int > fifth_stage_value -> FourthStage::FifthFile;
    }

    object TestInherit : OtherObject -> SecondStage::SecondFile
    {
        value< int > second_stage_inherited_value;
        value< int > third_stage_inherited_value -> ThirdStage::FourthFile;
    }

}
