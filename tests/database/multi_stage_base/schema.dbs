//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


///////////////////////////////////////////
// Stages
stage FirstStage
{
    source .manifest;
    file FirstFile;
}

stage SecondStage
{
    dependency FirstStage;

    source .manifest;

    file SecondFile;
    
    global accessor array< ref< MultiStageBaseTest::TestObject > >;
}

stage ThirdStage
{
    dependency SecondStage;

    source .manifest;

    file ThirdFile;

    global accessor array< ref< MultiStageBaseTest::TestObject > >;
}

///////////////////////////////////////////
// Objects
namespace MultiStageBaseTest
{
    object TestObject -> FirstStage::FirstFile, SecondStage::SecondFile
    {
        value< int > anInt;
    }
    
    /*
    // In order to support deriving from a mutli stage constructable object
    // the database would need to support the underlying primary object part being a variant 
    // of non-singular possible types i.e. FirstStage::TestObject OR SecondStage::TestObject data parts.
    object DerivedFirst : TestObject -> ThirdStage::ThirdFile
    {
    }

    object DerivedSecond : TestObject -> ThirdStage::ThirdFile
    {
    }*/
    
}
