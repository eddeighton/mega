

interface IOne
{
    dim m_int5 int;

    function f1( int i ) -> void
    {
    }
}

namespace testing
{
    interface ITwo
    {
        namespace nested
        {
            cpp Foobar float;

            function f2( int i, @Object2 o ) -> void
            {
                Foobar f;
                //
                o.dosomething( i );
            }
            function f3( int i, @Object2 o ) -> void
            {
                //
                o.dosomething( i );
            }
            function f4( int i, @Object2 o ) -> void
            {
                //
                o.dosomething( i );
            }
        }
    }
}

object Object1
{
    component A : ^OR
    {
        dim m_int1 int;
    }

    component B
    {
        dim m_int2 SomeCPPType;
    }
}

object Object2 : ^Object1, ^Historical
{
    component A : ^IOne, ^testing.ITwo
    {
        dim m_int2 int;
    }
}

object Object3
{
    component A
    {
        dim m_int3 int;
    }

    component B : ^testing.ITwo.nested
    {
        cpp Foobar float;
    }
}

object Object4 : ^Object2, ^Object3
{
    component A
    {
        dim m_int4 int;
    }

    component B : ^Object2.A, ^Historical
    {
    }
}

// example of inheritance as recontextualisation
object Object5 : ^Object2, ^Object3
{
    component A
    {
        dim m_int4 int;
    }

    component B : ^Object2.A, ^Historical
    {
        cpp SomeCPPType int;
    }
}

