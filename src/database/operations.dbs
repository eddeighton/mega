//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Alias
{
    object Edge -> AliasAnalysis::Model
    {
        ref< Step >                             next;
        value< bool >                           eliminated;
        array< ref< Concrete::Graph::Edge > >   edges;
    }

    object Step -> AliasAnalysis::Model
    {
        ref< Concrete::Graph::Vertex >  vertex;
        array< ref< Edge > >            edges;
    }

    object And : Step -> AliasAnalysis::Model
    {
    }

    object Or : Step -> AliasAnalysis::Model
    {
    }

    object AliasDerivation -> AliasAnalysis::Model
    {
        ref< Concrete::Graph::Vertex >  context;
        array< ref< Edge > >            edges;
    }
}

namespace Derivation
{
    object Edge -> OperationsStage::Operations
    {
        ref< Step >                             next;
        value< bool >                           eliminated;
        array< ref< Concrete::Graph::Edge > >   edges;
    }

    object Step -> OperationsStage::Operations
    {
        ref< Concrete::Graph::Vertex >  vertex;
        array< ref< Edge > >            edges;
    }

    object And : Step -> OperationsStage::Operations
    {
    }

    object Or : Step -> OperationsStage::Operations
    {
    }

    object Root -> OperationsStage::Operations
    {
        array< ref< Concrete::Graph::Vertex > > context;
        array< ref< Edge > > edges;
    }
}

namespace Operations
{
    object Invocation -> OperationsStage::Operations
    {
        value< mega::InvocationID > id;
        
        ref< Derivation::Root > derivation;

        late< ref< Invocations::Instructions::Root > >      root_instruction;
        array< ref< Invocations::Variables::Variable > >    variables;

        // ref< Context >              context;
        // ref< TypePath >             type_path;
        // value< mega::OperationID >  operation;
// 
        // value< std::string >            name;
        // value< std::string >            context_str;
        // value< std::string >            type_path_str;
// 
        // late< value< mega::ExplicitOperationID > > explicit_operation;
// 
        // late< value< std::string > >                        return_type_str;
        // late< value< std::string > >                        runtime_return_type_str;
        // late< value< std::string > >                        runtime_parameter_type_str;
// 
// 
        // late< array< ref< Interface::IContext > > >         parameter_contexts;
        // late< array< ref< Interface::IContext > > >         return_type_contexts;
        // late< array< ref< Interface::DimensionTrait > > >   return_type_dimensions;
        // late< value< bool > >                               homogeneous;
        // late< value< bool > >                               singular;
        // late< value< bool > >                               is_function_call;
        // 
        // late< array< value< mega::SourceLocation > > > file_offsets;
    }

    object Invocations -> OperationsStage::Operations
    {
        map< value< mega::InvocationID >, ref< Invocation > > invocations;
    }
}
