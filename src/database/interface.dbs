
///////////////////////////////////////////
///////////////////////////////////////////
// Stages
stage InterfaceStage
{
    source .mega;
    dependency ParserStage;

    file Tree;

    persource accessor ref< Parser::ObjectSourceRoot >;

    persource accessor array< ref< Interface::Namespace > >;
    persource accessor array< ref< Interface::Abstract > >;
    persource accessor array< ref< Interface::Action > >;
    persource accessor array< ref< Interface::Event > >;
    persource accessor array< ref< Interface::Function > >;
    persource accessor array< ref< Interface::Object > >;
    persource accessor array< ref< Interface::Link > >;
}

/*
stage InterfaceAnalysis
{
    source .mega;
    dependency InterfaceStage;

    file Analysis;

    persource accessor array< ref< Interface::Abstract > >;
    persource accessor array< ref< Interface::Action > >;
    persource accessor array< ref< Interface::Event > >;
    persource accessor array< ref< Interface::Function > >;
    persource accessor array< ref< Interface::Object > >;
    persource accessor array< ref< Interface::Link > >;
}*/

///////////////////////////////////////////
///////////////////////////////////////////
// Objects
namespace Interface
{
    // embedded language parts
    namespace CPP
    {
        object Body -> InterfaceStage::Tree
        {
            value< std::string > str;
        }

        object Type -> InterfaceStage::Tree
        {
            value< std::string > str;
        }
    }

    // context elements
    object Dimension : Parser::Dimension -> InterfaceStage::Tree
    {
        //late< value< std::string > > actual_type -> InterfaceAnalysis::Analysis;
    }


    // basic context types
    object ContextGroup -> InterfaceStage::Tree
    {
        array< ref< Context > > children;
    }

    object Root : ContextGroup -> InterfaceStage::Tree
    {
        ref< Parser::ObjectSourceRoot > root;
    }

    object Context : ContextGroup -> InterfaceStage::Tree
    {
        value< std::string > identifier;
        ref< ContextGroup > parent;
    }

    // main context types
    object Namespace : Context -> InterfaceStage::Tree
    {
        value< bool > is_global;
        array< ref< Parser::ContextDef > > namespace_defs;
        array< ref< Dimension > > dimensions;
    }
    object Abstract : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::AbstractDef > > abstract_defs;
        array< ref< Dimension > > dimensions;
    }
    object Action : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::ActionDef > > action_defs;
        array< ref< Dimension > > dimensions;
        //late< ref< CPP::Body > > body;
    }
    object Event : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::EventDef > > event_defs;
        array< ref< Dimension > > dimensions;
    }
    object Function : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::FunctionDef > > function_defs;
        //late< ref< CPP::Body > > body;
    }
    object Object : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::ObjectDef > > object_defs;
        array< ref< Dimension > > dimensions;
        array< ref< Object > > dependencies;
    }
    object Link : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::LinkDef > > link_defs;
    }

}
