//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

namespace Interface
{
    object TypePath -> InterfaceAnalysisStage::Clang
    {
        array< ref< Symbols::SymbolTypeID > > types;
    }
    object TypePathVariant -> InterfaceAnalysisStage::Clang
    {
        array< ref< TypePath > > sequence;
    }

    // context traits
    object DimensionTrait -> InterfaceStage::Tree
    {
        ref< IContext > parent;
        
        value< mega::TypeID > symbol_id -> SymbolRollout::PerSourceSymbols;
        value< mega::TypeID > interface_id -> SymbolRollout::PerSourceSymbols;
        
        array< ref< Concrete::Dimensions::User > > concrete -> InheritanceAnalysisRollout::PerSourceDerivations;

        value< std::string >                    canonical_type  -> InterfaceAnalysisStage::Clang;
        ref< MegaMangle::Mangle >               mangle          -> InterfaceAnalysisStage::Clang;
        value< std::string >                    erased_type     -> InterfaceAnalysisStage::Clang;
        value< mega::U64 >                      size            -> InterfaceAnalysisStage::Clang;
        value< mega::U64 >                      alignment       -> InterfaceAnalysisStage::Clang;
        value< bool >                           simple          -> InterfaceAnalysisStage::Clang;
        array< ref< Symbols::SymbolTypeID > >   symbols         -> InterfaceAnalysisStage::Clang;
    }

    object UserDimensionTrait : DimensionTrait -> InterfaceStage::Tree
    {
        ref< Parser::Dimension > parser_dimension;
    }

    object CompilerDimensionTrait : DimensionTrait -> InterfaceStage::Tree
    {
        value< std::string > identifier;
    }

    object LinkTrait -> InterfaceStage::Tree
    {
        ref< IContext > parent;

        value< mega::TypeID > symbol_id -> SymbolRollout::PerSourceSymbols;
        value< mega::TypeID > interface_id -> SymbolRollout::PerSourceSymbols;

        array< ref< Concrete::Dimensions::Link > > concrete -> InheritanceAnalysisRollout::PerSourceDerivations;

        ref< HyperGraph::Relation > relation -> HyperGraphAnalysisRollout::PerSourceModel;
    }

    object UserLinkTrait : LinkTrait  -> InterfaceStage::Tree
    {
        ref< Parser::Link > parser_link;
        array< ref< TypePathVariant > > tuple -> InterfaceAnalysisStage::Clang;
    }

    object OwnershipLinkTrait : LinkTrait  -> InterfaceStage::Tree
    {
    }

    object InheritanceTrait : Parser::Inheritance -> InterfaceStage::Tree
    {
        array< ref< IContext > > contexts -> InterfaceAnalysisStage::Clang;
    }

    object ReturnTypeTrait : Parser::ReturnType -> InterfaceStage::Tree
    {
        value< std::string > canonical_type  -> InterfaceAnalysisStage::Clang;
    }

    object ArgumentListTrait : Parser::ArgumentList -> InterfaceStage::Tree
    {
        array< value< std::string > > canonical_types  -> InterfaceAnalysisStage::Clang;
    }

    object PartTrait : Parser::Part -> InterfaceStage::Tree
    {
        ref< IContext > parent;

    }

    object TransitionTypeTrait : Parser::Transition -> InterfaceStage::Tree
    {
        array< ref< TypePathVariant > > tuple  -> InterfaceAnalysisStage::Clang;
    }

    object EventTypeTrait : Parser::ArgumentList -> InterfaceStage::Tree
    {
        // each argument may be a variant of type paths
        array< ref< TypePathVariant > > tuple  -> InterfaceAnalysisStage::Clang;
    }

    object SizeTrait : Parser::Size -> InterfaceStage::Tree
    {
        value< mega::U64 > size -> InterfaceAnalysisStage::Clang;
    }

    // basic context types
    object ContextGroup -> InterfaceStage::Tree
    {
        array< ref< IContext > > children;
    }

    object Root : ContextGroup -> InterfaceStage::Tree
    {
        ref< Parser::ObjectSourceRoot > root;
    }

    object IContext : ContextGroup -> InterfaceStage::Tree
    {
        value< std::string >            identifier;
        ref< ContextGroup >             parent;
        ref< Components::Component >    component;
        
        value< mega::TypeID > symbol_id     -> SymbolRollout::PerSourceSymbols;
        value< mega::TypeID > interface_id  -> SymbolRollout::PerSourceSymbols;

        array< ref< Concrete::Context > > concrete -> InheritanceAnalysisRollout::PerSourceDerivations;
    }

    object InvocationInstance -> OperationsLocs::Locations
    {
        ref< Operations::Invocation > invocation;
        value< mega::SourceLocation > source_location;
    }

    object InvocationContext : IContext -> InterfaceStage::Tree
    {
        array< ref< InvocationInstance > > invocation_instances -> OperationsLocs::Locations;
        value< mega::SourceLocation > source_location -> OperationsLocs::Locations;
    }

    // main context types
    object Namespace : IContext -> InterfaceStage::Tree
    {
        value< bool > is_global;
        array< ref< Parser::ContextDef > > namespace_defs;
        late< array< ref< DimensionTrait > > > dimension_traits;
    }
    object Abstract : IContext -> InterfaceStage::Tree
    {
        array< ref< Parser::AbstractDef > >         abstract_defs;
        late< array< ref< DimensionTrait > > >      dimension_traits;
        late< array< ref< LinkTrait > > >           link_traits;
        late< opt< ref< InheritanceTrait > > >      inheritance_trait;
        late< opt< ref< SizeTrait > > >             size_trait;
    }

    object State : InvocationContext -> InterfaceStage::Tree
    {
        array< ref< Parser::StateDef > >            state_defs;
        late< array< ref< DimensionTrait > > >      dimension_traits;
        late< array< ref< LinkTrait > > >           link_traits;
        late< opt< ref< InheritanceTrait > > >      inheritance_trait;
        late< opt< ref< SizeTrait > > >             size_trait;
        late< opt< ref< TransitionTypeTrait > > >   transition_trait;
        late< array< ref< PartTrait > > >           part_traits;
    }

    object Action : State -> InterfaceStage::Tree
    {
    }

    object Component : State -> InterfaceStage::Tree
    {
    }

    object Event : IContext -> InterfaceStage::Tree
    {
        array< ref< Parser::EventDef > >            event_defs;
        late< array< ref< DimensionTrait > > >      dimension_traits;
        late< opt< ref< InheritanceTrait > > >      inheritance_trait;
        late< opt< ref< SizeTrait > > >             size_trait;
    }

    object Interupt : InvocationContext -> InterfaceStage::Tree
    {
        array< ref< Parser::InteruptDef > >         interupt_defs;
        late< ref< EventTypeTrait > >               events_trait;
        late< opt< ref< TransitionTypeTrait > > >   transition_trait;
    }

    object Requirement : Interupt -> InterfaceStage::Tree
    {

    }

    object Function : InvocationContext -> InterfaceStage::Tree
    {
        array< ref< Parser::FunctionDef > >     function_defs;
        late< ref< ReturnTypeTrait > >          return_type_trait;
        late< ref< ArgumentListTrait > >        arguments_trait;
    }

    object Object : IContext -> InterfaceStage::Tree
    {
        array< ref< Parser::ObjectDef > >           object_defs;
        late< array< ref< DimensionTrait > > >      dimension_traits;
        late< array< ref< LinkTrait > > >           link_traits;
        late< opt< ref< InheritanceTrait > > >      inheritance_trait;
        late< opt< ref< SizeTrait > > >             size_trait;
    }

}
