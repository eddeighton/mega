
///////////////////////////////////////////
///////////////////////////////////////////
// Stages
stage InterfaceStage
{
    source .mega;
    dependency ParserStage;

    file Tree;

    persource accessor ref< Parser::ObjectSourceRoot >;

    persource accessor array< ref< Interface::Namespace > >;
    persource accessor array< ref< Interface::Abstract > >;
    persource accessor array< ref< Interface::Action > >;
    persource accessor array< ref< Interface::Event > >;
    persource accessor array< ref< Interface::Function > >;
    persource accessor array< ref< Interface::Object > >;
    persource accessor array< ref< Interface::Link > >;
}

stage DependencyAnalysis
{
    source .manifest;
    dependency InterfaceStage;

    file DPGraph;

    global accessor ref< Dependencies::Analysis >;
    persource accessor ref< Interface::Root >;
}

stage DependencyAnalysisView
{
    source .manifest;
    dependency DependencyAnalysis;

    global accessor ref< Dependencies::Analysis >;
    persource accessor ref< Interface::Root >;
}

stage InterfaceAnalysisStage
{
    source .mega;
    dependency DependencyAnalysisView;

    file Clang;

    persource accessor ref< Interface::Root >;
}

///////////////////////////////////////////
///////////////////////////////////////////
// Objects
namespace Interface
{
    // context traits
    object DimensionTrait : Parser::Dimension -> InterfaceStage::Tree
    {
    }

    object Dimension : DimensionTrait -> InterfaceAnalysisStage::Clang
    {
        value< std::string > canonical_type;
    }

    object InheritanceTrait : Parser::Inheritance -> InterfaceStage::Tree
    {
    }

    object ReturnTypeTrait : Parser::ReturnType -> InterfaceStage::Tree
    {

    }

    object ArgumentListTrait : Parser::ArgumentList -> InterfaceStage::Tree
    {

    }

    object SizeTrait : Parser::Size -> InterfaceStage::Tree
    {

    }

    // basic context types
    object ContextGroup -> InterfaceStage::Tree
    {
        array< ref< Context > > children;
    }

    object Root : ContextGroup -> InterfaceStage::Tree
    {
        ref< Parser::ObjectSourceRoot > root;
    }

    object Context : ContextGroup -> InterfaceStage::Tree
    {
        value< std::string > identifier;
        ref< ContextGroup > parent;
    }

    // main context types
    object Namespace : Context -> InterfaceStage::Tree
    {
        value< bool > is_global;
        array< ref< Parser::ContextDef > > namespace_defs;
        late< array< ref< DimensionTrait > > > dimension_traits;
    }
    object Abstract : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::AbstractDef > > abstract_defs;
        late< array< ref< DimensionTrait > > > dimension_traits;
        late< opt< ref< InheritanceTrait > > > inheritance_trait;
    }
    object Action : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::ActionDef > > action_defs;
        late< array< ref< DimensionTrait > > > dimension_traits;
        late< opt< ref< InheritanceTrait > > > inheritance_trait;
        late< opt< ref< SizeTrait > > > size_trait;
    }
    object Event : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::EventDef > > event_defs;
        late< array< ref< DimensionTrait > > > dimension_traits;
        late< opt< ref< InheritanceTrait > > > inheritance_trait;
        late< opt< ref< SizeTrait > > > size_trait;
    }
    object Function : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::FunctionDef > > function_defs;
        late< ref< ReturnTypeTrait > > return_type_trait;
        late< ref< ArgumentListTrait > > arguments_trait;
    }
    object Object : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::ObjectDef > > object_defs;
        late< array< ref< DimensionTrait > > > dimension_traits;
        late< opt< ref< InheritanceTrait > > > inheritance_trait;
    }
    object Link : Context -> InterfaceStage::Tree
    {
        array< ref< Parser::LinkDef > > link_defs;
        late< ref< InheritanceTrait > > link_inheritance_trait;
    }

}

namespace Dependencies
{
    object Glob -> DependencyAnalysis::DPGraph
    {
        value< boost::filesystem::path > location;
        value< std::string > glob;
    }

    object ObjectDependencies -> DependencyAnalysis::DPGraph
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;
        array< ref< Glob > > globs;
        array< value< boost::filesystem::path > > resolution;
    }

    object Analysis -> DependencyAnalysis::DPGraph
    {
        array< ref< ObjectDependencies > > objects;
    }

}