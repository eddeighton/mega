
#include "database/model/manifest.hxx"

#include "database/common/component_info.hpp"
#include "database/common/serialisation.hpp"
#include "database/common/environments.hpp"

#include "database/model/environment.hxx"
#include "database/model/file_info.hxx"

#include "common/assert_verify.hpp"

#include <boost/filesystem.hpp>
#include <boost/filesystem/operations.hpp>

#include <fstream>

namespace mega
{
namespace io
{

    Manifest::Manifest() {}
 
    Manifest::Manifest( const Environment& environment, const manifestFilePath& filepath ) 
    { 
        load( environment, filepath ); 
    }

    Manifest::Manifest( const BuildEnvironment& environment,
                        const std::vector< boost::filesystem::path >& componentInfos )
    {
        ObjectInfo::FileID compilationFileID = 0;

        m_manifestFilePath = environment.project_manifest();

{% for source in sources %}
{% if source.type == "manifest" %}
{% for file in source.files %}
        {
            FileInfo compilationFileInfo( FileInfo::{{ file.stage }}_{{ file.name }}, 
                compilationFileID++, 
                environment.{{ file.stage }}_{{ file.name }}( m_manifestFilePath ),
                m_manifestFilePath );
            m_compilationFileInfos.push_back( compilationFileInfo );
        }
{% endfor %}
{% endif %}
{% endfor %}

        for ( const boost::filesystem::path& componentInfoPath : componentInfos )
        {
            ComponentInfo componentInfo;
            {
                VERIFY_RTE_MSG( boost::filesystem::exists( componentInfoPath ),
                                "Failed to locate file: " << componentInfoPath.string() );
                std::ifstream inputFileStream( componentInfoPath.native().c_str(), std::ios::in | std::ios_base::binary );
                if ( !inputFileStream.good() )
                {
                    THROW_RTE( "Failed to open file: " << componentInfoPath.string() );
                }
                InputArchiveType ia( inputFileStream );
                ia >> boost::serialization::make_nvp( "componentInfo", componentInfo );
            }

            for ( const boost::filesystem::path& filePath : componentInfo.getSourceFiles() )
            {
{% for source in sources %}
{% if source.type != "manifest" %}
                if( filePath.extension() == ".{{ source.type }}" )
                {
                    {{ source.type }}FilePath sourceFilePath = environment.{{ source.type }}FilePath_fromPath( filePath );
{% if source.type == "mega" %}
                    m_megaSourceFiles.push_back( sourceFilePath );
{% endif %}
{% for file in source.files %}
                    {
                        FileInfo compilationFileInfo( FileInfo::{{ file.stage }}_{{ file.name }}, 
                            compilationFileID++, 
                            environment.{{ file.stage }}_{{ file.name }}( sourceFilePath ),
                            sourceFilePath );
                        m_compilationFileInfos.push_back( compilationFileInfo );
                    }
{% endfor %}
                }
{% endif %}
{% endfor %}
            }
        }
        initialiseLookupTables();
    }

    void Manifest::initialiseLookupTables()
    {
        m_fileTypeMap.clear();
        m_dependencies.clear();

        for( FileInfoVector::const_iterator i = m_compilationFileInfos.begin(),
            iEnd = m_compilationFileInfos.end(); i!=iEnd; ++i )
        {
            const FileInfo& fileInfo = *i;
            m_fileTypeMap.insert( std::make_pair( 
                std::make_pair( fileInfo.getFileType(), fileInfo.getObjectSourceFilePath() ), i ) );
            m_dependencies.push_back( FileIDVector{} );
        }

        for( FileInfoVector::const_iterator i = m_compilationFileInfos.begin(),
            iEnd = m_compilationFileInfos.end(); i!=iEnd; ++i )
        {
            //m_dependencies
            const FileInfo& fileInfo = *i;
            switch( fileInfo.getFileType() )
            {
{% for stage in stages %}
{% for file in stage.files %}
            case FileInfo::{{ stage.name }}_{{ file.name }}:
                {
{% for dependency in file.dependencies %}
                    FileTypeMap::const_iterator iFind = m_fileTypeMap.find( 
                        std::make_pair( FileInfo::{{ stage.name }}_{{ file.name }}, fileInfo.getObjectSourceFilePath() ) );
                    VERIFY_RTE( iFind != m_fileTypeMap.end() );
                    m_dependencies[ fileInfo.getFileID() ].push_back( iFind->second->getFileID() );
{% endfor %}
                }
                break;
{% endfor %}
{% endfor %}
            default:
                THROW_RTE( "Unknown file type" );
                break;
            }
        }

    }

    File::PtrCst Manifest::loadFile( const Environment& environment, data::ObjectPartLoader& loader, FileMapCst& readOnlyFiles, 
        const SourceFilePath& sourceFile, FileInfo::Type fileType ) const
    {
        switch( fileType )
        {
{% for stage in stages %}
{% for file in stage.files %}
            case FileInfo::{{ stage.name }}_{{ file.name }}:
                {
                    FileTypeMap::const_iterator iFind = m_fileTypeMap.find( 
                        std::make_pair( FileInfo::{{ stage.name }}_{{ file.name }}, sourceFile ) );
                    VERIFY_RTE_MSG( iFind != m_fileTypeMap.end(), 
                        "Failed to locate compilation file of type: FileInfo::{{ stage.name }}_{{ file.name }} for source file: " << sourceFile.path().string() );
                    return loadFile( environment, loader, readOnlyFiles, iFind->second->getFileID() );
                }
                break;
{% endfor %}
{% endfor %}
            default:
                THROW_RTE( "Error loading unknown file type for source file: " << sourceFile.path().string() );
                break;
        }
    }

    File::PtrCst Manifest::loadFileImpl( const Environment& environment, data::ObjectPartLoader& loader, FileMapCst& readOnlyFiles, 
            ObjectInfo::FileID fileID , std::vector< File::Ptr >& loadedFiles ) const
    {
        for( ObjectInfo::FileID dependencyFileID : m_dependencies[ fileID ] )
        {
            loadFileImpl( environment, loader, readOnlyFiles, dependencyFileID, loadedFiles );
        }

        FileMapCst::const_iterator iFind = readOnlyFiles.find( fileID );
        if( iFind != readOnlyFiles.end() )
            return iFind->second;

        const FileInfo& fileInfo = m_compilationFileInfos[ fileID ];
        File::Ptr pLoadedFile = std::make_shared< File >( environment, fileInfo, loader );
        pLoadedFile->load( *this );
        readOnlyFiles.insert( std::make_pair( fileInfo.getFileID(), pLoadedFile ) );
        loadedFiles.push_back( pLoadedFile );
        return pLoadedFile;
    }


    File::PtrCst Manifest::loadFile( const Environment& environment, data::ObjectPartLoader& loader, FileMapCst& readOnlyFiles, ObjectInfo::FileID fileID ) const
    {
        std::vector< File::Ptr > loadedFiles;
        File::PtrCst pResult = loadFileImpl( environment, loader, readOnlyFiles, fileID, loadedFiles );
        for( File::Ptr pFile : loadedFiles )
        {
            pFile->load_post( *this );
        }
        return pResult;
    }

    void Manifest::loadAll( const Environment& environment, data::ObjectPartLoader& loader, FileMapCst& readOnlyFiles ) const
    {
        for( FileInfoVector::const_iterator i = m_compilationFileInfos.begin(),
            iEnd = m_compilationFileInfos.end(); i!=iEnd; ++i )
        {
            loadFile( environment, loader, readOnlyFiles, i->getFileID() );
        }
    }

    File::Ptr Manifest::createFile( const Environment& environment, data::ObjectPartLoader& loader, FileMap& readWriteFiles,
        const SourceFilePath& sourceFile, FileInfo::Type fileType ) const
    {
        FileTypeMap::const_iterator iFind = m_fileTypeMap.find( 
            std::make_pair( fileType, sourceFile ) );
        VERIFY_RTE_MSG( iFind != m_fileTypeMap.end(), 
            "Failed to locate compilation file of type: " << fileType << " for source file: " << sourceFile.path().string() );
        const FileInfo& fileInfo = *iFind->second;
        File::Ptr pFile = std::make_shared< File >( environment, fileInfo, loader );
        readWriteFiles.insert( std::make_pair( fileInfo.getFileID(), pFile ) );
        return pFile;
    }
    
    void Manifest::load( const Environment& environment, const manifestFilePath& manifestFilePath )
    {
        std::unique_ptr< std::istream > pIfStream =
            environment.read( manifestFilePath );
        InputArchiveType ia( *pIfStream );
        ia >> boost::serialization::make_nvp( "manifest", *this );
        initialiseLookupTables();
    }

    common::HashCode Manifest::save_temp( const Environment& environment, const manifestFilePath& manifestFilePath ) const
    {
        boost::filesystem::path tempFilePath;
        {
            std::unique_ptr< std::ostream > pOfStream =
                environment.write_temp( manifestFilePath, tempFilePath );
            OutputArchiveType oa( *pOfStream );
            oa << boost::serialization::make_nvp( "manifest", *this );
        }
        return common::hash_file( tempFilePath );
    }

} // namespace io
} // namespace mega

BOOST_CLASS_IMPLEMENTATION( mega::io::Manifest, object_serializable )
