#ifndef {{ guard }}
#define {{ guard }}

#include "database/common/object_info.hpp"
#include "database/common/object.hpp"
#include "database/common/loader.hpp"
#include "database/common/storer.hpp"
#include "database/common/data_pointer.hpp"
#include "database/common/object_loader.hpp"

#include "nlohmann/json.hpp"

#include <string>
#include <cstddef>
#include <cstdint>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>


namespace data
{

// declarations
{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    struct {{ part.name }};
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}

// definitions
{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    struct {{ part.name }} : public mega::io::Object
    {
        {{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo );
{% if length(part.properties) %}
        {{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo{% for property in part.initialisations %}, {{ property.argtype }} {{ property.name }}{% endfor %} );
{% endif %}
        enum 
        {
            Object_Part_Type_ID = {{ part.typeID }}
        };
{% for property in part.properties %}
        {{ property.type }} {{ property.name }};
{% endfor %}{#part.property#}
{% for pointer in part.data_pointers %}
        Ptr< {{ pointer.typename }} > {{ pointer.longname }};
{% endfor %}{#part.data_pointers#}
{% for pointer in part.raw_pointers %}
        Ptr< {{ pointer.typename }} > {{ pointer.longname }};
{% endfor %}{#part.raw_pointers#}
{% if part.has_inheritance %}
        {{ part.inheritance_variant }} m_inheritance;
{% endif %}
        virtual bool test_inheritance_pointer( ObjectPartLoader &loader ) const;
        virtual void set_inheritance_pointer();
        virtual void load( mega::io::Loader& loader );
        virtual void store( mega::io::Storer& storer ) const;
        virtual void to_json( nlohmann::json& data ) const;
    };
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}

{% for conversion in conversions %}
template <>
inline Ptr< {{ conversion.to }} > convert( const Ptr< {{ conversion.from }} >& from )
{
    return from{% for pointer in conversion.pointers %}->{{ pointer }}{% endfor %};
}
{% endfor %}{# conversions #}
{% for conversion in base_conversions %}
inline Ptr< {{ conversion.to }} > to_base( const Ptr< {{ conversion.from }} >& from )
{
    return from{% for pointer in conversion.pointers %}->{{ pointer }}{% endfor %};
}
{% endfor %}{# base_conversions #}

template < typename TVariant > 
inline TVariant to_upper( TVariant &from )
{
    TVariant up_most = from;
    for( ;; )
    {
        TVariant up_most_next = std::visit( []( auto&& arg ) -> TVariant { return arg->m_inheritance; }, up_most );
        if( up_most_next == up_most )
            break;
        up_most = up_most_next;
    }
    return up_most;
}

class Factory
{
public:
    static mega::io::Object* create( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo );
};

}
#endif //{{ guard }}
