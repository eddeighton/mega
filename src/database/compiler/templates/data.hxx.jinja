//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#ifndef {{ guard }}
#define {{ guard }}

#include "database/common/api.hpp"

#include "database/common/object_info.hpp"
#include "database/common/object.hpp"
#include "database/common/loader.hpp"
#include "database/common/storer.hpp"
#include "database/common/data_pointer.hpp"
#include "database/common/data_variant.hpp"
#include "database/common/object_loader.hpp"

#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "mega/invocation_io.hpp"
#include "mega/relation_io.hpp"
#include "mega/type_id_io.hpp"
#include "mega/json_io.hpp"

#include "database/types/arguments.hpp"
#include "database/types/cardinality.hpp"
#include "database/types/component_type.hpp"
#include "database/types/derivation.hpp"
#include "database/types/ownership.hpp"
#include "database/types/source_location.hpp"
#include "database/types/type_id.hpp"

#include <string>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>


namespace data
{

// declarations
{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    struct {{ part.name }};
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}

// definitions
{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    struct {{ part.name }} : public mega::io::Object
    {
        {{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo );
{% if length(part.initialisations) %}
        {{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo{% for property in part.initialisations %}, {{ property.argtype }} {{ property.name }}{% endfor %} );
{% endif %}
        enum 
        {
            Object_Part_Type_ID = {{ part.typeID }}
        };
{% for property in part.properties %}
        {{ property.type }} {{ property.name }};
{% endfor %}{#part.property#}
{% for pointer in part.data_pointers %}
        Ptr< {{ pointer.typename }} > {{ pointer.longname }};
{% endfor %}{#part.data_pointers#}
{% for pointer in part.raw_pointers %}
        Ptr< {{ pointer.typename }} > {{ pointer.longname }};
{% endfor %}{#part.raw_pointers#}
{% if part.has_inheritance %}
        {{ part.inheritance_variant }} m_inheritance;
{% endif %}
        virtual bool test_inheritance_pointer( ObjectPartLoader &loader ) const;
        virtual void set_inheritance_pointer();
        virtual void load( mega::io::Loader& loader );
        virtual void store( mega::io::Storer& storer ) const;
        virtual void to_json( nlohmann::json& data ) const;
    };
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}

{% for conversion in conversions %}
template <>
inline Ptr< {{ conversion.to }} > convert( const Ptr< {{ conversion.from }} >& from )
{
    return from{% for pointer in conversion.pointers %}->{{ pointer }}{% endfor %};
}
{% endfor %}{# conversions #}
{% for conversion in base_conversions %}
inline Ptr< {{ conversion.to }} > to_base( const Ptr< {{ conversion.from }} >& from )
{
    return from{% for pointer in conversion.pointers %}->{{ pointer }}{% endfor %};
}
{% endfor %}{# base_conversions #}

template < typename TTo >
inline Ptr< TTo > convert( const data::Variant& from )
{
    switch( from.getType() )
    {
{% for file in files %}
{% for part in file.parts %}
        case {{ file.name }}::{{ part.name }}::Object_Part_Type_ID: 
            return convert< TTo >( *reinterpret_cast< const Ptr< {{ file.name }}::{{ part.name }} >* >( &from ) );
{% endfor %}{#file.parts#}
{% endfor %}{# files #}
        default:
        {
            THROW_RTE( "Unknown variant type" );
        }
    }
}

{% for function in functions %}
{{ function.propertytype }}& {{ function.long_name }}({{ function.variant_type }}& m_data);
{% endfor %}{# for function in functions #}

template< typename Visitor >
auto& visit( const Visitor& visitor, Variant& var )
{
    switch( var.getType() )
    {
{% for file in files %}
{% for part in file.parts %}
        case {{ file.name }}::{{ part.name }}::Object_Part_Type_ID: return visitor( *reinterpret_cast< const Ptr< {{ file.name }}::{{ part.name }} >* >( &var ) );
{% endfor %}{#file.parts#}
{% endfor %}{# files #}
        default:
        {
            THROW_RTE( "Unknown variant type" );
        }
    }
}

inline const Variant& get_inheritance( const Variant& var )
{
    switch( var.getType() )
    {
{% for file in files %}
{% for part in file.parts %}
        case {{ file.name }}::{{ part.name }}::Object_Part_Type_ID: 
{% if part.has_inheritance %}
            return ( *reinterpret_cast< const Ptr< {{ file.name }}::{{ part.name }} >* >( &var ) )->m_inheritance;
{% else %}
            return var;
{% endif %}
{% endfor %}{#file.parts#}
{% endfor %}{# files #}
        default:
        {
            THROW_RTE( "Unknown variant type" );
        }
    }
}

inline Variant to_upper( Variant& from )
{
    Variant up_most = from;
    for ( ;; )
    {
        const Variant& up_most_next = get_inheritance( up_most );
        if ( up_most_next == up_most )
            break;
        up_most = up_most_next;
    }
    return up_most;
}

}
#endif //{{ guard }}
