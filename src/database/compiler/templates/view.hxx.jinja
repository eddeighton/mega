//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.




#ifndef {{ guard }}
#define {{ guard }}

#include "database/model/environment.hxx"

#include "database/types/invocation_id.hpp"
#include "database/types/component_type.hpp"
#include "database/types/type_id.hpp"

#include "mega/native_types.hpp"
#include "mega/reference.hpp"

#include "common/hash.hpp"
#include "common/stash.hpp"

#include "nlohmann/json.hpp"

#include <string>
#include <optional>
#include <memory>
#include <variant>
#include <vector>
#include <utility>
#include <map>
#include <set>
#include <unordered_map>

namespace {{ stage.name }}
{
    template< typename TFrom, typename TTo >
    struct PointerCast;

    class Database;

    class InterfaceBaseClass
    {
    public:
        virtual ~InterfaceBaseClass() = 0;
    };

    // forward declarations
{% for interface in stage.interfaces %}
{% for namespace in interface.namespaces %}
    namespace {{ namespace }}
    { 
{% endfor %}{#interface.namespaces#}
        class {{ interface.name }};
{% for namespace in interface.namespaces %}
    } //{{ namespace }}
{% endfor %}{#interface.namespaces#}
{% endfor %}{# stage.interfaces #}
    
    // Definitions

{% for interface in stage.interfaces %}
{% for namespace in interface.namespaces %}
    namespace {{ namespace }}
    { 
{% endfor %}{#interface.namespaces#}
        class {{ interface.name }} : public virtual InterfaceBaseClass{% if interface.has_base %}, public virtual {{ interface.base }}{% endif %}

        {
        protected:
            {{ interface.name }}();
            virtual ~{{ interface.name }}() = 0;
        public:
            {{ interface.name }}( const {{ interface.name }}& ) = delete;
            {{ interface.name }}& operator=( const {{ interface.name }}& ) = delete;
            static constexpr const char* TYPE_NAME = "{{ interface.fullname }}";
{% if interface.readwrite %}
            struct Args
            {
{% for ctor in interface.args_ctors %}
                Args({% for param in ctor.params %}{{ param.type }} {{ param.name }}{% if not loop.is_last %}, {% endif %}{% endfor %})
{% for param in ctor.params %}
                    {% if loop.is_first %}:{% else %},{% endif %} {{ param.value }}( {{ param.name }} )
{% endfor %}{# ctor.params #}
                {
                }
{% endfor %}{# interface.ctors #}
{% for value in interface.args_values %}
                {{ value.type }} {{ value.name }};
{% endfor %}{# interface.values #}
            };
{% endif %}

{% for function in interface.functions %}
            virtual {{ function.returntype }} {{ function.name }}({% for param in function.params %}{{ param.type }} {{ param.name }}{% if not loop.is_last %}, {% endif %}{% endfor %}) const = 0;
{% endfor %}{#interface.functions#}
            virtual const mega::io::ObjectInfo& _get_object_info() const = 0;
        private:
            template< typename TFrom, typename TTo >
            friend struct ::{{ stage.name }}::PointerCast;
            virtual bool isa( const char* pszTypeName ) const = 0;
        };
{% for namespace in interface.namespaces %}
    } //{{ namespace }}
{% endfor %}{#interface.namespaces#}
{% endfor %}{# stage.interfaces #}

    class Database
    {
    public:
        struct Pimpl;
        Database( const mega::io::Environment& environment );
        Database( const mega::io::Environment& environment, const mega::io::SourceFilePath& sourceFile );
        
        template< typename T >
        inline std::vector< T* > many( const mega::io::SourceFilePath& sourceFile ) const;

        template< typename T >
        inline T* one( const mega::io::SourceFilePath& sourceFile ) const;

        template< typename T >
        inline T* oneOpt( const mega::io::SourceFilePath& sourceFile ) const;

        template< typename T >
        inline T* construct( const typename T::Args& arguments );

        template< typename T, typename TFrom >
        inline T* convert( const TFrom* pFrom ) const
        {
            return dynamic_cast< T* >( convert_impl( pFrom->_get_object_info() ) );
        }

{% for file in stage.readwrite_files %}
        task::FileHash save_{{ file.name }}_to_temp() const;
{% endfor %}{# stage.readwrite_files #}

        void to_json( nlohmann::json& data ) const;

    private:
{% for many_accessor in stage.many_accessors %}
        std::vector< {{ many_accessor.type }}* > many_{{ many_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const;
{% endfor %}{# stage.accessors #}
{% for one_accessor in stage.one_accessors %}
        {{ one_accessor.type }}* one_{{ one_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const;
{% endfor %}{# stage.accessors #}
{% for one_opt_accessor in stage.one_opt_accessors %}
        {{ one_opt_accessor.type }}* > oneOpt_{{ one_opt_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const;
{% endfor %}{# stage.accessors #}
{% for constructor in stage.constructors %}
        {{ constructor.return_type }}* {{ constructor.function_name }}( const {{ constructor.return_type }}::Args& arguments );
{% endfor %}{# stage.constructors #}
        InterfaceBaseClass* convert_impl( const mega::io::ObjectInfo& objectInfo ) const;
    private:
        std::shared_ptr< Pimpl > m_pimpl;
    };

    template< typename TFrom, typename TTo >
    struct PointerCast
    {
        inline TTo* operator()( TFrom* pFrom ) const
        {
            if( pFrom->isa( TTo::TYPE_NAME ) )
                return dynamic_cast< TTo* >( pFrom );
            else
                return nullptr;
        }
    };

    template< typename TTo, typename TFrom >
    inline TTo* db_cast( TFrom* pFrom )
    {
        return PointerCast< TFrom, TTo >()( pFrom );
    }

{% for constructor in stage.constructors %}
    template<>
    inline {{ constructor.return_type }}* Database::construct< {{ constructor.return_type }} >( const {{ constructor.return_type }}::Args& arguments )
    {
        return {{ constructor.function_name }}( arguments );
    }
{% endfor %}{# stage.constructors #}
{% for many_accessor in stage.many_accessors %}
    template<>
    inline std::vector< {{ many_accessor.type }}* > Database::many< {{ many_accessor.type }} >( const mega::io::SourceFilePath& sourceFile ) const
    {
        return many_{{ many_accessor.longname }}( sourceFile );
    }
{% endfor %}{# stage.accessors #}
{% for one_accessor in stage.one_accessors %}
    template<>
    inline {{ one_accessor.type }}* Database::one< {{ one_accessor.type }} >( const mega::io::SourceFilePath& sourceFile ) const
    {
        return one_{{ one_accessor.longname }}( sourceFile );
    }
{% endfor %}{# stage.accessors #}
{% for one_opt_accessor in stage.one_opt_accessors %}
    template<>
    inline {{ one_opt_accessor.type }}* > Database::oneOpt< {{ one_opt_accessor.type }} >( const mega::io::SourceFilePath& sourceFile ) const
    {
        return oneOpt_{{ one_opt_accessor.longname }}( sourceFile );
    }
{% endfor %}{# stage.accessors #}
}

#endif //{{ guard }}
