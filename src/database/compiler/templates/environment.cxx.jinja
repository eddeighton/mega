
#include "database/model/environment.hxx"

#include "database/common/component_info.hpp"
#include "database/common/sources.hpp"

#include "database/model/manifest.hxx"

#include "common/file.hpp"

#include <boost/filesystem/directory.hpp>

namespace mega
{
namespace io
{
    using Path = Environment::Path;

    Environment::Environment( const Path& rootSourceDir, const Path& rootBuildDir, const Path& tempDir )
        : m_rootSourceDir( rootSourceDir )
        , m_rootBuildDir( rootBuildDir )
        , m_tempDir( tempDir )
    {
    }

    Path Environment::stashDir() const { return m_rootBuildDir / "stash"; }

    manifestFilePath Environment::project_manifest() const 
    { 
        std::ostringstream os;
        os << "project" << manifestFilePath::extension().string(); 
        return manifestFilePath( os.str() );
    }

    Path Environment::dependency( const std::string& strOpaque ) const
    {
        std::ostringstream os;
        os << strOpaque << megaFilePath::extension().string();
        return Path( os.str() );
    }

    ComponentListingFilePath Environment::ComponentListingFilePath_fromPath( const Path& buildDirectory ) const
    {
        VERIFY_RTE_MSG( boost::filesystem::is_directory( buildDirectory ),
                        "Source List path is not a directory: " << buildDirectory.string() );
        return ComponentListingFilePath( boost::filesystem::relative( buildDirectory / "component.listing", m_rootBuildDir ) );
    }
{% for source in sources %}
    {{ source.type }}FilePath Environment::{{ source.type }}FilePath_fromPath( const boost::filesystem::path& filePath ) const
    {
        return {{ source.type }}FilePath( boost::filesystem::relative( filePath, m_rootSourceDir ) );
    }
{% endfor %}

{% for stage in stages %}
{% for file in stage.files %}
    CompilationFilePath Environment::{{ stage.name }}_{{ file.name }}( const {{ stage.source }}FilePath& source) const
    {
        std::ostringstream os;                                                                
        os << source.path().filename().string() << ".{{ stage.name }}.{{ file.name }}" << CompilationFilePath::extension().string();
        return CompilationFilePath( Path( source.path() ).remove_filename() / os.str() );      
    }
{% endfor %}
{% endfor %}

} // namespace io
} // namespace mega
