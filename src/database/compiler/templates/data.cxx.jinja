
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#include "database/model/data.hxx"

#include "nlohmann/json.hpp"

namespace nlohmann {
    template <typename T>
    struct adl_serializer< std::optional<T> > 
    {
        static void to_json(json& j, const std::optional<T>& opt) 
        {
            if (!opt.has_value()) 
            {
                j = nullptr;
            } 
            else 
            {
                j = opt.value();
            }
        }
        static void from_json(const json& j, std::optional<T>& opt) 
        {
            if (j.is_null()) 
            {
                opt = std::optional<T>();
            } 
            else 
            {
                opt = j.get<T>();
            }
        }
    };
}

namespace data
{

{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    // struct {{ part.name }} : public mega::io::Object
    {{ part.name }}::{{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo )
        :   mega::io::Object( objectInfo ){% if part.has_inheritance %}, m_inheritance( data::Ptr< data::{{ file.name }}::{{ part.name }} >( loader, this ) ){% endif %}
{% for pointer in part.data_pointers %}
          , {{ pointer.longname }}( loader )
{% endfor %}{#part.pointers#}
{% for pointer in part.raw_pointers %}
          , {{ pointer.longname }}( loader )
{% endfor %}{#part.pointers#}
{% for property in part.properties %}
{% if property.is_pointer %}
          , {{ property.name }}( loader )
{% endif %}
{% endfor %}{#part.property#}
    {
    }
{% if length(part.initialisations) %}
    {{ part.name }}::{{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo{% for property in part.initialisations %}, {{ property.argtype }} {{ property.name }}{% endfor %} )
        :   mega::io::Object( objectInfo ){% if part.has_inheritance %}, m_inheritance( data::Ptr< data::{{ file.name }}::{{ part.name }} >( loader, this ) ){% endif %}
{% for pointer in part.data_pointers %}
{% if pointer.no_ctor_arg %}
          , {{ pointer.longname }}( loader )
{% endif %}
{% endfor %}{#part.pointers#}
{% for pointer in part.raw_pointers %}
          , {{ pointer.longname }}( loader )
{% endfor %}{#part.pointers#}
{% for property in part.initialisations %}
          , {{ property.name }}( {{ property.name }} )
{% endfor %}{#part.property#}
    {
    }
{% endif %}{# length(part.initialisations) #}
    bool {{ part.name }}::test_inheritance_pointer( ObjectPartLoader &loader ) const
    {
{% if part.has_inheritance %}
        return m_inheritance == {{ part.inheritance_variant }}{ data::Ptr< data::{{ file.name }}::{{ part.name }} >( loader, const_cast< {{ part.name }}* >( this ) ) };
{% else %}
        return false;
{% endif %} 
    }
    void {{ part.name }}::set_inheritance_pointer()
    {
{% if part.has_base %}
        {{ part.base }}->{{ part.inheritance_ptr }} = {{ part.inheritance_ptr_init }};
{% endif %}
    }
    void {{ part.name }}::load( mega::io::Loader& loader )
    {
{% for pointer in part.data_pointers %}
        loader.load( {{ pointer.longname }} );
{% endfor %}{#part.pointers#}
{% for property in part.properties %}
        loader.load( {{ property.name }} );
{% endfor %}{#part.property#}
    }
    void {{ part.name }}::store( mega::io::Storer& storer ) const
    {
{% for pointer in part.data_pointers %}
        storer.store( {{ pointer.longname }} );
{% endfor %}{#part.pointers#}
{% for property in part.properties %}
{% if property.has_validation %}  
        {{ property.validation }}
{% endif %}
        storer.store( {{ property.name }} );
{% endfor %}{#part.property#}
    }
    void {{ part.name }}::to_json( nlohmann::json& _part__ ) const
    {
        _part__ = nlohmann::json::object(
            { 
                { "partname", "{{ part.name }}" },
                { "filetype" , "{{ file.name }}" },
                { "typeID", Object_Part_Type_ID },
                { "fileID", getFileID() },
                { "index", getIndex() }, 
                { "properties", nlohmann::json::array() }
            });
{% for property in part.properties %}
{% if property.has_validation %}
        {
            nlohmann::json property = nlohmann::json::object({
                { "{{ property.name }}", {{ property.name }}.value() } } );
            _part__[ "properties" ].push_back( property );
        }
{% else %}
        {
            nlohmann::json property = nlohmann::json::object({
                { "{{ property.name }}", {{ property.name }} } } );
            _part__[ "properties" ].push_back( property );
        }
{% endif %}
{% endfor %}{#part.property#}
    }
        
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}


{% for function in functions %}
{{ function.propertytype }}& {{ function.name }}({{ function.variant_type }}& m_data)
{
    return std::visit( 
        []( auto& arg ) -> {{ function.propertytype }}&
        {
            using T = std::decay_t< decltype( arg ) >;
{% for variant in function.variants %}
{% if variant.matched %}
            {% if ( not loop.is_first ) %}else {% endif %} if constexpr( std::is_same_v< T, data::Ptr< data::{{ variant.primaryobjectpart }} > >)
            {
                data::Ptr< data::{{ variant.dataobjectpart }} > part = 
                    data::convert< data::{{ variant.dataobjectpart }} >( arg );
                VERIFY_RTE_MSG( part.getObjectInfo().getIndex() != mega::io::ObjectInfo::NO_INDEX,
                    "Invalid data reference in: {{ function.name }}" );
                return part->{{ function.property }};
            }
{% endif %}
{% endfor %}{# function.bodies #}
            else
            {
                THROW_RTE( "Invalid call to {{ function.name }}" );
            }
        }
        , m_data );
}
{% endfor %}{# for function in functions #}

mega::io::Object* Factory::create( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo )
{
    switch( objectInfo.getType() )
    {
{% for file in files %}
{% for part in file.parts %}
        case {{ part.typeID }}: return new {{ file.name }}::{{ part.name }}( loader, objectInfo );
{% endfor %}{#file.parts#}
{% endfor %}{# files #}
        default:
            THROW_RTE( "Unrecognised object type ID" );
    }
}

}
