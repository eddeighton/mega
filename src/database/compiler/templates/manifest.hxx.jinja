//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#ifndef IO_MANIFEST_26_MAR_2022
#define IO_MANIFEST_26_MAR_2022

#include "database/common/api.hpp"
#include "database/common/object.hpp"
#include "database/common/serialisation.hpp"
#include "database/common/object_info.hpp"
#include "database/common/file.hpp"
#include "database/common/manifest_data.hpp"

#include "database/types/sources.hpp"

#include "database/model/environment.hxx"
#include "database/model/file_info.hxx"

#include "common/hash.hpp"

#include <boost/filesystem/path.hpp>

#include <memory>
#include <map>

namespace data
{
    class ObjectPartLoader;
}
namespace mega::io
{
    class Component;
    class BuildEnvironment;
    class FileStore;

    class Manifest : public ManifestData
    {
    public:
        using PtrCst                = std::shared_ptr< const Manifest >;
        using FileTypeMap           = std::map< std::pair< FileInfo::Type, SourceFilePath >, FileInfoVector::const_iterator >;
        using FileIDVector          = std::vector< ObjectInfo::FileID >;
        using FileDependencies      = std::vector< FileIDVector >;
        using FileIDSet             = std::set< ObjectInfo::FileID >;

        Manifest();

        // Load an existing manifest from the specified file.
        Manifest( const Environment& environment, const manifestFilePath& filepath );

        // Construct a manifest from the source and build directory by
        // recursively analysing existing source listing files.
        Manifest( const BuildEnvironment& environment, const std::vector< boost::filesystem::path >& sourceListings );

        File::PtrCst loadFile( const Environment& environment, mega::io::FileStore& fileStore, 
            const SourceFilePath& sourceFile, FileInfo::Stage stage, FileInfo::Type fileType ) const;

        File::PtrCst loadFile( const Environment& environment, mega::io::FileStore& fileStore, FileInfo::Stage stage,
            ObjectInfo::FileID fileID ) const;

        void loadAll( const Environment& environment, mega::io::FileStore& fileStore, FileInfo::Stage stage ) const;
        
        File::Ptr createFile( const Environment& environment, mega::io::FileStore& fileStore,
            const SourceFilePath& sourceFile, FileInfo::Stage stage, FileInfo::Type fileType ) const;

        task::FileHash save_temp( const Environment& environment, const manifestFilePath& filepath ) const;

    private: 
        File::PtrCst loadFileImpl( const Environment& environment, mega::io::FileStore& fileStore, 
            FileInfo::Stage stage, ObjectInfo::FileID fileID, std::vector< File::Ptr >& loadedFiles ) const;
        void initialiseLookupTables();
        
        FileTypeMap             m_fileTypeMap;
        FileDependencies        m_dependencies;
    };

} // namespace mega

#endif // IO_MANIFEST_26_MAR_2022