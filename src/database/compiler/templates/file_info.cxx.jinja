//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.




#include "database/model/file_info.hxx"

namespace mega::io
{
    FileInfo::FileInfo()
        : m_fileType( TOTAL_FILE_TYPES )
        , m_fileID( ObjectInfo::NO_FILE )
    {
    }

    FileInfo::FileInfo( Type                            fileType,
                        ObjectInfo::FileID              fileID,
                        const CompilationFilePath&      filePath,
                        const SourceFilePath&           objectSourceFilePath )
        : m_fileType( fileType )
        , m_fileID( fileID )
        , m_filePath( filePath )
        , m_objectSourceFilePath( objectSourceFilePath )

    {
    }

} // namespace mega

std::ostream& operator<<( std::ostream& os, mega::io::FileInfo::Stage stage )
{
    switch( stage )
    {
{% for stage in stages %}
        case mega::io::FileInfo::{{ stage.name }}: return os << "{{ stage.name }}";
{% endfor %}
        default:
            THROW_RTE( "Unknown stage type" );
    }
}

std::ostream& operator<<( std::ostream& os, mega::io::FileInfo::Type type )
{
    switch( type )
    {
{% for stage in stages %}
{% for file in stage.files %}
        case mega::io::FileInfo::{{ stage.name }}_{{ file.name }}: return os << "{{ stage.name }}_{{ file.name }}";
{% endfor %}
{% endfor %}
        default:
            THROW_RTE( "Unknown stage type" );
    }
}

BOOST_CLASS_IMPLEMENTATION( mega::io::FileInfo, object_serializable )
