//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.




#include "database/model/{{ stage.name }}.hxx"

#include "database/common/object_info.hpp"
#include "database/common/file.hpp"
#include "database/common/data_pointer.hpp"

#include "database/model/file_info.hxx"
#include "database/model/manifest.hxx"
#include "database/model/data.hxx"

#include "common/hash.hpp"

#include <variant>
#include <memory>
#include <unordered_map>
#include <any>

namespace {{ stage.name }}
{
    InterfaceBaseClass::~InterfaceBaseClass(){}
{% for interface in stage.interfaces %}
{% for namespace in interface.namespaces %}
    namespace {{ namespace }}
    { 
{% endfor %}{#interface.namespaces#}
        {{ interface.name }}::{{ interface.name }}(){}
        {{ interface.name }}::~{{ interface.name }}(){}
{% for namespace in interface.namespaces %}
    } //{{ namespace }}
{% endfor %}{#interface.namespaces#}
{% endfor %}{# stage.interfaces #}
}

namespace
{
class SuperTypeBase
{
public:
    virtual ~SuperTypeBase(){}
};

class SuperFactory;

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
// Super type declarations
{% for stype in stage.supertypes %}
class {{ stype.name }} : public SuperTypeBase
{% for interface in stype.interfaces %}
{% if interface.unique %}
    , public virtual {{ stage.name }}::{{ interface.name }}
{% endif %}
{% endfor %}

{
    SuperFactory& m_factory;
public:
    using DataVariant = {{ stype.variant_type }};
    mutable DataVariant m_data;
{% for interface in stype.interfaces %}
    {{ stype.name }}( SuperFactory& factory, const data::Ptr< data::{{ interface.part }} >& data );
    void reconstruct( const data::Ptr< data::{{ interface.part }} >& data );
{% endfor %}{# stype.interfaces #}
    virtual ~{{ stype.name }}();
{% for function in stype.functions %}
    {{ function.returntype }} {{ function.name }}({% for param in function.params %}{{ param.type }} {{ param.name }}{% if not loop.is_last %}, {% endif %}{% endfor %}) const;
{% endfor %}{# stype.functions #}
    virtual bool isa( const char* pszTypeName ) const;
    virtual const mega::io::ObjectInfo& _get_object_info() const;
};
{% endfor %}{# stage.supertypes #}


template< typename T >
struct traits;

{% for view_to_data in stage.conversions_view_to_data %}
template<>
struct traits< {{ view_to_data.type }} >
{
    using DataType = data::{{ view_to_data.file }}::{{ view_to_data.object }};
    using SuperType = {{ view_to_data.supertype }};
};
{% endfor %}

{% for data_to_view in stage.conversions_data_to_view %}
template<>
struct traits< data::{{ data_to_view.file }}::{{ data_to_view.object }} >
{
    using ViewType = {{ data_to_view.type }};
    using SuperType = {{ data_to_view.supertype }};
};
{% endfor %}

struct SuperFactory
{
    using SuperTypePtr = std::unique_ptr< SuperTypeBase >;
    struct ObjectInfoHash
    {
        mega::U64 operator()( const mega::io::ObjectInfo& objectInfo ) const
        {
            return common::Hash( objectInfo.getType(), objectInfo.getFileID(), objectInfo.getIndex() ).get();
        }
    };
    struct ObjectInfoEquality
    {
        mega::U64 operator()( const mega::io::ObjectInfo& left, const mega::io::ObjectInfo& right ) const
        {
            return  left.getType()      == right.getType() &&
                    left.getFileID()    == right.getFileID() &&
                    left.getIndex()     == right.getIndex() ;
        }
    };
    using InterfaceMap = std::unordered_map< mega::io::ObjectInfo, SuperTypePtr, ObjectInfoHash, ObjectInfoEquality >;
    mutable InterfaceMap m_interfaceHash;

    template< typename TSuper, typename TView, typename TData >
    TSuper* findOrConstruct( const data::Ptr< TData > &pData ) const
    {
        auto basePtr = data::to_base( pData );
        InterfaceMap::const_iterator iFind = m_interfaceHash.find( basePtr.getObjectInfo() );
        if( iFind != m_interfaceHash.end() )
        {
            TSuper* pSuper = dynamic_cast< TSuper* >( iFind->second.get() );
            VERIFY_RTE( pSuper );
            TView* pView = {{ stage.name }}::dynamic_database_cast< TView >( pSuper );
            return pSuper;
        }
        else
        {
            TSuper *pSuper = new TSuper( const_cast< SuperFactory& >( *this ), pData );
            m_interfaceHash[ basePtr.getObjectInfo() ] = SuperTypePtr( pSuper );
            return pSuper;
        }
    }
};

// conversion generics
template< typename TFromView >
inline data::Ptr< typename traits< TFromView >::DataType > toData( SuperFactory& factory, TFromView* pFrom )
{
    using TToData = typename traits< TFromView >::DataType;
    using SuperType   = typename traits< TToData >::SuperType;
    SuperType *pSuper = dynamic_cast< SuperType * >( pFrom );
    VERIFY_RTE_MSG( pFrom, "Null pointer: " << typeid( TFromView ).name() );
    return data::convert< TToData >( pSuper->m_data );
}

template< typename TFromData >
inline typename traits< TFromData >::ViewType* toView( SuperFactory& factory, const data::Ptr< TFromData > &from )
{
    using TToView = typename traits< TFromData >::ViewType;
    using SuperType = typename traits< TFromData >::SuperType;
    return factory.findOrConstruct< SuperType, TToView, TFromData >( from );
}

template< typename TFromView >
inline std::optional< data::Ptr< typename traits< TFromView >::DataType > > toData( SuperFactory& factory, std::optional< TFromView* > pFrom )
{
    using TToData = typename traits< TFromView >::DataType;
    if( pFrom.has_value() )
        return std::optional< data::Ptr< TToData > >( toData( factory, pFrom.value() ) );
    else
        return std::optional< data::Ptr< TToData > >();
}

template< typename TFromData >
inline std::optional< typename traits< TFromData >::ViewType* > toView( SuperFactory& factory, const std::optional< TFromData >& from )
{
    using TToView = typename traits< TFromData >::ViewType;
    if( from.has_value() )
        return std::optional< TToView* >( toView( factory, from.value() ) );
    else
        return std::optional< TToView* >();
}

template< typename TFromView >
inline std::vector< data::Ptr< typename traits< TFromView >::DataType > > toData( SuperFactory& factory, const std::vector< TFromView* >& from )
{
    using TToData = typename traits< TFromView >::DataType;
    std::vector< data::Ptr< TToData > > result;
    for( TFromView* pFrom : from )
    {
        result.push_back( toData( factory, pFrom ) );
    }
    return result;
}

template< typename TFromData >
inline std::vector< typename traits< TFromData >::ViewType* > toView( SuperFactory& factory, const std::vector< data::Ptr< TFromData > >& from )
{
    using TToView = typename traits< TFromData >::ViewType;
    std::vector< TToView* > result;
    for( const data::Ptr< TFromData >& fromData : from )
    {
        result.push_back( toView( factory, fromData ) );
    }
    return result;
}


template< typename TFromView, typename TKey >
inline std::map< TKey, data::Ptr< typename traits< TFromView >::DataType > > toData( SuperFactory& factory, const std::map< TKey, TFromView* >& from )
{
    using TToData = typename traits< TFromView >::DataType;
    std::map< TKey, data::Ptr< TToData > > result;
    for( typename std::map< TKey, TFromView* >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( i->first, toData( factory, i->second ) ) );
    }
    return result;
}

template< typename TFromData, typename TKey >
inline std::map< TKey, typename traits< TFromData >::ViewType* > toView( SuperFactory& factory, const std::map< TKey, data::Ptr< TFromData > >& from )
{
    using TToView = typename traits< TFromData >::ViewType;
    std::map< TKey, TToView* > result;
    for( typename std::map< TKey, data::Ptr< TFromData > >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( i->first, toView( factory, i->second ) ) );
    }
    return result;
}

template< typename TFromView, typename TValue >
inline std::map< data::Ptr< typename traits< TFromView >::DataType >, TValue > toData( SuperFactory& factory, const std::map< TFromView*, TValue >& from )
{
    using TToData = typename traits< TFromView >::DataType;
    std::map< data::Ptr< TToData >, TValue > result;
    for( typename std::map< TFromView*, TValue >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( toData( factory, i->first ), i->second ) );
    }
    return result;
}

template< typename TFromData, typename TValue >
inline std::map< typename traits< TFromData >::ViewType*, TValue > toView( SuperFactory& factory, const std::map< data::Ptr< TFromData >, TValue >& from )
{
    using TToView = typename traits< TFromData >::ViewType;
    std::map< TToView*, TValue > result;
    for( typename std::map< data::Ptr< TFromData >, TValue >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( toView( factory, i->first ), i->second ) );
    }
    return result;
}

template< typename TKeyFromView, typename TValueFromView >
inline std::map< data::Ptr< typename traits< TKeyFromView >::DataType >, data::Ptr< typename traits< TValueFromView >::DataType > > toData( SuperFactory& factory, const std::map< TKeyFromView*, TValueFromView* >& from )
{
    using TKeyToData = typename traits< TKeyFromView >::DataType;
    using TValueToData = typename traits< TValueFromView >::DataType;

    std::map< data::Ptr< TKeyToData >, data::Ptr< TValueToData > > result;
    for( typename std::map< TKeyFromView*, TValueFromView* >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( 
            toData( factory, i->first ), 
            toData( factory, i->second ) ) );
    }
    return result;
}

template< typename TKeyFromData, typename TValueFromData >
inline std::map< typename traits< TKeyFromData >::ViewType*, typename traits< TValueFromData >::ViewType* > toView( SuperFactory& factory, const std::map< data::Ptr< TKeyFromData >, data::Ptr< TValueFromData > >& from )
{
    using TKeyToView = typename traits< TKeyFromData >::ViewType;
    using TValueToView = typename traits< TValueFromData >::ViewType;

    std::map< TKeyToView*, TValueToView* > result;
    for( typename std::map< data::Ptr< TKeyFromData >, data::Ptr< TValueFromData > >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( 
            toView( factory, i->first ), 
            toView( factory, i->second )) );
    }
    return result;
}

template< typename TFromView, typename TKey >
inline std::multimap< TKey, data::Ptr< typename traits< TFromView >::DataType > > toData( SuperFactory& factory, const std::multimap< TKey, TFromView* >& from )
{
    using TToData = typename traits< TFromView >::DataType;
    std::multimap< TKey, data::Ptr< TToData > > result;
    for( typename std::multimap< TKey, TFromView* >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( i->first, toData( factory, i->second ) ) );
    }
    return result;
}

template< typename TFromData, typename TKey >
inline std::multimap< TKey, typename traits< TFromData >::ViewType* > toView( SuperFactory& factory, const std::multimap< TKey, data::Ptr< TFromData > >& from )
{
    using TToView = typename traits< TFromData >::ViewType;
    std::multimap< TKey, TToView* > result;
    for( typename std::multimap< TKey, data::Ptr< TFromData > >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( i->first, toView( factory, i->second ) ) );
    }
    return result;
}

template< typename TFromView, typename TValue >
inline std::multimap< data::Ptr< typename traits< TFromView >::DataType >, TValue > toData( SuperFactory& factory, const std::multimap< TFromView*, TValue >& from )
{
    using TToData = typename traits< TFromView >::DataType;
    std::multimap< data::Ptr< TToData >, TValue > result;
    for( typename std::multimap< TFromView*, TValue >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( toData( factory, i->first ), i->second ) );
    }
    return result;
}

template< typename TFromData, typename TValue >
inline std::multimap< typename traits< TFromData >::ViewType*, TValue > toView( SuperFactory& factory, const std::multimap< data::Ptr< TFromData >, TValue >& from )
{
    using TToView = typename traits< TFromData >::ViewType;
    std::multimap< TToView*, TValue > result;
    for( typename std::multimap< data::Ptr< TFromData >, TValue >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( toView( factory, i->first ), i->second ) );
    }
    return result;
}

template< typename TKeyFromView, typename TValueFromView >
inline std::multimap< data::Ptr< typename traits< TKeyFromView >::DataType >, data::Ptr< typename traits< TValueFromView >::DataType > > toData( SuperFactory& factory, const std::multimap< TKeyFromView*, TValueFromView* >& from )
{
    using TKeyToData = typename traits< TKeyFromView >::DataType;
    using TValueToData = typename traits< TValueFromView >::DataType;

    std::multimap< data::Ptr< TKeyToData >, data::Ptr< TValueToData > > result;
    for( typename std::multimap< TKeyFromView*, TValueFromView* >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( 
            toData( factory, i->first ), 
            toData( factory, i->second ) ) );
    }
    return result;
}

template< typename TKeyFromData, typename TValueFromData >
inline std::multimap< typename traits< TKeyFromData >::ViewType*, typename traits< TValueFromData >::ViewType* > toView( SuperFactory& factory, const std::multimap< data::Ptr< TKeyFromData >, data::Ptr< TValueFromData > >& from )
{
    using TKeyToView = typename traits< TKeyFromData >::ViewType;
    using TValueToView = typename traits< TValueFromData >::ViewType;

    std::multimap< TKeyToView*, TValueToView* > result;
    for( typename std::multimap< data::Ptr< TKeyFromData >, data::Ptr< TValueFromData > >::const_iterator i = from.begin(), iEnd = from.end(); i!=iEnd; ++i )
    {
        result.insert( std::make_pair( 
            toView( factory, i->first ), 
            toView( factory, i->second )) );
    }
    return result;
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
// Super type definitions
{% for stype in stage.supertypes %}
{% for interface in stype.interfaces %}
{{ stype.name }}::{{ stype.name }}( SuperFactory& factory, const data::Ptr< data::{{ interface.part }} >& data )
    :   m_factory( factory ),
        m_data( data )
{
}
void {{ stype.name }}::reconstruct( const data::Ptr< data::{{ interface.part }} >& data )
{
    m_data = data;
}
{% endfor %}{# stype.interfaces #}
{{ stype.name }}::~{{ stype.name }}()
{
}

{% for function in stype.functions %}
{{ function.returntype }} {{ stype.name }}::{{ function.name }}({% for param in function.params %}{{ param.type }} {{ param.name }}{% if not loop.is_last %}, {% endif %}{% endfor %}) const
{
    {{ function.propertytype }}& data = data::{{ function.name }}( m_data );
{% for line in function.body.lines %}
    {{ line }}
{% endfor %}{# body.impl #}
}
{% endfor %}{# stype.functions #}

bool {{ stype.name }}::isa( const char* pszTypeName ) const
{
    m_data = data::to_upper( m_data );
{% for interface in stype.interfaces %}
    if( strcmp( pszTypeName, "{{ stage.name }}_{{ interface.fullname }}" ) == 0 )
    {
        return std::visit( []( auto& arg ) -> bool
        {
            using T = std::decay_t< decltype( arg ) >;
{% for cast in interface.casts %}
            {% if ( not loop.is_first ) %}else {% endif %} if constexpr( std::is_same_v< T, data::Ptr< data::{{ cast.type }} > >)
            {
                return true;
            }
{% endfor %}
            else
            {
                return false;
            }
        }, m_data );
    }
{% endfor %}{# stype.interfaces #}
    return false;
}

const mega::io::ObjectInfo& {{ stype.name }}::_get_object_info() const
{
    return std::visit( []( auto&& arg ) -> const mega::io::ObjectInfo& { return arg.getObjectInfo(); }, m_data );
}
{% endfor %}{# stage.supertypes #}
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
// Database implementation
namespace {{ stage.name }}
{
struct Database::Pimpl : public data::ObjectPartLoader, public SuperFactory
{
    Pimpl( const mega::io::Environment& environment )
        :   m_environment( environment ),
            m_manifest( m_environment, m_environment.project_manifest() )
    {
        m_manifest.loadAll( m_environment, *this, m_readonlyFiles, mega::io::FileInfo::{{ stage.name }} );
    }
    Pimpl( const mega::io::Environment& environment, const mega::io::SourceFilePath& sourceFile )
        :   m_environment( environment ),
            m_sourceFile( sourceFile ),
            m_manifest( m_environment, m_environment.project_manifest() )
    {
{% for file in stage.readwrite_files %}
        m_pFile_{{ file.name }} = m_manifest.createFile( m_environment, const_cast< Database::Pimpl&>(*this), 
            m_readwriteFiles, m_sourceFile, mega::io::FileInfo::{{ stage.name }}, mega::io::FileInfo::{{ stage.name }}_{{ file.name }} );
{% endfor %}{# stage.readwrite_files #}
    }

{% for many_accessor in stage.many_accessors %}
    std::vector< {{ many_accessor.type }}* > many_{{ many_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const
    {
        std::vector< {{ many_accessor.type }}* > result;
{% for file_accessor in many_accessor.files %}
        {
            mega::io::File::PtrCst pFile;
{% if file_accessor.read_write %}
            if( sourceFile == m_sourceFile )
                pFile = m_pFile_{{ file_accessor.file }};
            else
                pFile = m_manifest.loadFile( m_environment, const_cast< Database::Pimpl&>(*this), 
                    m_readonlyFiles, sourceFile, mega::io::FileInfo::{{ stage.name }}, mega::io::FileInfo::{{ file_accessor.stage }}_{{ file_accessor.file }} ) ;
{% else %}
            pFile = m_manifest.loadFile( m_environment, const_cast< Database::Pimpl&>(*this), 
                m_readonlyFiles, sourceFile, mega::io::FileInfo::{{ stage.name }}, mega::io::FileInfo::{{ file_accessor.stage }}_{{ file_accessor.file }} ) ;
{% endif %}
            for( mega::io::Object* pObject : pFile->range() )
            {
                if( data::{{ file_accessor.file }}::{{ file_accessor.object }}* pFound = 
                    dynamic_cast< data::{{ file_accessor.file }}::{{ file_accessor.object }}* >( pObject ) )
                {
                    data::Ptr< data::{{ file_accessor.file }}::{{ file_accessor.object }} > pData( const_cast<Database::Pimpl&>(*this), pFound );
                    result.push_back( toView( const_cast< Database::Pimpl&>(*this), pData ) );
                }
            }
        }
{% endfor %} {# for file_accessor in many_accessor.files #}
        return result;
    }
{% endfor %}{# stage.accessors #}
{% for one_accessor in stage.one_accessors %}
    {{ one_accessor.type }}* one_{{ one_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const
    {
        std::vector< {{ one_accessor.type }}* > result = many_{{ one_accessor.longname }}( sourceFile );
        VERIFY_RTE_MSG( !result.empty(), "Singular accessor for {{ one_accessor.type }} found none" );
        VERIFY_RTE_MSG( result.size() == 1U, "Singular accessor for {{ one_accessor.type }} found many" );
        return result.back();
    }
{% endfor %}{# stage.accessors #}
{% for one_opt_accessor in stage.one_opt_accessors %}
    {{ one_opt_accessor.type }}* > oneOpt_{{ one_opt_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const
    {
        std::vector< {{ one_opt_accessor.type }}* > result = many_{{ one_opt_accessor.longname }}( sourceFile );
        VERIFY_RTE_MSG( result.size() > 1U, "Singular accessor for {{ one_accessor.type }} found many" );
        if( !result.empty() )
            return result.back();
        else
            return nullptr;
    }
{% endfor %}{# stage.accessors #}

{% for constructor in stage.constructors %}
    {{ constructor.return_type }}* {{ constructor.function_name }}( const {{ constructor.return_type }}::Args& arguments )
    {
        try {
        using SuperType = {{ constructor.super_type_name }};
        SuperType* pSuper = nullptr;
        Database::Pimpl& database = *this;
{% for base in constructor.bases %}
    {% if ( not loop.is_first ) or ( constructor.reconstructor ) %}
            // Ed was here
            struct Visitor
            {
                Database::Pimpl& database;
                SuperType*& pSuper;
                Visitor( Database::Pimpl& database, SuperType*& pSuper )
                    :   database( database ),
                        pSuper( pSuper )
                {}
        {% if not constructor.reconstructor %}
                    data::Ptr< data::{{ base.primary_part.file }}::{{ base.primary_part.object }} > operator()( {{ base.typename }}* pExisting ) const
                    {
                        pSuper = dynamic_cast< SuperType* >( pExisting );
                        VERIFY_RTE( pSuper );
                        auto ptr = data::convert< data::{{ base.primary_part.file }}::{{ base.primary_part.object }} >( pSuper->m_data );
                        VERIFY_RTE_MSG( ptr->test_inheritance_pointer( database ), "Object already derived from: {{ base.typename }} while constructing type: {{ constructor.return_type }}" );
                        return ptr;
                    }
        {% endif %}
        {% if base.owns_primary_part or ( constructor.reconstructor ) %}
                    data::Ptr< data::{{ base.primary_part.file }}::{{ base.primary_part.object }} > operator()( const {{ base.typename }}::Args& arguments ) const
                    {
        {% endif %}{# base.owns_primary_part #}
    {% endif %}{# not loop.is_first or ( constructor.reconstructor ) #}
{% endfor %}{# constructor.bases #}
{% for base in constructor.bases_reverse%}
    {% if not loop.is_first %}
            auto visitorResult = std::visit( visitor, arguments.base.value() );
    {% endif %} {#not loop.is_first#}
    {% if base.owns_primary_part or ( constructor.reconstructor ) %}
            // primary part: {{ base.typename }}
        {% if constructor.reconstructor %}
            data::Ptr< data::{{ base.primary_part.file }}::{{ base.primary_part.object }} > pPrimaryObjectPart = toData( database, std::visit( []( auto&& arg ) -> 
                {{ base.typename }}* { return arg; }, arguments.base.value() ) );
            pSuper = dynamic_cast< SuperType* >( toView( database, pPrimaryObjectPart ) );
        {% else %}
            {% for arg in base.primary_part.args %}
                {% if arg.validation %}
                    VERIFY_RTE_MSG( {{ arg.validation }}, {{ arg.errormsg }} );
                {% endif %}
            {% endfor %}{# arg in base.primary_part.args #}
            data::Ptr< data::{{ base.primary_part.file }}::{{ base.primary_part.object }} > pPrimaryObjectPart =
                database.m_pFile_{{ base.primary_part.file }}->construct< data::{{ base.primary_part.file }}::{{ base.primary_part.object }} >
                    ({% for arg in base.primary_part.args %}{{ arg.expression }}{% if not loop.is_last %}, {% endif %}{% endfor %});
        {% endif %}
        {% for secondary_part in base.parts %}
            {% for arg in secondary_part.args %}
            {% if arg.validation %}
                VERIFY_RTE_MSG( {{ arg.validation }}, {{ arg.errormsg }} );
            {% endif %}
            {% endfor %}{# secondary_part in base.parts #}
                // secondary part: {{ secondary_part.file }} :: {{ secondary_part.object }}
                VERIFY_RTE_MSG( pPrimaryObjectPart->p_{{ secondary_part.file }}_{{ secondary_part.object }}.getObjectInfo().getIndex() == mega::io::ObjectInfo::NO_INDEX,
                    "Object has already been {% if constructor.reconstructor %}reconstructed{% else %}constructed{% endif %}: {{ base.typename }}" );
                pPrimaryObjectPart->p_{{ secondary_part.file }}_{{ secondary_part.object }} =
                    database.m_pFile_{{ secondary_part.file }}->construct< data::{{ secondary_part.file }}::{{ secondary_part.object }} >
                        ({% for arg in secondary_part.args %}{{ arg.expression }}{% if not loop.is_last %}, {% endif %}{% endfor %});

        {% endfor %}{# base.parts #}
    {% endif %}{# base.owns_primary_part  or ( constructor.reconstructor ) #}

    {% if ( not loop.is_first ) %}
            {% if base.is_primary_part_base %}
                pPrimaryObjectPart->p_{{ base.primary_part_base.file }}_{{ base.primary_part_base.object }} = visitorResult;
                pPrimaryObjectPart->set_inheritance_pointer();
            {% endif %} {#constructor.reconstructor#}
    {% endif %}{# not loop.is_first or ( constructor.reconstructor ) #}

    {% if ( not loop.is_last ) or ( constructor.reconstructor ) %}
        {% if base.owns_primary_part or ( constructor.reconstructor ) %}
                        return pPrimaryObjectPart;
                    }
        {% endif %}{# base.owns_primary_part #}
                } visitor( database, pSuper );
        {% if constructor.reconstructor %}
                data::Ptr< data::{{ base.primary_part.file }}::{{ base.primary_part.object }} > pPrimaryObjectPart = visitor( arguments );
        {% endif %} {#constructor.reconstructor#}
    {% endif %} {# ( not loop.is_last ) or ( constructor.reconstructor ) #}
{% endfor %}{# constructor.bases #}
        if( pSuper == nullptr )
            pSuper = findOrConstruct< SuperType, {{ constructor.return_type }} >( pPrimaryObjectPart );
        pSuper->reconstruct( pPrimaryObjectPart );
        return dynamic_cast< {{ constructor.return_type }}* >( pSuper );
        }
        catch( std::exception& ex )
        {
            THROW_RTE( "Error in database constructing: {{ constructor.return_type }}: " << ex.what() );
        }
    }
{% endfor %}{# stage.constructors#}

    InterfaceBaseClass* convert_impl( const mega::io::ObjectInfo& objectInfo ) const
    {
        switch( objectInfo.getType() )
        {
{% for data_to_view in stage.conversions_data_to_view %}
            case {{ data_to_view.index }}: return toView( const_cast< Database::Pimpl&>(*this),
                data::Ptr< data::{{ data_to_view.file }}::{{ data_to_view.object }} >( const_cast< Database::Pimpl&>(*this), objectInfo ) );
{% endfor %}
            default: THROW_RTE( "Unknown object type" );
        }
    }

{% for file in stage.readwrite_files %}
    task::FileHash save_{{ file.name }}_to_temp() const
    {
        return m_pFile_{{ file.name }}->save_temp( m_manifest );
    }
{% endfor %}{# stage.readwrite_files #}

    void to_json( nlohmann::json& data ) const
    {
        for ( mega::io::Manifest::FileMapCst::const_iterator 
                i = m_readonlyFiles.begin(), 
                iEnd = m_readonlyFiles.end();
              i != iEnd; ++i )
        {
            i->second->to_json( m_manifest, data );
        }
        for ( mega::io::Manifest::FileMap::const_iterator 
                i = m_readwriteFiles.begin(), 
                iEnd = m_readwriteFiles.end();
              i != iEnd; ++i )
        {
            i->second->to_json( m_manifest, data );
        }
    }

    virtual mega::io::Object* load( const mega::io::ObjectInfo& objectInfo )
    {
        mega::io::File::PtrCst pFile;
        {
            mega::io::Manifest::FileMap::const_iterator iFind = m_readwriteFiles.find( objectInfo.getFileID() );
            if( iFind != m_readwriteFiles.end() )
            {
                pFile = iFind->second;
            }
            else
            {
                mega::io::Manifest::FileMapCst::const_iterator iFind = m_readonlyFiles.find( objectInfo.getFileID() );
                if( iFind != m_readonlyFiles.end() )
                {
                    pFile = iFind->second;
                }
                else
                {
                    pFile = m_manifest.loadFile( m_environment, const_cast< Database::Pimpl&>(*this), 
                        m_readonlyFiles, mega::io::FileInfo::{{ stage.name }}, objectInfo.getFileID() );
                }
            }
        }
        return pFile->getObject( objectInfo.getIndex() );
    }

    const mega::io::Environment& m_environment;
    mega::io::SourceFilePath m_sourceFile;
    const mega::io::Manifest m_manifest;

    mega::io::Manifest::FileMap m_readwriteFiles;
    mutable mega::io::Manifest::FileMapCst m_readonlyFiles;

{% for file in stage.readwrite_files %}
    std::shared_ptr< mega::io::File > m_pFile_{{ file.name }};
{% endfor %}
};

Database::Database( const mega::io::Environment& environment )
:   m_pimpl( new Pimpl( environment ) )
{
}

Database::Database( const mega::io::Environment& environment, const mega::io::SourceFilePath& sourceFile )
:   m_pimpl( new Pimpl( environment, sourceFile ) )
{
}

{% for file in stage.readwrite_files %}
task::FileHash Database::save_{{ file.name }}_to_temp() const
{
    return m_pimpl->save_{{ file.name }}_to_temp();
}
{% endfor %}{# stage.readwrite_files #}

void Database::to_json( nlohmann::json& data ) const
{
    m_pimpl->to_json( data );
}

{% for many_accessor in stage.many_accessors %}
std::vector< {{ many_accessor.type }}* > Database::many_{{ many_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const
{
    return m_pimpl->many_{{ many_accessor.longname }}( sourceFile );
}
{% endfor %}{# stage.accessors #}
{% for one_accessor in stage.one_accessors %}
{{ one_accessor.type }}* Database::one_{{ one_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const
{
    return m_pimpl->one_{{ one_accessor.longname }}( sourceFile );
}
{% endfor %}{# stage.accessors #}
{% for one_opt_accessor in stage.one_opt_accessors %}
{{ one_opt_accessor.type }}* > Database::oneOpt_{{ one_opt_accessor.longname }}( const mega::io::SourceFilePath& sourceFile ) const
{
    return m_pimpl->oneOpt_{{ one_opt_accessor.longname }}( sourceFile );
}
{% endfor %}{# stage.accessors #}
{% for constructor in stage.constructors %}
{{ constructor.return_type }}* Database::{{ constructor.function_name }}( const {{ constructor.return_type }}::Args& arguments )
{
    return m_pimpl->{{ constructor.function_name }}( arguments );
}
{% endfor %}{# stage.constructors #}
InterfaceBaseClass* Database::convert_impl( const mega::io::ObjectInfo& objectInfo ) const
{
    return m_pimpl->convert_impl( objectInfo );
}
}