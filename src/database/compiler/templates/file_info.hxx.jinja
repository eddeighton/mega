//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.




#ifndef IO_FILEINFO_28_MARCH_2022
#define IO_FILEINFO_28_MARCH_2022

#include "database/common/object_info.hpp"
#include "database/common/object.hpp"
#include "database/common/serialisation.hpp"

#include "database/types/sources.hpp"

#include "boost/filesystem/path.hpp"

#include <ostream>

namespace mega
{
namespace io
{
    class FileInfo
    {
    public:
        enum Stage
        {
{% for stage in stages %}
            {{ stage.name }},
{% endfor %}
            TOTAL_STAGE_TYPES
        };
        
        enum Type
        {
{% for stage in stages %}
{% for file in stage.files %}
            {{ stage.name }}_{{ file.name }},
{% endfor %}
{% endfor %}
            TOTAL_FILE_TYPES
        };

        inline bool operator==( const FileInfo& cmp ) const
        {
            if ( this == &cmp )
                return true;

            // clang-format off
            return  m_fileType                 == cmp.m_fileType && 
                    m_fileID                   == cmp.m_fileID && 
                    m_filePath                 == cmp.m_filePath && 
                    m_objectSourceFilePath     == cmp.m_objectSourceFilePath;
            // clang-format on
        }

    public:
        FileInfo();
        FileInfo( Type                  fileType,
                  ObjectInfo::FileID    fileID,
                  const CompilationFilePath& filePath,
                  const SourceFilePath& objectSourceFilePath );

        Stage getStage() const
        { 
            switch( m_fileType )
            {
{% for stage in stages %}
{% for file in stage.files %}
                case {{ stage.name }}_{{ file.name }}: return {{ stage.name }};
{% endfor %}
{% endfor %}
                case TOTAL_FILE_TYPES:
                default:
                    return TOTAL_STAGE_TYPES;
            }
        }
        Type                            getFileType() const { return m_fileType; }
        ObjectInfo::FileID              getFileID() const { return m_fileID; }
        const CompilationFilePath&      getFilePath() const { return m_filePath; }
        const SourceFilePath&           getObjectSourceFilePath() const { return m_objectSourceFilePath; }

        template < class Archive >
        inline void serialize( Archive& archive, const unsigned int version )
        {
            archive& boost::serialization::make_nvp( "fileType",                m_fileType );
            archive& boost::serialization::make_nvp( "fileID",                  m_fileID );
            archive& boost::serialization::make_nvp( "filePath",                m_filePath );
            archive& boost::serialization::make_nvp( "objectSourceFilePath",    m_objectSourceFilePath );
        }

    private:
        Type                    m_fileType;
        ObjectInfo::FileID      m_fileID;
        CompilationFilePath     m_filePath;
        SourceFilePath          m_objectSourceFilePath;
    };

} // namespace io
} // namespace mega

std::ostream& operator<<( std::ostream& os, mega::io::FileInfo::Stage stage );
std::ostream& operator<<( std::ostream& os, mega::io::FileInfo::Type type );

#endif // IO_FILEINFO_28_MARCH_2022
