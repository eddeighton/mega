//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Invocations
{
    namespace Variables
    {
        object Variable -> OperationsStage::Operations
        {
            opt< ref< Variable > > parent;
        }

        object Stack : Variable -> OperationsStage::Operations
        {
            ref< Concrete::Graph::Vertex > concrete;
        }

        object Reference : Variable -> OperationsStage::Operations
        {
            array< ref< Concrete::Graph::Vertex > > types;
        }

        object Memory : Reference -> OperationsStage::Operations
        {

        }

        object Parameter : Reference -> OperationsStage::Operations
        {

        }
    }

    namespace Instructions
    {
        object Instruction -> OperationsStage::Operations
        {
        }

        object InstructionGroup : Instruction -> OperationsStage::Operations
        {
            array< ref< Instruction > > children;
        }

        object Root : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Parameter > parameter;
        }

        object ParentDerivation : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Variable > from;
            ref< Variables::Stack > to;
        }

        object ChildDerivation : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Variable > from;
            ref< Variables::Stack > to;
        }

        object Dereference : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Variable >          instance;
            ref< Variables::Memory >            read_value;
            ref< Concrete::Dimensions::Link >   link_dimension;
        }

        object PolyBranch : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Variable > from_reference;
        }

        object PolyCase : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Variable >      reference;
            ref< Concrete::Graph::Vertex >  type;
        }
    }

    namespace Operations
    {
        object Operation : Instructions::Instruction -> OperationsStage::Operations
        {
            ref< Variables::Variable >      variable;
            ref< Concrete::Graph::Vertex >  context;
        }
    }

}