//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Invocations
{
    namespace Variables
    {
        object Variable -> OperationsStage::Operations
        {
            opt< ref< Variable > > parent;
        }

        object Instance : Variable -> OperationsStage::Operations
        {
            ref< Concrete::Context > concrete;
        }

        object Reference : Variable -> OperationsStage::Operations
        {
            array< ref< Concrete::Context > > types;
        }

        object Dimension : Reference -> OperationsStage::Operations
        {

        }

        object Context : Reference -> OperationsStage::Operations
        {

        }
    }

    namespace Instructions
    {
        object Instruction -> OperationsStage::Operations
        {
        }

        object InstructionGroup : Instruction -> OperationsStage::Operations
        {
            array< ref< Instruction > > children;
        }

        object Root : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Context > context;
        }

        object ParentDerivation : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Instance > from;
            ref< Variables::Instance > to;
        }

        object ChildDerivation : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Instance > from;
            ref< Variables::Instance > to;
        }

        object EnumDerivation : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Instance > from;
            ref< Variables::Instance > to;
        }

        object Enumeration : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Instance > instance;
        }

        object DimensionReferenceRead : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Instance > instance;
            ref< Variables::Dimension > dimension_reference;
            ref< Concrete::Dimensions::User > concrete;
        }

        object MonoReference : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Reference > reference;
            ref< Variables::Instance > instance;
        }

        object PolyReference : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Reference > from_reference;
        }

        object PolyCase : InstructionGroup -> OperationsStage::Operations
        {
            ref< Variables::Reference > reference;
            ref< Variables::Instance > to;
        }

        object Failure : InstructionGroup -> OperationsStage::Operations
        {
        }

        object Elimination : InstructionGroup -> OperationsStage::Operations
        {
        }

        object Prune : InstructionGroup -> OperationsStage::Operations
        {
        }

    }

    namespace Operations
    {
        object Operation : Instructions::Instruction -> OperationsStage::Operations
        {
            ref< Variables::Instance >                   instance;
            // array< ref< Operations::InterfaceVariant > > derived_contexts;
            // array< ref< Operations::InterfaceVariant > > parameter_types;
        }

        object BasicOperation : Operation -> OperationsStage::Operations
        {
            ref< Interface::IContext > interface;
            ref< Concrete::Context > concrete_target;
        }
        object DimensionOperation : Operation -> OperationsStage::Operations
        {
            ref< Interface::DimensionTrait > interface_dimension;
            ref< Concrete::Dimensions::User > concrete_dimension;
        }
        object LinkOperation : Operation -> OperationsStage::Operations
        {
            ref< Interface::LinkTrait > interface_link;
            ref< Concrete::Dimensions::Link > concrete_link;
        }

        object Allocate : BasicOperation -> OperationsStage::Operations
        {
        }

        object Call : BasicOperation -> OperationsStage::Operations
        {
        }

        object Start : BasicOperation -> OperationsStage::Operations
        {
        }

        object Stop : BasicOperation -> OperationsStage::Operations
        {
        }

        object Move : BasicOperation -> OperationsStage::Operations
        {
        }

        object GetAction : BasicOperation -> OperationsStage::Operations
        {
        }

        object GetDimension : DimensionOperation -> OperationsStage::Operations
        {
        }

        object Read : DimensionOperation -> OperationsStage::Operations
        {
        }

        object Write : DimensionOperation -> OperationsStage::Operations
        {
        }

        object ReadLink : LinkOperation -> OperationsStage::Operations
        {
        }

        object WriteLink : LinkOperation -> OperationsStage::Operations
        {
        }

        object Range : BasicOperation -> OperationsStage::Operations
        {
            // RangeType
        }

    }

}