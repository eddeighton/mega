//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Concrete
{
    namespace Dimensions
    {
        object User -> ConcreteStage::Concrete
        {
            ref< Concrete::Context > parent;
            ref< Interface::DimensionTrait > interface_dimension;

            value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;

            value< mega::U64 > offset -> MemoryStage::MemoryLayout;
            ref< MemoryLayout::Part > part -> MemoryStage::MemoryLayout;
        }

        // HyperGraphAnalysis
        object LinkReference -> MemoryStage::MemoryLayout
        {
            ref< Concrete::Context > parent;
            ref< Link > link;
            late< ref< MemoryLayout::Part > > part;
            late< value< mega::U64 > > offset;

            value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;
        }
        object LinkSingle : LinkReference -> MemoryStage::MemoryLayout
        {
        }
        object LinkMany : LinkReference -> MemoryStage::MemoryLayout
        {
        }

        // MemoryStage
        object Allocation -> MemoryStage::MemoryLayout
        {
            ref< Concrete::Context > parent;
            late< ref< MemoryLayout::Part > > part;
            late< value< mega::U64 > > offset;

            value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;
        }

        object Allocator : Allocation -> MemoryStage::MemoryLayout
        {
            ref< Allocators::Allocator > allocator;
        }

        // variant< User, LinkReference, Allocation > Dimension -> MemoryStage::MemoryLayout;
    }

    object ContextGroup -> ConcreteStage::Concrete
    {
        array< ref< Context > > children;
    }

    object Context : ContextGroup -> ConcreteStage::Concrete
    {
        ref< Components::Component > component;
        ref< ContextGroup > parent;
        ref< Interface::IContext > interface;
        array< ref< Interface::IContext > > inheritance;
        
        value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;

        // MemoryStage::MemoryLayout
        ref< Allocators::Allocator > allocator -> MemoryStage::MemoryLayout;
        array< ref< Dimensions::Allocator > > allocation_dimensions -> MemoryStage::MemoryLayout;
    }

    object Namespace : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Namespace > interface_namespace;
        array< ref< Dimensions::User > > dimensions;
    }

    object Action : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Action > interface_action;
        array< ref< Dimensions::User > > dimensions;

        value< mega::U64 > local_size -> MemoryStage::MemoryLayout;
        value< mega::U64 > total_size -> MemoryStage::MemoryLayout;
    }

    object Event : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Event > interface_event;
        array< ref< Dimensions::User > > dimensions;

        value< mega::U64 > local_size -> MemoryStage::MemoryLayout;
        value< mega::U64 > total_size -> MemoryStage::MemoryLayout;
    }

    object Function : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Function > interface_function;
    }

    object Object : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Object > interface_object;
        array< ref< Dimensions::User > > dimensions;
        array< ref< MemoryLayout::Buffer > > buffers -> MemoryStage::MemoryLayout;
    }

    object Link : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Link > link;
        ref< Interface::LinkInterface > link_interface;

        value< mega::U64 > total_size -> MemoryStage::MemoryLayout;
        ref< Dimensions::LinkReference > link_reference -> MemoryStage::MemoryLayout;
    }

    object Buffer : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Buffer > interface_buffer;
        array< ref< Dimensions::User > > dimensions;

        value< mega::U64 > total_size -> MemoryStage::MemoryLayout;
    }

    object Root : ContextGroup -> ConcreteStage::Concrete
    {
        ref< Interface::Root > interface_root;
    }
}