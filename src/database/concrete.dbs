//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Concrete
{
    namespace Graph
    {
        object Vertex -> ConcreteStage::Concrete
        {
            array< ref< Edge > >        out_edges                   -> HyperGraphAnalysisRollout::PerSourceModel;
            array< ref< Edge > >        in_edges                    -> HyperGraphAnalysisRollout::PerSourceModel;
        }

        object Edge -> HyperGraphAnalysis::Model
        {
            value< mega::EdgeType > type;
            ref< Vertex >           source;
            ref< Vertex >           target;
        }
    }

    namespace Dimensions
    {
        object User : Graph::Vertex -> ConcreteStage::Concrete
        {
            ref< Concrete::Context > parent_context;
            ref< Interface::DimensionTrait > interface_dimension;

            value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;

            value< mega::U64 > offset -> MemoryStage::MemoryLayout;
            ref< MemoryLayout::Part > part -> MemoryStage::MemoryLayout;
        }

        // HyperGraph
        object Link : Graph::Vertex -> ConcreteStage::Concrete
        {
            ref< Concrete::Context > parent_context;

            value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;

            ref< HyperGraph::Relation > relation    -> HyperGraphAnalysisRollout::PerSourceModel;
            value< bool >               owning      -> HyperGraphAnalysisRollout::PerSourceModel;
            value< bool >               owned       -> HyperGraphAnalysisRollout::PerSourceModel;
            value< bool >               source      -> HyperGraphAnalysisRollout::PerSourceModel;

            value< mega::U64 >          offset      -> MemoryStage::MemoryLayout;
            ref< MemoryLayout::Part >   part        -> MemoryStage::MemoryLayout;
            value< bool >               singular    -> MemoryStage::MemoryLayout;
        }

        object UserLink : Link -> ConcreteStage::Concrete
        {
            ref< Interface::LinkTrait > interface_link;
        }

        object OwnershipLink : Link -> ConcreteStage::Concrete
        {
        }

        // MemoryStage
        object Allocation -> MemoryStage::MemoryLayout
        {
            ref< Concrete::Context > parent_context;
            late< ref< MemoryLayout::Part > > part;
            late< value< mega::U64 > > offset;

            value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;
        }

        object Allocator : Allocation -> MemoryStage::MemoryLayout
        {
            ref< Allocators::Allocator > allocator;
        }
    }

    object ContextGroup : Graph::Vertex -> ConcreteStage::Concrete
    {
        array< ref< Context > > children;
    }

    object Context : ContextGroup -> ConcreteStage::Concrete
    {
        ref< Components::Component > component;
        late< opt< ref< Object > > > concrete_object;
        ref< ContextGroup > parent;
        ref< Interface::IContext > interface;
        array< ref< Interface::IContext > > inheritance;
        
        value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;

        // MemoryStage::MemoryLayout
        ref< Allocators::Allocator > allocator -> MemoryStage::MemoryLayout;
        array< ref< Dimensions::Allocator > > allocation_dimensions -> MemoryStage::MemoryLayout;
    }

    object Interupt : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Interupt > interface_interupt;
    }

    object Requirement : Interupt -> ConcreteStage::Concrete
    {
    }

    object Function : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Function > interface_function;
    }

    object UserDimensionContext : Context  -> ConcreteStage::Concrete
    {
        array< ref< Dimensions::User > > dimensions;
        array< ref< Dimensions::Link > > links;
    }

    object Namespace : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::Namespace > interface_namespace;
    }

    object State : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::State > interface_state;

        value< mega::U64 > local_size -> MemoryStage::MemoryLayout;
        value< mega::U64 > total_size -> MemoryStage::MemoryLayout;
    }

    object Action : State -> ConcreteStage::Concrete
    {
        ref< Interface::Action > interface_action;
    }

    object Component : State -> ConcreteStage::Concrete
    {
        ref< Interface::Component > interface_component;
    }

    object Event : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::Event > interface_event;

        value< mega::U64 > local_size -> MemoryStage::MemoryLayout;
        value< mega::U64 > total_size -> MemoryStage::MemoryLayout;
    }

    object Object : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::Object >                    interface_object;
        late< ref< Dimensions::OwnershipLink > >    ownership_link;

        array< ref< MemoryLayout::Buffer > > buffers -> MemoryStage::MemoryLayout;

        array< ref< UserDimensionContext > > link_contexts -> HyperGraphAnalysisRollout::PerSourceModel;
    }

    object MemoryMappedObject : Object -> GlobalMemoryStageRollout::GlobalMemoryRollout
    {
        ref< MemoryLayout::MemoryMap > memory_map;
    }

    object Root : ContextGroup -> ConcreteStage::Concrete
    {
        ref< Interface::Root > interface_root;
    }
}