
///////////////////////////////////////////
///////////////////////////////////////////
// Objects
namespace Components
{
    object Component -> ComponentListing::Components
    {
        value< mega::ComponentType > type;
        value< std::string > name;
        value< boost::filesystem::path > src_dir;
        value< boost::filesystem::path > build_dir;
        array< value< std::string > > cpp_flags;
        array< value< std::string > > cpp_defines;
        array< value< boost::filesystem::path > > include_directories;
        array< value< mega::io::megaFilePath > > mega_source_files;
        array< value< mega::io::cppFilePath > > cpp_source_files;
    }
}

namespace Parser
{
    object Identifier -> ParserStage::AST
    {
        value< std::string > str;
    }

    object ScopedIdentifier -> ParserStage::AST
    {
        array< ref< Identifier > > ids;
        value< std::string > source_file;
        value< std::size_t > line_number;
    }

    object ArgumentList -> ParserStage::AST
    {
        value< std::string > str;
    }

    object ReturnType -> ParserStage::AST
    {
        value< std::string > str;
    }

    object Inheritance -> ParserStage::AST
    {
        array< value< std::string > > strings;
    }

    object Size -> ParserStage::AST
    {
        value< std::string > str;
    }

    object Link -> ParserStage::AST
    {
        value< mega::CardinalityRange > linker;
        value< mega::CardinalityRange > linkee;
        value< bool > derive_from; // linker <-  linkee
        value< bool > derive_to;   // linker  -> linkee
        value< mega::Ownership > ownership;
    }

    object Dimension -> ParserStage::AST
    {
        value< bool > isConst;
        ref< Identifier > id;
        value< std::string > type;
    }

    object Include -> ParserStage::AST
    {
    }

    object SystemInclude : Include -> ParserStage::AST
    {
        value< std::string > str;
    }
    object MegaInclude : Include -> ParserStage::AST
    {
        value< boost::filesystem::path > megaSourceFilePath;
        late< ref< IncludeRoot > > root;
    }

    object MegaIncludeInline : MegaInclude -> ParserStage::AST
    {
    }

    object MegaIncludeNested : MegaInclude -> ParserStage::AST
    {
        ref< ScopedIdentifier > id;
    }

    object CPPInclude : Include -> ParserStage::AST
    {
        value< boost::filesystem::path > cppSourceFilePath;
    }

    object Dependency -> ParserStage::AST
    {
        value< std::string > str;
    }

    object ContextDef -> ParserStage::AST
    {
        ref< ScopedIdentifier > id;
        array< ref< ContextDef > > children;
        array< ref< Dimension > > dimensions;
        array< ref< Include > > includes;
        array< ref< Dependency > > dependencies;
        value< std::string > body -> ParserStage::Body;
    }

    object NamespaceDef : ContextDef -> ParserStage::AST
    {
    }

    object AbstractDef : ContextDef -> ParserStage::AST
    {
        ref< Inheritance > inheritance;
    }

    object ActionDef : ContextDef -> ParserStage::AST
    {
        ref< Size > size;
        ref< Inheritance > inheritance;
    }

    object EventDef : ContextDef -> ParserStage::AST
    {
        ref< Size > size;
        ref< Inheritance > inheritance;
    }

    object FunctionDef : ContextDef -> ParserStage::AST
    {
        ref< ArgumentList > argumentList;
        ref< ReturnType > returnType;
    }

    object ObjectDef : ContextDef -> ParserStage::AST
    {
        ref< Inheritance > inheritance;
    }

    object LinkDef : ContextDef -> ParserStage::AST
    {
        ref< Link > link;
        ref< Inheritance > target;
    }

    object TableDef : ContextDef -> ParserStage::AST
    {
        ref< Inheritance > inheritance;
    }

    object SourceRoot  -> ParserStage::AST
    {
        value< boost::filesystem::path > sourceFile;
        ref< Components::Component > component;
        ref< ContextDef > ast;
    }

    object IncludeRoot : SourceRoot -> ParserStage::AST
    {
    }

    object ObjectSourceRoot : SourceRoot -> ParserStage::AST
    {
    }

}
