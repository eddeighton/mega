

namespace Dependencies
{
    object Glob -> DependencyAnalysis::DPGraph
    {
        value< boost::filesystem::path > location;
        value< std::string > glob;
    }

    object SourceFileDependencies -> DependencyAnalysis::DPGraph
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;
        array< ref< Glob > > globs;
        array< value< boost::filesystem::path > > resolution;
    }

    object TransitiveDependencies -> DependencyAnalysis::DPGraph
    {
        array< value< mega::io::megaFilePath > > mega_source_files;
    }

    object Analysis -> DependencyAnalysis::DPGraph
    {
        array< ref< SourceFileDependencies > > objects;

        map< value< mega::io::megaFilePath >, ref< TransitiveDependencies > > mega_dependencies;
        map< value< mega::io::cppFilePath >, ref< TransitiveDependencies > > cpp_dependencies;
    }
}

namespace Symbols
{
    // symbol id are negative
    // type id are positive

    object Symbol -> SymbolAnalysis::SymbolTable
    {
        // each symbol represents a unique string 
        // and MUST have a unique id
        value< std::string > symbol;
        value< std::int32_t > id;
        array< ref< Interface::IContext > > contexts;
        array< ref< Interface::DimensionTrait > > dimensions;
    }

    object SymbolSet -> SymbolAnalysis::SymbolTable
    {
        map< value< std::string >, ref< Symbol > > symbols;
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;

        map< ref< Interface::IContext >        , ref< Symbol > > context_symbols;
        map< ref< Interface::DimensionTrait > , ref< Symbol > > dimension_symbols;

        map< ref< Interface::IContext >        , value< int32_t > > context_type_ids;
        map< ref< Interface::DimensionTrait > , value< int32_t > > dimension_type_ids;
    }

    object SymbolTable -> SymbolAnalysis::SymbolTable
    {
        map< value< mega::io::megaFilePath >, ref< SymbolSet > >    symbol_sets;
        map< value< std::string >, ref< Symbol > >                  symbols;
        map< value< int32_t >, ref< Interface::IContext > >         context_type_ids;
        map< value< int32_t >, ref< Interface::DimensionTrait > >   dimension_type_ids;
        map< value< int32_t >, ref< Symbol > >                      symbol_id_map;
    }
}

namespace HyperGraph
{
    object ObjectGraph -> HyperGraphAnalysis::Model
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;

    }

    object Graph -> HyperGraphAnalysis::Model
    {
        array< ref< ObjectGraph > > objects;
    }
}

namespace Derivation
{
    object ObjectMapping -> DerivationAnalysis::Derivations
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;

        multimap< ref< Interface::IContext >, ref< Interface::IContext > > inheritance;
    }

    object Mapping -> DerivationAnalysis::Derivations
    {
        array< ref< ObjectMapping > > mappings;
        late< multimap< ref< Interface::IContext >, ref< Interface::IContext > > > inheritance;
    }
}