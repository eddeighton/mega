

namespace Dependencies
{
    object Glob -> DependencyAnalysis::DPGraph
    {
        value< boost::filesystem::path > location;
        value< std::string > glob;
    }

    object ObjectDependencies -> DependencyAnalysis::DPGraph
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;
        array< ref< Glob > > globs;
        array< value< boost::filesystem::path > > resolution;
    }

    object Analysis -> DependencyAnalysis::DPGraph
    {
        array< ref< ObjectDependencies > > objects;
    }
}

namespace Symbols
{
    object Symbol -> SymbolAnalysis::SymbolTable
    {
        // each symbol represents a unique string 
        // and MUST have a unique id
        value< std::string > symbol;
        value< std::size_t > id;
        array< ref< Interface::Context > > contexts;
        array< ref< Interface::DimensionTrait > > dimensions;
    }

    object SymbolSet -> SymbolAnalysis::SymbolTable
    {
        map< value< std::string >, ref< Symbol > > symbols;
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;

        map< ref< Interface::Context >        , ref< Symbol > > contexts;
        map< ref< Interface::DimensionTrait > , ref< Symbol > > dimensions;
    }

    object SymbolTable -> SymbolAnalysis::SymbolTable
    {
        map< value< mega::io::megaFilePath >, ref< SymbolSet > > symbol_sets;
        map< value< std::string >, ref< Symbol > > symbols;
        //map< value< std::size_t >, ref< Interface::Context > > contexts;
        //map< value< std::size_t >, ref< Interface::DimensionTrait > > dimensions;
    }
}
