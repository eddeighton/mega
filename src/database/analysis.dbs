

namespace Dependencies
{
    object Glob -> DependencyAnalysis::DPGraph
    {
        value< boost::filesystem::path > location;
        value< std::string > glob;
    }

    object SourceFileDependencies -> DependencyAnalysis::DPGraph
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;
        array< ref< Glob > > globs;
        array< value< boost::filesystem::path > > resolution;
    }

    object TransitiveDependencies -> DependencyAnalysis::DPGraph
    {
        array< value< mega::io::megaFilePath > > mega_source_files;
    }

    object Analysis -> DependencyAnalysis::DPGraph
    {
        array< ref< SourceFileDependencies > > objects;

        map< value< mega::io::megaFilePath >, ref< TransitiveDependencies > > mega_dependencies;
        map< value< mega::io::cppFilePath >, ref< TransitiveDependencies > > cpp_dependencies;
    }
}

namespace Symbols
{
    // symbol id are negative
    // type id are positive

    object Symbol -> SymbolAnalysis::SymbolTable
    {
        // each symbol represents a unique string 
        // and MUST have a unique id
        value< std::string >                      symbol;
        value< std::int32_t >                     id;
        array< ref< Interface::IContext > >       contexts;
        array< ref< Interface::DimensionTrait > > dimensions;
    }

    object ConcreteSymbol -> ConcreteTypeAnalysis::ConcreteTable
    {
        //array< ref< Symbol > >      symbol_sequence;
        value< std::vector< std::int32_t > > id_sequence;
        value< std::int32_t >                id;
        ref< Concrete::Context >             context;
    }

    object SymbolSet -> SymbolAnalysis::SymbolTable
    {
        map< value< std::string >, ref< Symbol > >                symbols;
        value< mega::io::megaFilePath >                           source_file;
        value< std::size_t >                                      hash_code;
        map< ref< Interface::IContext >, ref< Symbol > >          context_symbols;
        map< ref< Interface::DimensionTrait >, ref< Symbol > >    dimension_symbols;
        map< ref< Interface::IContext >, value< int32_t > >       context_type_ids;
        map< ref< Interface::DimensionTrait >, value< int32_t > > dimension_type_ids;

        // ConcreteTypeAnalysis::ConcreteTable
        value< std::size_t >                                                concrete_hash_code -> ConcreteTypeAnalysis::ConcreteTable;
        map< value< std::vector< std::int32_t > >, ref< ConcreteSymbol > >  concrete_symbols -> ConcreteTypeAnalysis::ConcreteTable;
        map< ref< Concrete::Context >, value< int32_t > >                   context_concrete_ids -> ConcreteTypeAnalysis::ConcreteTable;
    }

    object SymbolTable -> SymbolAnalysis::SymbolTable
    {
        map< value< mega::io::megaFilePath >, ref< SymbolSet > >        symbol_sets;
        map< value< std::string >, ref< Symbol > >                      symbols;
        
        map< value< std::int32_t >, ref< Interface::IContext > >        context_type_ids;
        map< value< std::int32_t >, ref< Interface::DimensionTrait > >  dimension_type_ids;
        map< value< std::int32_t >, ref< Symbol > >                     symbol_id_map;

        // ConcreteTypeAnalysis::ConcreteTable
        map< value< std::vector< std::int32_t > >, ref< ConcreteSymbol > >  concrete_symbol_ids -> ConcreteTypeAnalysis::ConcreteTable;
        map< value< std::int32_t >, ref< ConcreteSymbol > >                 concrete_symbols -> ConcreteTypeAnalysis::ConcreteTable;
        map< value< std::int32_t >, ref< Concrete::Context > >              concrete_context_map -> ConcreteTypeAnalysis::ConcreteTable;
    }
}

namespace Derivation
{
    object ObjectMapping -> DerivationAnalysis::Derivations
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;
        multimap< ref< Interface::IContext >, ref< Interface::IContext > > inheritance;
    }

    object Mapping -> DerivationAnalysis::Derivations
    {
        array< ref< ObjectMapping > > mappings;
        late< multimap< ref< Interface::IContext >, ref< Interface::IContext > > > inheritance;
    }
}

namespace HyperGraph
{
    object Relation -> HyperGraphAnalysis::Model
    {
        ref< Interface::LinkInterface > first;
        ref< Interface::LinkInterface > second;
    }
    object SingularRelation : Relation -> HyperGraphAnalysis::Model
    {
    }
    object NonSingularRelation : Relation -> HyperGraphAnalysis::Model
    {
    }

    object Relations -> HyperGraphAnalysis::Model
    {
        value< mega::io::megaFilePath > source_file;
        value< std::size_t > hash_code;

        multimap< ref< Interface::IContext >, ref< Relation > > relations;
    }

    object Graph -> HyperGraphAnalysis::Model
    {
        array< ref< Relations > > relations;
    }
}

namespace Allocators
{
    object Allocator -> MemoryStage::MemoryLayout
    {
        opt< ref< Concrete::Context > > parent_context;
        ref< Concrete::Context > allocated_context;
    }

    object Nothing : Allocator -> MemoryStage::MemoryLayout
    {
    }

    object Singleton : Allocator -> MemoryStage::MemoryLayout
    {
    }

    object Range : Allocator -> MemoryStage::MemoryLayout
    {
    }

    object Range32 : Range -> MemoryStage::MemoryLayout
    {
    }

    object Range64 : Range -> MemoryStage::MemoryLayout
    {
    }

    object RangeAny : Range -> MemoryStage::MemoryLayout
    {
    }
}

namespace MemoryLayout
{
    object Part  -> MemoryStage::MemoryLayout
    {
        ref< Concrete::Context > context;
        value< std::size_t > size;
        array< ref< Concrete::Dimensions::User > > user_dimensions;
        //array< ref< Concrete::Dimensions::LinkReference > > link_dimensions;
        array< ref< Concrete::Dimensions::Allocation > > allocation_dimensions;
    }

    object Buffer -> MemoryStage::MemoryLayout
    {
        value< std::size_t > stride;
        array< ref< Part > > parts;
    }

    object GPUBuffer : Buffer -> MemoryStage::MemoryLayout
    {
        
    }

    object SharedBuffer : Buffer -> MemoryStage::MemoryLayout
    {

    }

    object SimpleBuffer : Buffer -> MemoryStage::MemoryLayout
    {

    }
}