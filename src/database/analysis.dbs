//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.



namespace Dependencies
{
    object Glob -> DependencyAnalysis::DPGraph
    {
        value< boost::filesystem::path > location;
        value< std::string > glob;
    }

    object SourceFileDependencies -> DependencyAnalysis::DPGraph
    {
        value< mega::io::megaFilePath > source_file;
        value< mega::U64 > hash_code;
        array< ref< Glob > > globs;
        array< value< boost::filesystem::path > > resolution;
    }

    object TransitiveDependencies -> DependencyAnalysis::DPGraph
    {
        array< value< mega::io::megaFilePath > > mega_source_files;
    }

    object Analysis -> DependencyAnalysis::DPGraph
    {
        array< ref< SourceFileDependencies > > objects;

        map< value< mega::io::megaFilePath >, ref< TransitiveDependencies > > mega_dependencies;
        map< value< mega::io::cppFilePath >, ref< TransitiveDependencies > > cpp_dependencies;
    }
}

namespace Symbols
{
    // SymbolTypeID are negative
    // InterfaceTypeID and ConcreteTypeID are positive

    object SymbolTypeID -> SymbolAnalysis::SymbolTable
    {
        value< std::string >                      symbol;
        value< mega::TypeID >                     id;
        array< ref< Interface::IContext > >       contexts;
        array< ref< Interface::DimensionTrait > > dimensions;
    }

    object InterfaceTypeID -> SymbolAnalysis::SymbolTable
    {
        value< mega::TypeIDSequence >   symbol_ids;
        value< mega::TypeID >           id;

        opt< ref< Interface::IContext > >       context;
        opt< ref< Interface::DimensionTrait > > dimension;
    }

    object ConcreteTypeID -> ConcreteTypeAnalysis::ConcreteTable
    {
        value< mega::TypeID >           id;

        opt< ref< Concrete::Context >                    > context;
        opt< ref< Concrete::Dimensions::User >           > dim_user;
        opt< ref< Concrete::Dimensions::LinkReference >  > dim_link;
        opt< ref< Concrete::Dimensions::Allocation >     > dim_allocation;
    }
    
    object SymbolTable -> SymbolAnalysis::SymbolTable
    {
        map< value< std::string >,  ref< SymbolTypeID > > symbol_names;
        map< value< mega::TypeID >, ref< SymbolTypeID > > symbol_type_ids;

        map< value< mega::TypeIDSequence >, ref< InterfaceTypeID > >  interface_type_id_sequences;
        map< value< mega::TypeID >,         ref< InterfaceTypeID > >  interface_type_ids;

        map< value< mega::TypeIDSequence >,     ref< ConcreteTypeID > > concrete_type_id_sequences -> ConcreteTypeAnalysis::ConcreteTable;
        map< value< mega::TypeIDSequence >,     ref< ConcreteTypeID > > concrete_type_id_seq_alloc -> ConcreteTypeAnalysis::ConcreteTable;
        map< value< mega::TypeIDSequencePair >, ref< ConcreteTypeID > > concrete_type_id_set_link  -> ConcreteTypeAnalysis::ConcreteTable;

        map< value< mega::TypeID >,         ref< ConcreteTypeID > >   concrete_type_ids -> ConcreteTypeAnalysis::ConcreteTable;
    }
}

namespace Derivation
{
    object ObjectMapping -> DerivationAnalysis::Derivations
    {
        value< mega::io::megaFilePath > source_file;
        value< mega::U64 > hash_code;
        multimap< ref< Interface::IContext >, ref< Concrete::Context > > inheritance_contexts;
        multimap< ref< Interface::DimensionTrait >, ref< Concrete::Dimensions::User > > inheritance_dimensions;
    }

    object Mapping -> DerivationAnalysis::Derivations
    {
        array< ref< ObjectMapping > > mappings;
        multimap< ref< Interface::IContext >, ref< Concrete::Context > > inheritance_contexts;
        multimap< ref< Interface::DimensionTrait >, ref< Concrete::Dimensions::User > > inheritance_dimensions;
    }
}

namespace HyperGraph
{
    object Relation -> HyperGraphAnalysis::Model
    {
        ref< Interface::Link >          source;
        ref< Interface::Link >          target;
        ref< Interface::LinkInterface > source_interface;
        ref< Interface::LinkInterface > target_interface;
    }

    object Relations -> HyperGraphAnalysis::Model
    {
        value< mega::io::megaFilePath > source_file;
        value< mega::U64 > hash_code;
        map< ref< Interface::Link >, ref< Relation > > relations;
    }

    object Graph -> HyperGraphAnalysis::Model
    {
        array< ref< Relations > > relations;
    }
}

namespace Allocators
{
    object Allocator -> MemoryStage::MemoryLayout
    {
        opt< ref< Concrete::Context > > parent_context;
        ref< Concrete::Context > allocated_context;
        late< opt< ref< Concrete::Dimensions::Allocator > > > dimension;
    }

    object Nothing : Allocator -> MemoryStage::MemoryLayout
    {
    }

    object Singleton : Allocator -> MemoryStage::MemoryLayout
    {
    }

    object Range : Allocator -> MemoryStage::MemoryLayout
    {
    }

    object Range32 : Range -> MemoryStage::MemoryLayout
    {
    }

    object Range64 : Range -> MemoryStage::MemoryLayout
    {
    }

    object RangeAny : Range -> MemoryStage::MemoryLayout
    {
    }
}

namespace MemoryLayout
{
    object Part  -> MemoryStage::MemoryLayout
    {
        value< mega::U64 >                                  total_domain_size;
        ref< Concrete::Context >                            context;
        array< ref< Concrete::Dimensions::User > >          user_dimensions;
        array< ref< Concrete::Dimensions::LinkReference > > link_dimensions;
        array< ref< Concrete::Dimensions::Allocation > >    allocation_dimensions;

        late< value< mega::U64 > >                        size;
        late< value< mega::U64 > >                        alignment;
        late< value< mega::U64 > >                        offset;
    }

    object Buffer -> MemoryStage::MemoryLayout
    {
        array< ref< Part > > parts;
        value< mega::U64 > size;
        value< mega::U64 > alignment;
    }

    object NonSimpleBuffer : Buffer -> MemoryStage::MemoryLayout
    {

    }

    object SimpleBuffer : Buffer -> MemoryStage::MemoryLayout
    {

    }

    object GPUBuffer : Buffer -> MemoryStage::MemoryLayout
    {
        
    }
}