//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

namespace Automata
{
    object Vertex -> AutomataStage::AutomataAnalysis
    {
        value< bool >                   is_conditional;
        value< mega::U32 >              relative_domain;
        ref< Concrete::Context >        context;
        late< opt< ref< Vertex > > >    test_ancestor;
        array< ref< Vertex > >          children;
    }

    object And : Vertex  -> AutomataStage::AutomataAnalysis
    {

    }

    object Or : Vertex  -> AutomataStage::AutomataAnalysis
    {

    }

    object Enum  -> AutomataStage::AutomataAnalysis
    {
        ref< Vertex >                   vertex;
        value< mega::U32 >              switch_index;
        value< mega::U32 >              next_switch_index;
        array< value< mega::U32 > >     child_switch_indices;
        value< bool >                   is_or;
        opt< ref< Concrete::Action > >  action;
        value< mega::SubTypeInstance >  sub_type_instance;
        array< ref< Enum > >            children;
    }

    object Test : Enum -> AutomataStage::AutomataAnalysis
    {
        value< mega::U32 >          bitset_index;
        late< value< mega::U32 > >  failure_switch_index;
    }

}

namespace Decision
{
    object DeciderSequence -> ValueSpaceStage::ValueSpace
    {
        ref< Concrete::State >              state;
        array< ref< Concrete::Decider > >   deciders;
    }

    object BDDVertex -> ValueSpaceStage::ValueSpace
    {
        ref< Automata::Vertex > test;
        opt< ref< BDDVertex > > true_vertex;
        opt< ref< BDDVertex > > false_vertex;
    }

    object Eliminated : BDDVertex -> ValueSpaceStage::ValueSpace
    {
    }

    object True : BDDVertex -> ValueSpaceStage::ValueSpace
    {
    }

    object False : BDDVertex -> ValueSpaceStage::ValueSpace
    {
    }

    object Decideable : BDDVertex -> ValueSpaceStage::ValueSpace
    {
    }

    object DecisionProcedure -> ValueSpaceStage::ValueSpace
    {
        array< ref< Automata::Vertex > >    test_sequence;
        ref< BDDVertex >                    root;
    }
}