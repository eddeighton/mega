//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

namespace Automata
{
    object Vertex -> AutomataStage::AutomataAnalysis
    {
        value< bool >                   is_first;
        value< bool >                   is_conditional;
        value< bool >                   is_historical;
        value< bool >                   has_requirement;
        value< mega::U32 >              relative_domain;
        ref< Concrete::Context >        context;
        opt< value< mega::U32 > >       bitset_range_start;
        value< mega::U32 >              bitset_range_size;

        late< opt< ref< Vertex > > >    test_ancestor;

        array< ref< Vertex > >          siblings;
        array< ref< Vertex > >          children;
    }

    object And : Vertex  -> AutomataStage::AutomataAnalysis
    {

    }

    object Or : Vertex  -> AutomataStage::AutomataAnalysis
    {

    }

    object Enum  -> AutomataStage::AutomataAnalysis
    {
        ref< Vertex >                   vertex;
        value< mega::U32 >              switch_index;
        value< mega::U32 >              next_switch_index;
        array< value< mega::U32 > >     child_switch_indices;
        value< bool >                   is_or;
        opt< ref< Concrete::Action > >  action;
        value< mega::SubTypeInstance >  sub_type_instance;
        array< ref< Enum > >            children;
    }

    object Test : Enum -> AutomataStage::AutomataAnalysis
    {
        value< bool >               start_state;
        late< value< mega::U32 > >  failure_switch_index;
        late< value< mega::U32 > >  bitset_index;
    }

    object TruthAssignment -> OperationsStage::Operations
    {
        array< ref< Vertex > > true_vertices;
    }
}

namespace Decision
{
    object Step -> OperationsStage::Operations
    {
        opt< ref< Concrete::Decider > >             decider;
        array< ref< Automata::Vertex > >            assignment;
        array< ref< Automata::Vertex > >            vars_true;
        array< ref< Automata::Vertex > >            vars_false;
        array< ref< Step > >                        children;
    }

    object Assignment -> OperationsStage::Operations
    {
        value< bool >           is_true;
        ref< Automata::Vertex > vertex;
        value< mega::Instance > instance_multiplier;
    }

    object Assignments : Step -> OperationsStage::Operations
    {
        array< ref< Assignment > > assignments;
    }

    object Boolean : Step -> OperationsStage::Operations
    {
        ref< Automata::Vertex > variable;
    }

    object Selection : Step -> OperationsStage::Operations
    {
        array< ref< Automata::Vertex > >    variable_alternatives;
        array< value< mega::U32 > >         variable_ordering;
    }

    object DecisionProcedure -> OperationsStage::Operations
    {
        ref< Concrete::State >  common_ancestor;
        value< mega::Instance > instance_divider;
        ref< Step >             root;
    }
}