//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Concrete
{
    object Edge -> HyperGraphAnalysis::Model
    {
        value< mega::EdgeType > type;
        ref< Node >             source;
        ref< Node >             target;
    }

    object InterObjectEdge : Edge -> HyperGraphAnalysis::Model
    {
        ref< Data::Link >               counterpart;
        value< mega::CardinalityRange > cardinality;
        value< bool >                   polymorphic;
    }
    
    object NodeGroup -> ConcreteStage::Concrete
    {
        array< ref< Node > > children;
    }

    object Root : NodeGroup -> ConcreteStage::Concrete
    {
    }

    object Node : NodeGroup -> ConcreteStage::Concrete
    {
        ref< NodeGroup >                parent;
        opt< ref< Interface::Node > >   node_opt;
        value< bool >                   is_direct_realiser;
        late< ref< Object > >           parent_object;

        ref< Symbols::ConcreteID > concrete_id -> ConcreteTypeAnalysis::ConcreteTable;

        array< ref< Edge > > out_edges -> HyperGraphAnalysis::Model;
        array< ref< Edge > > in_edges  -> HyperGraphAnalysis::Model;
    }

    namespace Data
    {
        object Field : Node -> ConcreteStage::Concrete
        {
        }
        
        object Dimension : Field -> ConcreteStage::Concrete
        {
            ref< Interface::UserDimension > dimension;
        }

        object ActivationBitSet : Field -> ConcreteStage::Concrete
        {
            value< mega::U64 > number_of_bits -> AutomataStage::AutomataAnalysis;
        }

        object Link : Field -> ConcreteStage::Concrete
        {
        }

        object UserLink : Link -> ConcreteStage::Concrete
        {
            ref< Interface::UserLink > user_link;
        }

        object OwnershipLink : Link -> ConcreteStage::Concrete
        {
            array< ref< Interface::OwningLink > > owners -> HyperGraphAnalysis::Model;
        }
    }

    object Context : Node -> ConcreteStage::Concrete
    {
        ref< Interface::IContext > icontext;
    }

    object Event : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Event > event;
    }

    object Interupt : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Interupt > interupt;
        
        array< ref< ClangTraits::Derivation::Root > >   transitions     -> ClangTraitsStage::Traits;
        array< ref< ClangTraits::Derivation::Root > >   events          -> ClangTraitsStage::Traits;
        array< ref< Functions::EventDispatch > >        dispatches      -> ClangTraitsStage::Traits;

        opt< ref< Decision::DecisionProcedure > > transition_decision -> DecisionsStage::Decisions;
    }

    object Function : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Function > function;
    }

    object State : Context -> ConcreteStage::Concrete
    {
        ref< Interface::State > state;

        ref< Automata::Vertex > automata_vertex -> AutomataStage::AutomataAnalysis;

        array< ref< ClangTraits::Derivation::Root > > transitions -> ClangTraitsStage::Traits;
        
        opt< ref< Decision::DecisionProcedure > > transition_decision -> DecisionsStage::Decisions;
    }

    object Action : State -> ConcreteStage::Concrete
    {
        ref< Interface::Action > action;
    }

    object Decider : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Decider > decider;
        array< ref< ClangTraits::Derivation::Root > > events -> ClangTraitsStage::Traits;
    }

    object Object : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Object >                object;
        array< ref< Decider > >                 deciders;
        late< ref< Data::ActivationBitSet > >   activation_bitset;
        late< ref< Data::OwnershipLink > >      ownership;

        ref< Automata::Vertex >             automata_root       -> AutomataStage::AutomataAnalysis;
        array< ref< Automata::Vertex > >    automata_tests      -> AutomataStage::AutomataAnalysis;
        array< ref< Automata::Enum > >      automata_enums      -> AutomataStage::AutomataAnalysis;
        value< mega::U32 >                  total_bitset_index  -> AutomataStage::AutomataAnalysis;
        value< mega::U32 >                  total_switch_index  -> AutomataStage::AutomataAnalysis;

        array< ref< Automata::TruthAssignment > >  truth_table         -> DecisionsStage::Decisions;
        array< ref< Automata::Vertex > >           variable_vertices   -> DecisionsStage::Decisions;
    }
}
