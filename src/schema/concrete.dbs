//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Concrete
{
    namespace Graph
    {
        object Vertex -> ConcreteStage::Concrete
        {
            ref< Components::Component > component;

            array< ref< Edge > > out_edges   -> HyperGraphAnalysisRollout::PerSourceModel;
            array< ref< Edge > > in_edges    -> HyperGraphAnalysisRollout::PerSourceModel;

            value< mega::TypeID > concrete_id -> ConcreteTypeRollout::PerSourceConcreteTable;
        }

        object Edge -> HyperGraphAnalysis::Model
        {
            value< mega::EdgeType > type;
            ref< Vertex >           source;
            ref< Vertex >           target;
        }
    }

    namespace Dimensions
    {
        object User : Graph::Vertex -> ConcreteStage::Concrete
        {
            ref< Concrete::Context >            parent_context;
            ref< Interface::DimensionTrait >    interface_dimension;

            ref< MemoryLayout::Part >   part    -> MemoryStage::MemoryLayout;
            value< mega::U64 >          offset  -> MemoryStage::MemoryLayout;
        }

        // HyperGraph
        object Link : Graph::Vertex -> ConcreteStage::Concrete
        {
            ref< Concrete::Context >    parent_context;
            ref< Interface::LinkTrait > interface_link;
            late< ref< LinkType > >     link_type;

            ref< HyperGraph::Relation > relation    -> HyperGraphAnalysisRollout::PerSourceModel;
            value< bool >               owning      -> HyperGraphAnalysisRollout::PerSourceModel;
            value< bool >               owned       -> HyperGraphAnalysisRollout::PerSourceModel;
            value< bool >               source      -> HyperGraphAnalysisRollout::PerSourceModel;
            value< bool >               singular    -> HyperGraphAnalysisRollout::PerSourceModel;

            ref< MemoryLayout::Part >  part     -> MemoryStage::MemoryLayout;
            value< mega::U64 >         offset   -> MemoryStage::MemoryLayout;
        }

        object UserLink : Link -> ConcreteStage::Concrete
        {
            ref< Interface::UserLinkTrait > interface_user_link;
        }

        object OwnershipLink : Link -> ConcreteStage::Concrete
        {
            ref< Interface::OwnershipLinkTrait > interface_owner_link;
        }

        object LinkType -> ConcreteStage::Concrete
        {
            ref< Concrete::Context >    parent_context;
            ref< Link >                 link;

            ref< MemoryLayout::Part >  part     -> MemoryStage::MemoryLayout;
            value< mega::U64 >         offset   -> MemoryStage::MemoryLayout;
        }

        // State machine
        object Bitset : Graph::Vertex -> ConcreteStage::Concrete
        {
            ref< Concrete::Object > parent_object;
            ref< Interface::CompilerDimensionTrait > interface_compiler_dimension;

            ref< MemoryLayout::Part >   part            -> MemoryStage::MemoryLayout;
            value< mega::U64 >          offset          -> MemoryStage::MemoryLayout;
            value< mega::U64 >          number_of_bits  -> AutomataStage::AutomataAnalysis;
        }

        object Configuration : Bitset -> ConcreteStage::Concrete
        {
        }

        object Activation : Bitset -> ConcreteStage::Concrete
        {
        }

        object Enablement : Bitset -> ConcreteStage::Concrete
        {
        }

        object History : Bitset -> ConcreteStage::Concrete
        {
        }
    }

    object ContextGroup : Graph::Vertex -> ConcreteStage::Concrete
    {
        array< ref< Context > > children;
    }

    object Context : ContextGroup -> ConcreteStage::Concrete
    {
        late< opt< ref< Object > > >        concrete_object;
        ref< ContextGroup >                 parent;
        ref< Interface::IContext >          interface;
        array< ref< Interface::IContext > > inheritance;

        value< mega::Instance > local_size -> MemoryStage::MemoryLayout;
        value< mega::Instance > total_size -> MemoryStage::MemoryLayout;
    }

    object Interupt : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Interupt > interface_interupt;

        array< ref< Derivation::Root > > transition         -> OperationsStage::Operations;
        late< array< ref< Derivation::Root > > > events     -> OperationsStage::Operations;

        opt< ref< Decision::DecisionProcedure > > transition_decision -> ValueSpaceStage::ValueSpace;
    }

    object Requirement : Interupt -> ConcreteStage::Concrete
    {
    }

    object Function : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Function > interface_function;
    }

    object Decider : Context -> ConcreteStage::Concrete
    {
        ref< Interface::Decider > interface_decider;

        array< ref< Derivation::Root > > variables -> OperationsStage::Operations;
    }

    object UserDimensionContext : Context  -> ConcreteStage::Concrete
    {
        array< ref< Dimensions::User > >    dimensions;
        array< ref< Dimensions::Link > >    links;
        array< ref< Dimensions::Bitset > >  bitsets;
    }

    object Namespace : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::Namespace > interface_namespace;
    }

    object State : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::State >     interface_state;
        array< ref< Requirement > > requirements;

        ref< Automata::Vertex > automata_vertex -> AutomataStage::AutomataAnalysis;

        array< ref< Derivation::Root > > transition -> OperationsStage::Operations;

        opt< ref< Decision::DecisionProcedure > > transition_decision -> ValueSpaceStage::ValueSpace;
    }

    object Action : State -> ConcreteStage::Concrete
    {
        ref< Interface::Action > interface_action;
    }

    object Component : State -> ConcreteStage::Concrete
    {
        ref< Interface::Component > interface_component;
    }

    object Event : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::Event > interface_event;
    }

    object Object : UserDimensionContext -> ConcreteStage::Concrete
    {
        ref< Interface::Object > interface_object;

        late< ref< Dimensions::OwnershipLink > > ownership_link;
        late< ref< Dimensions::Configuration > > configuration;
        late< ref< Dimensions::Activation >    > activation;
        late< ref< Dimensions::Enablement >    > enablement;
        late< ref< Dimensions::History >       > history;

        array< ref< MemoryLayout::Buffer > > buffers -> MemoryStage::MemoryLayout;

        array< ref< UserDimensionContext > > link_contexts -> HyperGraphAnalysisRollout::PerSourceModel;

        ref< Automata::Vertex >             automata_root       -> AutomataStage::AutomataAnalysis;
        array< ref< Automata::Vertex > >    automata_tests      -> AutomataStage::AutomataAnalysis;
        array< ref< Automata::Enum > >      automata_enums      -> AutomataStage::AutomataAnalysis;
        value< mega::U32 >                  total_bitset_index  -> AutomataStage::AutomataAnalysis;
        value< mega::U32 >                  total_switch_index  -> AutomataStage::AutomataAnalysis;

        array< ref< Decider > >                     deciders            -> ValueSpaceStage::ValueSpace;
        array< ref< Automata::TruthAssignment > >   truth_table         -> ValueSpaceStage::ValueSpace;
        array< ref< Automata::Vertex > >            variable_vertices   -> ValueSpaceStage::ValueSpace;
    }
    
    object MemoryMappedObject : Object -> GlobalMemoryStageRollout::GlobalMemoryRollout
    {
        ref< MemoryLayout::MemoryMap > memory_map;
    }

    object Root : ContextGroup -> ConcreteStage::Concrete
    {
        ref< Interface::Root > interface_root;
    }
}