//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

namespace ClangTraits
{
    namespace Derivation
    {
        object Edge -> ClangTraitsStage::Traits
        {
            ref< Node >                      from;
            ref< Step >                      next;
            value< bool >                    eliminated;
            value< bool >                    backtracked;
            value< int >                     precedence;
            array< ref< Concrete::Edge > >   edges;
        }

        object Node -> ClangTraitsStage::Traits
        {
            array< ref< Edge > > edges;
        }

        object Step : Node -> ClangTraitsStage::Traits
        {
            ref< Concrete::Node > vertex;
        }

        object Or : Step -> ClangTraitsStage::Traits
        {
        }

        object And : Step -> ClangTraitsStage::Traits
        {
        }

        object Select : Or -> ClangTraitsStage::Traits
        {
            ref< Concrete::Node > selection;
        }

        object Root : Node -> ClangTraitsStage::Traits
        {
            array< ref< Concrete::Node > > context;
        }

        object Dispatch : Step -> ClangTraitsStage::Traits
        {
        }
    }
}

namespace FunctionBody
{
    namespace Derivation
    {
        object Edge -> CPPSourceStage::Source
        {
            ref< Node >                      from;
            ref< Step >                      next;
            value< bool >                    eliminated;
            value< bool >                    backtracked;
            value< int >                     precedence;
            array< ref< Concrete::Edge > >   edges;
        }

        object Node -> CPPSourceStage::Source
        {
            array< ref< Edge > > edges;
        }

        object Step : Node -> CPPSourceStage::Source
        {
            ref< Concrete::Node >  vertex;
        }

        object Or : Step -> CPPSourceStage::Source
        {
        }

        object And : Step -> CPPSourceStage::Source
        {
        }

        object Select : Or -> CPPSourceStage::Source
        {
            ref< Concrete::Node > selection;
        }

        object Root : Node -> CPPSourceStage::Source
        {
            array< ref< Concrete::Node > > context;
        }

        object Dispatch : Step -> CPPSourceStage::Source
        {
        }
    }
}

namespace Invocation
{
    namespace Derivation
    {
        object Edge -> ObjectStage::Obj
        {
            ref< Node >                      from;
            ref< Step >                      next;
            value< bool >                    eliminated;
            value< bool >                    backtracked;
            value< int >                     precedence;
            array< ref< Concrete::Edge > >   edges;
        }

        object Node -> ObjectStage::Obj
        {
            array< ref< Edge > > edges;
        }

        object Step : Node -> ObjectStage::Obj
        {
            ref< Concrete::Node >  vertex;
        }

        object Or : Step -> ObjectStage::Obj
        {
        }

        object And : Step -> ObjectStage::Obj
        {
        }

        object Select : Or -> ObjectStage::Obj
        {
            ref< Concrete::Node > selection;
        }

        object Root : Node -> ObjectStage::Obj
        {
            array< ref< Concrete::Node > > context;
        }

        object Dispatch : Step -> ObjectStage::Obj
        {
        }
    }
}
