//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


///////////////////////////////////////////
///////////////////////////////////////////
// Objects
namespace Components
{
    object Component -> ComponentListing::Components
    {
        value< mega::ComponentType > type;
        value< std::string > name;
        value< mega::io::ComponentFilePath > file_path;
        value< mega::io::ComponentFilePath > python_file_path;
        value< mega::io::ComponentFilePath > init_file_path;
        value< boost::filesystem::path > src_dir;
        value< boost::filesystem::path > build_dir;
        array< value< std::string > > cpp_flags;
        array< value< std::string > > cpp_defines;
        array< value< boost::filesystem::path > > include_directories;
        array< value< mega::io::megaFilePath > > dependencies;
        array< value< mega::io::megaFilePath > > mega_source_files;
        array< value< mega::io::cppFilePath > > cpp_source_files;
        array< value< mega::io::schFilePath > > sch_source_files;
    }
}

namespace MegaMangle
{
    object Mangle -> ComponentListing::Components
    {
        value< std::string >    canon;
        value< std::string >    mangle;
        value< std::string >    impl;
        value< std::string >    blit;
    }
}

namespace Parser
{
    object Identifier -> ParserStage::AST
    {
        value< std::string > str;
    }

    object ScopedIdentifier -> ParserStage::AST
    {
        array< ref< Identifier > > ids;
        value< std::string > source_file;
        value< mega::U64 > line_number;
    }

    object TypeList -> ParserStage::AST
    {
        array< value< mega::Type > > args;
    }

    object ArgumentList -> ParserStage::AST
    {
        array< value< mega::TypeName > > args;
    }

    object ReturnType -> ParserStage::AST
    {
        value< std::string > str;
    }

    object Transition -> ParserStage::AST
    {
        value< bool > is_successor;
        value< bool > is_predecessor;
        value< std::string > str;
    }

    object Inheritance -> ParserStage::AST
    {
        array< value< std::string > > strings;
    }

    object Size -> ParserStage::AST
    {
        value< std::string > str;
    }

    object Initialiser -> ParserStage::AST
    {
        value< std::string > initialiser;
        value< mega::U64 > source_loc_start;
        value< mega::U64 > source_loc_end;
    }

    object Link -> ParserStage::AST
    {
        ref< Identifier >               id;
        ref< TypeList >                 type;
        value< bool >                   owning;
        value< mega::CardinalityRange > cardinality;
    }

    object Dimension -> ParserStage::AST
    {
        value< bool > isConst;
        ref< Identifier > id;
        value< std::string > type;
        opt< ref< Initialiser > > initialiser;
    }

    object Part -> ParserStage::AST
    {
        array< value< std::string > > identifiers;
    }

    object Include -> ParserStage::AST
    {
    }

    object SystemInclude : Include -> ParserStage::AST
    {
        value< std::string > str;
    }
    object MegaInclude : Include -> ParserStage::AST
    {
        value< boost::filesystem::path > megaSourceFilePath;
        late< ref< IncludeRoot > > root;
    }

    object MegaIncludeInline : MegaInclude -> ParserStage::AST
    {
    }

    object MegaIncludeNested : MegaInclude -> ParserStage::AST
    {
        ref< ScopedIdentifier > id;
    }

    object CPPInclude : Include -> ParserStage::AST
    {
        value< boost::filesystem::path > cppSourceFilePath;
    }

    object Dependency -> ParserStage::AST
    {
        value< std::string > str;
    }

    object Body -> ParserStage::Body
    {
        value< std::string >    text;
        value< std::string >    file;
        value< mega::U64 >      line_number;
    }

    object ContextDef -> ParserStage::AST
    {
        ref< ScopedIdentifier > id;
        array< ref< ContextDef > > children;
        array< ref< Dimension > > dimensions;
        array< ref< Link > > links;
        array< ref< Include > > includes;
        array< ref< Dependency > > dependencies;
        array< ref< Part > > parts;
        opt< ref< Body > > body;
    }

    object NamespaceDef : ContextDef -> ParserStage::AST
    {
    }

    object AbstractDef : ContextDef -> ParserStage::AST
    {
        ref< Size > size;
        ref< Inheritance > inheritance;
    }

    object StateDef : ContextDef -> ParserStage::AST
    {
        ref< Size > size;
        ref< Inheritance > inheritance;
        ref< Transition > transition;
    }

    object ActionDef : StateDef -> ParserStage::AST
    {
    }

    object ComponentDef : StateDef -> ParserStage::AST
    {
    }

    object EventDef : ContextDef -> ParserStage::AST
    {
        ref< Size > size;
        ref< Inheritance > inheritance;
    }

    object InteruptDef : ContextDef -> ParserStage::AST
    {
        ref< ArgumentList > argumentList;
        ref< Transition > transition;
    }

    object RequirementDef : InteruptDef -> ParserStage::AST
    {
    }

    object FunctionDef : ContextDef -> ParserStage::AST
    {
        ref< ArgumentList > argumentList;
        ref< ReturnType > returnType;
    }

    object DeciderDef : FunctionDef -> ParserStage::AST
    {
    }

    object ObjectDef : ContextDef -> ParserStage::AST
    {
        ref< Size > size;
        ref< Inheritance > inheritance;
    }

    object SourceRoot  -> ParserStage::AST
    {
        value< boost::filesystem::path > sourceFile;
        ref< Components::Component > component;
        ref< ContextDef > ast;
    }

    object IncludeRoot : SourceRoot -> ParserStage::AST
    {
    }

    object ObjectSourceRoot : SourceRoot -> ParserStage::AST
    {
    }

}
