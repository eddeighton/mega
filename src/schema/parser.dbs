//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


///////////////////////////////////////////
///////////////////////////////////////////
// Objects
namespace Parser
{
    object SourceRange -> ParserStage::AST
    {
        value< std::string > source_file;
        value< mega::U64 >   line_number;
    }

    object Symbol -> ParserStage::AST
    {
        value< std::string >      token;
        ref< Symbols::SymbolID >  id -> SymbolRollout::PerSourceSymbols;
    }

    object ReservedSymbol : Symbol -> ParserStage::AST
    {
    }

    object Identifier : SourceRange -> ParserStage::AST
    {
        array< ref< Symbol > > symbols;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    // types

    namespace Type
    {
        object Fragment -> ParserStage::AST
        {
        }

        object CPPOpaque : Fragment -> ParserStage::AST
        {
            value< std::string > str;
        }

        object Variant -> ParserStage::AST
        {
            array< ref< Symbol > > symbols;
        }

        object Path : Fragment -> ParserStage::AST
        {
            array< ref< Variant > > variants;
        }

        object Absolute : Path -> ParserStage::AST
        {
            ref< Interface::Node > type -> SymbolRollout::PerSourceSymbols;
        }

        object Deriving : Path -> ParserStage::AST
        {
        }

        object PathSequence -> ParserStage::AST
        {
            array< ref< Path > > path_sequence;
        }

        object NamedPath -> ParserStage::AST
        {
            ref< Path >                 path;
            opt< value< std::string > > name_opt; 
        }

        object NamedPathSequence -> ParserStage::AST
        {
            array< ref< NamedPath > > named_path_sequence;
        }

        object CPP -> ParserStage::AST
        {
            array< ref< Fragment > > elements;
        }
    }


    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    // un-named elements
        
    // include directives
    object Include : SourceRange -> ParserStage::AST
    {
    }

    object SystemInclude : Include -> ParserStage::AST
    {
        value< std::string > str;
    }

    object MegaInclude : Include -> ParserStage::AST
    {
        value< boost::filesystem::path >    megaSourceFilePath;
        late< ref< IncludeRoot > >          root;
    }

    object MegaIncludeInline : MegaInclude -> ParserStage::AST
    {
    }

    object MegaIncludeNested : MegaInclude -> ParserStage::AST
    {
        ref< Identifier > identifier;
    }

    object CPPInclude : Include -> ParserStage::AST
    {
        value< boost::filesystem::path >    cppSourceFilePath;
    }

    // name containers
    object Part : SourceRange -> ParserStage::AST
    {
        array< value< std::string > > identifiers;
    }

    object Dependency : SourceRange -> ParserStage::AST
    {
        value< std::string > str;
    }

    //////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////
    // TypeDeclaration
    namespace TypeDecl
    {
        object TypeDeclaration : SourceRange -> ParserStage::AST
        {
            // ref< Interface::IContext > parent -> InterfaceStage::Tree;
        }

        object Return : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::CPP > cpp_fragments;
        }

        object Arguments : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::CPP > cpp_fragments;
        }

        object Transitions : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::PathSequence >   type_path_sequence;
            value< bool >               is_successor;
            value< bool >               is_predecessor;
        }

        object Events : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::NamedPathSequence > type_named_path_sequence;
        }

        object Inheritance : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::PathSequence > type_path_sequence;
        }

        object Data : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::CPP > cpp_fragments;
        }

        object Initialiser : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::CPP > cpp_fragments;
        }

        object Link : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::Path > type_path;
        }

        object Alias : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::Path > type_path;
        }

        object Using : TypeDeclaration -> ParserStage::AST
        {
            ref< Type::CPP > cpp_fragments;
        }

        object Body : TypeDeclaration -> ParserStage::Body
        {
            ref< Type::CPP > cpp_fragments;
        }
    }

    // code containers
    object Size : SourceRange -> ParserStage::AST
    {
        value< mega::U64 >  amount;
        value< bool >       singular;
    }

    ////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////
    // named elements
    object Aggregate : Identifier -> ParserStage::AST
    {
    }

    object Dimension : Aggregate -> ParserStage::AST
    {
        ref< TypeDecl::Data >               data_type;
        opt< ref< TypeDecl::Initialiser > > initialiser_opt;
    }

    object Link : Aggregate -> ParserStage::AST
    {
        ref< TypeDecl::Link >               link_type;
        value< bool >                       owning;
        value< mega::CardinalityRange >     cardinality;
    }

    object Alias : Aggregate -> ParserStage::AST
    {
        ref< TypeDecl::Alias > alias_type;
    }

    object Using : Aggregate -> ParserStage::AST
    {
        ref< TypeDecl::Using > using_type;
    }

    // Container
    object Container : Identifier -> ParserStage::AST
    {
        array< ref< Container > >           children;

        array< ref< Aggregate > >           aggregates;
        array< ref< Dimension > >           dimensions;
        array< ref< Link > >                links;
        array< ref< Alias > >               aliases;
        array< ref< Using > >               usings;

        array< ref< Include > >             includes;
        array< ref< Dependency > >          dependencies;
        array< ref< Part > >                parts;

        opt< ref< TypeDecl::Body > >        body_type_opt;
    }

    object Namespace : Container -> ParserStage::AST
    {
    }

    object Abstract : Container -> ParserStage::AST
    {
        opt< ref< Size > >                  size_opt;
        opt< ref< TypeDecl::Inheritance > > inheritance_type_opt;
    }

    object Event : Container -> ParserStage::AST
    {
        opt< ref< Size > >                  size_opt;
        opt< ref< TypeDecl::Inheritance > > inheritance_type_opt;
    }

    object Interupt : Container -> ParserStage::AST
    {
        opt< ref< TypeDecl::Events > >      events_type_opt;
        opt< ref< TypeDecl::Transitions > > transition_type_opt;
    }

    object Requirement : Container -> ParserStage::AST
    {
        opt< ref< TypeDecl::Events > >      events_type_opt;
        opt< ref< TypeDecl::Transitions > > transition_type_opt;
    }

    object Function : Container -> ParserStage::AST
    {
        ref< TypeDecl::Arguments >      arguments_type;
        ref< TypeDecl::Return >         return_type;
    }

    object Decider : Container -> ParserStage::AST
    {
        ref< TypeDecl::Events >         events_type;
    }

    object Object : Container -> ParserStage::AST
    {
        opt< ref< Size > >                  size_opt;
        opt< ref< TypeDecl::Inheritance > > inheritance_type_opt;
    }

    object State : Container -> ParserStage::AST
    {
        opt< ref< Size > >                  size_opt;
        opt< ref< TypeDecl::Inheritance > > inheritance_type_opt;
        opt< ref< TypeDecl::Transitions > > transition_type_opt;
    }

    object Action : State -> ParserStage::AST
    {
    }

    object Component : State -> ParserStage::AST
    {
    }

    // source file level
    object SourceRoot  -> ParserStage::AST
    {
        value< boost::filesystem::path >    sourceFile;
        ref< Components::Component >        component;
        ref< Container >                    ast;
    }

    object IncludeRoot : SourceRoot -> ParserStage::AST
    {
    }

    object ObjectSourceRoot : SourceRoot -> ParserStage::AST
    {
    }

}
