//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.



namespace Dependencies
{
    object Glob -> DependencyAnalysis::DPGraph
    {
        value< boost::filesystem::path > location;
        value< std::string > glob;
    }

    object SourceFileDependencies -> DependencyAnalysis::DPGraph
    {
        value< mega::io::megaFilePath > source_file;
        value< mega::U64 > hash_code;
        array< ref< Glob > > globs;
        array< value< boost::filesystem::path > > resolution;
    }

    object TransitiveDependencies -> DependencyAnalysis::DPGraph
    {
        array< value< mega::io::megaFilePath > > mega_source_files;
    }

    object Analysis -> DependencyAnalysis::DPGraph
    {
        array< ref< SourceFileDependencies > > objects;

        map< value< mega::io::megaFilePath >, ref< TransitiveDependencies > > mega_dependencies;
        map< value< mega::io::cppFilePath >, ref< TransitiveDependencies > > cpp_dependencies;
        array< value< mega::io::megaFilePath > > topological_mega_files;
    }

}

namespace Symbols
{
    // SymbolTypeID are negative
    // interface::TypeID and concrete::TypeID are positive

    object SymbolID -> SymbolAnalysis::SymbolTable
    {
        value< std::string >               token;
        value< mega::interface::SymbolID > id;
        array< ref< Parser::Symbol > >     symbols;
    }

    object InterfaceTypeID -> SymbolAnalysis::SymbolTable
    {
        array< ref< SymbolID > >                symbol_ids;
        value< mega::interface::TypeID >        type_id;
        ref< Interface::Node >                  node;
    }
/*
    object ConcreteID -> ConcreteTypeAnalysis::ConcreteTable
    {
        value< mega::concrete::TypeID >         type_id;
        late< ref< Concrete::Graph::Vertex > >  vertex;
    }
    */
   
    object SymbolTable -> SymbolAnalysis::SymbolTable
    {
        map< value< std::string >, ref< SymbolID > >                symbol_names;
        map< value< mega::interface::SymbolID >, ref< SymbolID > >  symbol_ids;

        map< value< mega::interface::SymbolIDSequence >, ref< InterfaceTypeID > >   interface_symbol_id_sequences;
        map< value< mega::interface::TypeID >, ref< InterfaceTypeID > >             interface_type_ids;

        // map< value< mega::TypeIDSequence >, ref< concrete::TypeID > >   concrete_type_id_sequences    -> ConcreteTypeAnalysis::ConcreteTable;
        // map< value< mega::TypeID >,         ref< concrete::TypeID > >   concrete_type_ids             -> ConcreteTypeAnalysis::ConcreteTable;
    }
}
/*
namespace Inheritance
{
    object ObjectMapping -> InheritanceAnalysis::Derivations
    {
        value< mega::io::megaFilePath > source_file;
        value< mega::U64 > hash_code;
        multimap< ref< Interface::IContext >, ref< Concrete::Context > >                inheritance_contexts;
        multimap< ref< Interface::DimensionTrait >, ref< Concrete::Dimensions::User > > inheritance_dimensions;
        multimap< ref< Interface::LinkTrait >, ref< Concrete::Dimensions::Link > >      inheritance_links;
    }

    object Mapping -> InheritanceAnalysis::Derivations
    {
        array< ref< ObjectMapping > > mappings;
        multimap< ref< Interface::IContext >, ref< Concrete::Context > >                inheritance_contexts;
        multimap< ref< Interface::DimensionTrait >, ref< Concrete::Dimensions::User > > inheritance_dimensions;
        multimap< ref< Interface::LinkTrait >, ref< Concrete::Dimensions::Link > >      inheritance_links;
    }
}

namespace HyperGraph
{
    object Relation -> HyperGraphAnalysis::Model
    {
        value< mega::RelationID > id;
    }

    object OwningObjectRelation : Relation -> HyperGraphAnalysis::Model
    {
        multimap< ref< Interface::UserLinkTrait >, ref< Concrete::Dimensions::OwnershipLink > > owners;
        multimap< ref< Concrete::Dimensions::OwnershipLink >, ref< Interface::UserLinkTrait > > owned;
    }

    object NonOwningObjectRelation : Relation -> HyperGraphAnalysis::Model
    {
        ref< Interface::UserLinkTrait > source;
        ref< Interface::UserLinkTrait > target;
    }

    object Graph -> HyperGraphAnalysis::Model
    {
        ref< OwningObjectRelation >                                             owning_relation;
        map< ref< Interface::UserLinkTrait >, ref< NonOwningObjectRelation > >  non_owning_relations;
    }
}

namespace MemoryLayout
{
    object Part -> MemoryStage::MemoryLayout
    {
        value< mega::U64 > total_domain_size;

        late< value< mega::U64 > >                              size;
        late< value< mega::U64 > >                              alignment;
        late< array< ref< Concrete::Dimensions::User > > >      user_dimensions;
        late< array< ref< Concrete::Dimensions::Link > > >      link_dimensions;
        late< array< ref< Concrete::Dimensions::Bitset > > >    bitset_dimensions;

        late< value< mega::U64 > > offset;
        late< ref< Buffer > >      buffer;
    }

    object Buffer -> MemoryStage::MemoryLayout
    {
        array< ref< Part > > parts;
        value< mega::U64 >   size;
        value< mega::U64 >   alignment;
    }

    object SimpleBuffer : Buffer -> MemoryStage::MemoryLayout
    {

    }

    object MemoryMap -> GlobalMemoryStage::GlobalMemoryLayout
    {
        ref< Interface::IContext >       interface;
        value< mega::U64 >               block_size;
        value< mega::U64 >               block_alignment;
        value< mega::U64 >               fixed_allocation;
        array< ref< Concrete::Object > > concrete;

        // this does not work - due to per source versus global :(
        // late< array< ref< Concrete::MemoryMappedObject > > > concrete -> GlobalMemoryStageRollout::GlobalMemoryRollout;
    }
}

namespace UnityAnalysis
{
    object DataBinding -> UnityStage::UnityAnalysis
    {
        value< std::string >        typeName;
        value< mega::TypeID >       interfaceTypeID;
    }

    object LinkBinding -> UnityStage::UnityAnalysis
    {
        value< std::string >        typeName;
        value< mega::TypeID >       interfaceTypeID;
    }

    object ObjectBinding -> UnityStage::UnityAnalysis
    {
        value< std::string >        typeName;
        value< mega::TypeID >       interfaceTypeID;
        array< ref< DataBinding > > dataBindings;
        array< ref< LinkBinding > > linkBindings;
    }

    object Prefab : ObjectBinding -> UnityStage::UnityAnalysis
    {
        value< std::string > guid;
    }

    object Manual : ObjectBinding -> UnityStage::UnityAnalysis
    {
        value< std::string > name;
    }

    object Binding -> UnityStage::UnityAnalysis
    {
        ref< ObjectBinding >    binding;
        ref< Concrete::Object > object;
        map< ref< Concrete::Dimensions::User >, ref< DataBinding > > dataBindings;
        map< ref< Concrete::Dimensions::Link >, ref< LinkBinding > > linkBindings;
    }
}
*/