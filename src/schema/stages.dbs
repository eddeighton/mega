//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

include( environment/include.hpp )

///////////////////////////////////////////
///////////////////////////////////////////
// Stages
stage ComponentListing
{
    source .manifest;
    file Components;
}

stage ComponentListingView
{
    source .manifest;
    dependency ComponentListing;
    global accessor array< ref< Components::Component > >;
}

stage ParserStage
{
    source .manifest;
    source .mega;
    source .cpp;
    dependency ComponentListing;

    file AST;
    file Body;

    global accessor array< ref< Components::Component > >;
    persource accessor array< ref< Parser::MegaInclude > >;
    persource accessor ref< Parser::ObjectSourceRoot >;
}

stage InterfaceStage
{
    source .manifest;
    source .mega;
    source .cpp;
    dependency ParserStage;

    file Tree;

    global accessor array< ref< Components::Component > >;
    global accessor ref< Interface::Root >;

    persource accessor ref< Parser::ObjectSourceRoot >;
    persource accessor array< ref< Parser::ReservedSymbol > >;
    persource accessor array< ref< Parser::SystemInclude > >;
    persource accessor array< ref< Parser::CPPInclude > >;
}

stage SymbolAnalysis
{
    source .manifest;
    source .mega;
    source .cpp;
    dependency InterfaceStage;

    file SymbolTable;

    persource accessor array< ref< Parser::Symbol > >;
    global accessor array< ref< Interface::Node > >;
}

stage SymbolRollout
{
    source .manifest;
    source .mega;
    source .cpp;
    dependency SymbolAnalysis;

    file PerSourceSymbols;

    global accessor ref< Symbols::SymbolTable >;

    persource accessor array< ref< Parser::Symbol > >;
    persource accessor array< ref< Parser::Type::Absolute > >;
    global accessor array< ref< Interface::Node > >;

}

stage ConcreteStage
{
    source .manifest;
    source .mega;
    source .cpp;
    dependency SymbolRollout;

    file Concrete;

    global accessor ref< Symbols::SymbolTable >;
    global accessor ref< Interface::Root >;
    global accessor ref< Concrete::Root >;
    global accessor array< ref< Interface::Abstract > >;
    global accessor array< ref< Interface::IContext > >;
    global accessor array< ref< Interface::Node > >;

    persource accessor array< ref< Parser::Type::Absolute > >;
    
}

stage ConcreteTypeAnalysis
{
    source .manifest;
    source .mega;
    source .cpp;
    
    dependency ConcreteStage;

    file ConcreteTable;

    global accessor ref< Symbols::SymbolTable >;
    global accessor array< ref< Concrete::Node > >;

}

stage HyperGraphAnalysis
{
    source .manifest;
    source .mega;
    source .cpp;
    
    dependency ConcreteTypeAnalysis;

    file Model;

    global accessor array< ref< Interface::UserLink > >;
    global accessor array< ref< Concrete::Data::OwnershipLink > >;
    global accessor array< ref< Concrete::Object > >;
    global accessor array< ref< Concrete::Node > >;
    global accessor array< ref< Concrete::Edge > >;
    global accessor ref< Concrete::Root >;
    global accessor ref< Symbols::SymbolTable >;
    global accessor ref< HyperGraph::Graph >;
}

stage AutomataStage
{
    source .manifest;
    source .mega;
    source .cpp;
    dependency HyperGraphAnalysis;

    file AutomataAnalysis;

    global accessor array< ref< Concrete::Object > >;
}

stage ClangTraitsStage
{
    source .manifest;
    source .mega;
    source .cpp;

    dependency AutomataStage;

    file Traits;

    global accessor ref< Interface::Root >;
    global accessor ref< Concrete::Root >;
    global accessor array< ref< Concrete::Node > >;
    global accessor array< ref< Components::Component > >;
    global accessor ref< HyperGraph::Graph >;
}

stage ClangAnalysisStage
{
    source .manifest;
    source .mega;
    source .cpp;

    dependency ClangTraitsStage;

    file Analysis;

    global accessor ref< Interface::Root >;
    global accessor array< ref< Components::Component > >;
    global accessor ref< Symbols::SymbolTable >;
}

stage ClangCompilationStage
{
    source .manifest;
    source .mega;
    source .cpp;

    dependency ClangAnalysisStage;

    file Compilation;

    global accessor ref< Interface::Root >;
    global accessor array< ref< Components::Component > >;
    global accessor array< ref< Interface::UserUsing > >;
    global accessor array< ref< Interface::CPP::TypeInfo > >;
    global accessor ref< Symbols::SymbolTable >;
}

stage CPPSourceStage
{
    source .manifest;
    source .mega;
    source .cpp;

    dependency ClangCompilationStage;

    file Source;

    global accessor ref< Interface::Root >;
    global accessor array< ref< Components::Component > >;
    global accessor ref< Symbols::SymbolTable >;
}

stage ObjectStage
{
    source .manifest;
    source .mega;
    source .cpp;

    dependency CPPSourceStage;

    file Obj;

    global accessor ref< Interface::Root >;
    global accessor ref< Symbols::SymbolTable >;
    global accessor ref< Functions::Invocations >;
    global accessor array< ref< Components::Component > >;
}

stage DecisionsStage
{
    source .manifest;
    source .mega;
    source .cpp;

    dependency ObjectStage;

    file Decisions;

    global accessor ref< Interface::Root >;
    global accessor ref< Concrete::Root >;
    global accessor ref< HyperGraph::Graph >;
    global accessor array< ref< Concrete::Object > >;
    global accessor array< ref< Concrete::Interupt > >;
    global accessor array< ref< Concrete::State > >;
}

stage FinalStage
{
    source .manifest;
    source .mega;
    source .cpp;

    dependency DecisionsStage;

}