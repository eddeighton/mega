//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


namespace Alias
{
    object Edge -> AliasAnalysis::Model
    {
        ref< Step >                             next;
        array< ref< Concrete::Graph::Edge > >   edges;
    }

    object Step -> AliasAnalysis::Model
    {
        ref< Concrete::Graph::Vertex >  vertex;
        array< ref< Edge > >            edges;
    }

    object And : Step -> AliasAnalysis::Model
    {
    }

    object Or : Step -> AliasAnalysis::Model
    {
    }

    object AliasDerivation -> AliasAnalysis::Model
    {
        ref< Concrete::Graph::Vertex >  context;
        array< ref< Edge > >            edges;
    }
}

namespace Derivation
{
    object Edge -> OperationsStage::Operations
    {
        ref< Step >                             next;
        value< bool >                           eliminated;
        value< bool >                           backtracked;
        value< int >                            precedence;
        array< ref< Concrete::Graph::Edge > >   edges;
    }

    object Step -> OperationsStage::Operations
    {
        ref< Concrete::Graph::Vertex >  vertex;
        array< ref< Edge > >            edges;
    }

    object And : Step -> OperationsStage::Operations
    {
    }

    object Or : Step -> OperationsStage::Operations
    {
    }

    object Root -> OperationsStage::Operations
    {
        array< ref< Concrete::Graph::Vertex > > context;
        array< ref< Edge > > edges;
    }
}

namespace Operations
{
    namespace ReturnTypes
    {
        object ReturnType -> OperationsStage::Operations
        {
            // set only when compiled by clang
            late< value< std::string > > canonical_type;
        }

        object Void : ReturnType -> OperationsStage::Operations
        {
        }

        object Dimension : ReturnType -> OperationsStage::Operations
        {
            array< ref< Interface::DimensionTrait > >   dimensions;
            value< bool >                               homogeneous;
        }

        object Function : ReturnType -> OperationsStage::Operations
        {
            array< ref< Interface::Function > >         functions;
            value< bool >                               homogeneous;
        }

        object Context : ReturnType -> OperationsStage::Operations
        {
            array< ref< Interface::IContext > > contexts;
        }

        object Range : Context -> OperationsStage::Operations
        {

        }
    }

    object Operator -> OperationsStage::Operations
    {
        value< mega::OperatorID > id;
    }

    object New : Operator -> OperationsStage::Operations
    {
    }

    object RemoteNew : Operator -> OperationsStage::Operations
    {
    }

    object Delete : Operator -> OperationsStage::Operations
    {
    }

    object Cast : Operator -> OperationsStage::Operations
    {
    }

    object Active : Operator -> OperationsStage::Operations
    {
    }

    object Enabled : Operator -> OperationsStage::Operations
    {
    }


    object Invocation -> OperationsStage::Operations
    {
        value< mega::InvocationID > id;
        
        ref< Derivation::Root > derivation;

        late< ref< Invocations::Instructions::Root > >      root_instruction;
        array< ref< Invocations::Variables::Variable > >    variables;
        array< ref< Invocations::Operations::Operation > >  operations;

        late< value< mega::ExplicitOperationID > > explicit_operation;

        late< ref< ReturnTypes::ReturnType > > return_type;

        // set only when compiled by clang
        late< array< value< mega::SourceLocation > > >  file_offsets;
        late< value< std::string > >                    canonical_context;
        late< value< std::string > >                    canonical_type_path;
        late< value< std::string > >                    canonical_operation;
    }


    object Start : Invocation -> OperationsStage::Operations
    {
    }

    object Call : Invocation -> OperationsStage::Operations
    {
    }

    object Signal : Invocation -> OperationsStage::Operations
    {
    }

    object Move : Invocation -> OperationsStage::Operations
    {
    }

    object GetContext : Invocation -> OperationsStage::Operations
    {
    }

    object Read : Invocation -> OperationsStage::Operations
    {
    }

    object Write : Invocation -> OperationsStage::Operations
    {
        ref< ReturnTypes::ReturnType > parameter_type;
    }

    object LinkRead : Invocation -> OperationsStage::Operations
    {
    }

    object LinkAdd : Invocation -> OperationsStage::Operations
    {
    }

    object LinkRemove : Invocation -> OperationsStage::Operations
    {
    }

    object LinkClear : Invocation -> OperationsStage::Operations
    {
    }

    object Range : Invocation -> OperationsStage::Operations
    {
    }

    object Invocations -> OperationsStage::Operations
    {
        map< value< mega::InvocationID >, ref< Invocation > >   invocations;
        map< value< mega::OperatorID >, ref< Operator > >       operators;
    }
}
