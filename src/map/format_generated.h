// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FORMAT_MEGA_H_
#define FLATBUFFERS_GENERATED_FORMAT_MEGA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace Mega {

struct Type;

struct TypeName;
struct TypeNameBuilder;

struct F2;

struct F3;

struct F4;

struct Quat;

struct F33;

struct Vertex;
struct VertexBuilder;

struct Polygon;
struct PolygonBuilder;

struct Vertex3D;
struct Vertex3DBuilder;

struct Mesh;
struct MeshBuilder;

struct FloatProperty;
struct FloatPropertyBuilder;

struct LongProperty;
struct LongPropertyBuilder;

struct StringProperty;
struct StringPropertyBuilder;

struct F2Property;
struct F2PropertyBuilder;

struct F3Property;
struct F3PropertyBuilder;

struct F4Property;
struct F4PropertyBuilder;

struct QuatProperty;
struct QuatPropertyBuilder;

struct F33Property;
struct F33PropertyBuilder;

struct Properties;
struct PropertiesBuilder;

struct Area;
struct AreaBuilder;

struct Pane;
struct PaneBuilder;

struct WallSection;
struct WallSectionBuilder;

struct Boundary;
struct BoundaryBuilder;

struct Floor;
struct FloorBuilder;

struct Object;
struct ObjectBuilder;

struct Lane;
struct LaneBuilder;

struct Map;
struct MapBuilder;

enum Plane : int16_t {
  Plane_eHole = 0,
  Plane_eGround = 1,
  Plane_eMid = 2,
  Plane_eCeiling = 3,
  Plane_MIN = Plane_eHole,
  Plane_MAX = Plane_eCeiling
};

inline const Plane (&EnumValuesPlane())[4] {
  static const Plane values[] = {
    Plane_eHole,
    Plane_eGround,
    Plane_eMid,
    Plane_eCeiling
  };
  return values;
}

inline const char * const *EnumNamesPlane() {
  static const char * const names[5] = {
    "eHole",
    "eGround",
    "eMid",
    "eCeiling",
    nullptr
  };
  return names;
}

inline const char *EnumNamePlane(Plane e) {
  if (::flatbuffers::IsOutRange(e, Plane_eHole, Plane_eCeiling)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPlane()[index];
}

enum Variant : uint8_t {
  Variant_NONE = 0,
  Variant_FloatProperty = 1,
  Variant_LongProperty = 2,
  Variant_StringProperty = 3,
  Variant_F2Property = 4,
  Variant_F3Property = 5,
  Variant_F4Property = 6,
  Variant_QuatProperty = 7,
  Variant_F33Property = 8,
  Variant_MIN = Variant_NONE,
  Variant_MAX = Variant_F33Property
};

inline const Variant (&EnumValuesVariant())[9] {
  static const Variant values[] = {
    Variant_NONE,
    Variant_FloatProperty,
    Variant_LongProperty,
    Variant_StringProperty,
    Variant_F2Property,
    Variant_F3Property,
    Variant_F4Property,
    Variant_QuatProperty,
    Variant_F33Property
  };
  return values;
}

inline const char * const *EnumNamesVariant() {
  static const char * const names[10] = {
    "NONE",
    "FloatProperty",
    "LongProperty",
    "StringProperty",
    "F2Property",
    "F3Property",
    "F4Property",
    "QuatProperty",
    "F33Property",
    nullptr
  };
  return names;
}

inline const char *EnumNameVariant(Variant e) {
  if (::flatbuffers::IsOutRange(e, Variant_NONE, Variant_F33Property)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesVariant()[index];
}

template<typename T> struct VariantTraits {
  static const Variant enum_value = Variant_NONE;
};

template<> struct VariantTraits<Mega::FloatProperty> {
  static const Variant enum_value = Variant_FloatProperty;
};

template<> struct VariantTraits<Mega::LongProperty> {
  static const Variant enum_value = Variant_LongProperty;
};

template<> struct VariantTraits<Mega::StringProperty> {
  static const Variant enum_value = Variant_StringProperty;
};

template<> struct VariantTraits<Mega::F2Property> {
  static const Variant enum_value = Variant_F2Property;
};

template<> struct VariantTraits<Mega::F3Property> {
  static const Variant enum_value = Variant_F3Property;
};

template<> struct VariantTraits<Mega::F4Property> {
  static const Variant enum_value = Variant_F4Property;
};

template<> struct VariantTraits<Mega::QuatProperty> {
  static const Variant enum_value = Variant_QuatProperty;
};

template<> struct VariantTraits<Mega::F33Property> {
  static const Variant enum_value = Variant_F33Property;
};

bool VerifyVariant(::flatbuffers::Verifier &verifier, const void *obj, Variant type);
bool VerifyVariantVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(2) Type FLATBUFFERS_FINAL_CLASS {
 private:
  int16_t mangle_;

 public:
  Type()
      : mangle_(0) {
  }
  Type(int16_t _mangle)
      : mangle_(::flatbuffers::EndianScalar(_mangle)) {
  }
  int16_t mangle() const {
    return ::flatbuffers::EndianScalar(mangle_);
  }
};
FLATBUFFERS_STRUCT_END(Type, 2);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) F2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  F2()
      : x_(0),
        y_(0) {
  }
  F2(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(F2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) F3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  F3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  F3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(F3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) F4 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  F4()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  F4(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(F4, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Quat FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Quat()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  Quat(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Quat, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) F33 FLATBUFFERS_FINAL_CLASS {
 private:
  Mega::F3 m_[3];

 public:
  F33()
      : m_() {
  }
  F33(::flatbuffers::span<const Mega::F3, 3> _m) {
    ::flatbuffers::CastToArray(m_).CopyFromSpan(_m);
  }
  const ::flatbuffers::Array<Mega::F3, 3> *m() const {
    return &::flatbuffers::CastToArray(m_);
  }
};
FLATBUFFERS_STRUCT_END(F33, 36);

struct TypeName FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TypeNameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           verifier.EndTable();
  }
};

struct TypeNameBuilder {
  typedef TypeName Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(TypeName::VT_NAME, name);
  }
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(TypeName::VT_TYPE, type);
  }
  explicit TypeNameBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TypeName> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TypeName>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TypeName> CreateTypeName(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    const Mega::Type *type = nullptr) {
  TypeNameBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TypeName> CreateTypeNameDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const Mega::Type *type = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Mega::CreateTypeName(
      _fbb,
      name__,
      type);
}

struct Vertex FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VertexBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4
  };
  const Mega::F2 *position() const {
    return GetStruct<const Mega::F2 *>(VT_POSITION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::F2>(verifier, VT_POSITION, 4) &&
           verifier.EndTable();
  }
};

struct VertexBuilder {
  typedef Vertex Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const Mega::F2 *position) {
    fbb_.AddStruct(Vertex::VT_POSITION, position);
  }
  explicit VertexBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vertex> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vertex>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vertex> CreateVertex(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::F2 *position = nullptr) {
  VertexBuilder builder_(_fbb);
  builder_.add_position(position);
  return builder_.Finish();
}

struct Polygon FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PolygonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex>> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex>> *>(VT_VERTICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.VerifyVectorOfTables(vertices()) &&
           verifier.EndTable();
  }
};

struct PolygonBuilder {
  typedef Polygon Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex>>> vertices) {
    fbb_.AddOffset(Polygon::VT_VERTICES, vertices);
  }
  explicit PolygonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Polygon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Polygon>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Polygon> CreatePolygon(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex>>> vertices = 0) {
  PolygonBuilder builder_(_fbb);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Polygon> CreatePolygonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Mega::Vertex>> *vertices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Vertex>>(*vertices) : 0;
  return Mega::CreatePolygon(
      _fbb,
      vertices__);
}

struct Vertex3D FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Vertex3DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTEX = 4,
    VT_PLANE = 6,
    VT_NORMAL = 8,
    VT_UV = 10,
    VT_TANGENT = 12
  };
  const Mega::Vertex *vertex() const {
    return GetPointer<const Mega::Vertex *>(VT_VERTEX);
  }
  Mega::Plane plane() const {
    return static_cast<Mega::Plane>(GetField<int16_t>(VT_PLANE, 0));
  }
  const Mega::F3 *normal() const {
    return GetStruct<const Mega::F3 *>(VT_NORMAL);
  }
  const Mega::F2 *uv() const {
    return GetStruct<const Mega::F2 *>(VT_UV);
  }
  const Mega::F4 *tangent() const {
    return GetStruct<const Mega::F4 *>(VT_TANGENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTEX) &&
           verifier.VerifyTable(vertex()) &&
           VerifyField<int16_t>(verifier, VT_PLANE, 2) &&
           VerifyField<Mega::F3>(verifier, VT_NORMAL, 4) &&
           VerifyField<Mega::F2>(verifier, VT_UV, 4) &&
           VerifyField<Mega::F4>(verifier, VT_TANGENT, 4) &&
           verifier.EndTable();
  }
};

struct Vertex3DBuilder {
  typedef Vertex3D Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertex(::flatbuffers::Offset<Mega::Vertex> vertex) {
    fbb_.AddOffset(Vertex3D::VT_VERTEX, vertex);
  }
  void add_plane(Mega::Plane plane) {
    fbb_.AddElement<int16_t>(Vertex3D::VT_PLANE, static_cast<int16_t>(plane), 0);
  }
  void add_normal(const Mega::F3 *normal) {
    fbb_.AddStruct(Vertex3D::VT_NORMAL, normal);
  }
  void add_uv(const Mega::F2 *uv) {
    fbb_.AddStruct(Vertex3D::VT_UV, uv);
  }
  void add_tangent(const Mega::F4 *tangent) {
    fbb_.AddStruct(Vertex3D::VT_TANGENT, tangent);
  }
  explicit Vertex3DBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Vertex3D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Vertex3D>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Vertex3D> CreateVertex3D(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Mega::Vertex> vertex = 0,
    Mega::Plane plane = Mega::Plane_eHole,
    const Mega::F3 *normal = nullptr,
    const Mega::F2 *uv = nullptr,
    const Mega::F4 *tangent = nullptr) {
  Vertex3DBuilder builder_(_fbb);
  builder_.add_tangent(tangent);
  builder_.add_uv(uv);
  builder_.add_normal(normal);
  builder_.add_vertex(vertex);
  builder_.add_plane(plane);
  return builder_.Finish();
}

struct Mesh FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex3D>> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex3D>> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<int32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.VerifyVectorOfTables(vertices()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  typedef Mesh Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex3D>>> vertices) {
    fbb_.AddOffset(Mesh::VT_VERTICES, vertices);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> indices) {
    fbb_.AddOffset(Mesh::VT_INDICES, indices);
  }
  explicit MeshBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Mesh>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Mesh> CreateMesh(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Vertex3D>>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> indices = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Mesh> CreateMeshDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Mega::Vertex3D>> *vertices = nullptr,
    const std::vector<int32_t> *indices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Vertex3D>>(*vertices) : 0;
  auto indices__ = indices ? _fbb.CreateVector<int32_t>(*indices) : 0;
  return Mega::CreateMesh(
      _fbb,
      vertices__,
      indices__);
}

struct FloatProperty FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloatPropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  float value() const {
    return GetField<float>(VT_VALUE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct FloatPropertyBuilder {
  typedef FloatProperty Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(float value) {
    fbb_.AddElement<float>(FloatProperty::VT_VALUE, value, 0.0f);
  }
  explicit FloatPropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FloatProperty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FloatProperty>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FloatProperty> CreateFloatProperty(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float value = 0.0f) {
  FloatPropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct LongProperty FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LongPropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  int64_t value() const {
    return GetField<int64_t>(VT_VALUE, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct LongPropertyBuilder {
  typedef LongProperty Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(int64_t value) {
    fbb_.AddElement<int64_t>(LongProperty::VT_VALUE, value, 0);
  }
  explicit LongPropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LongProperty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LongProperty>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LongProperty> CreateLongProperty(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t value = 0) {
  LongPropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct StringProperty FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringPropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct StringPropertyBuilder {
  typedef StringProperty Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(StringProperty::VT_VALUE, value);
  }
  explicit StringPropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StringProperty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StringProperty>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StringProperty> CreateStringProperty(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  StringPropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StringProperty> CreateStringPropertyDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *value = nullptr) {
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return Mega::CreateStringProperty(
      _fbb,
      value__);
}

struct F2Property FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef F2PropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const Mega::F2 *value() const {
    return GetStruct<const Mega::F2 *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::F2>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct F2PropertyBuilder {
  typedef F2Property Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(const Mega::F2 *value) {
    fbb_.AddStruct(F2Property::VT_VALUE, value);
  }
  explicit F2PropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<F2Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<F2Property>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<F2Property> CreateF2Property(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::F2 *value = nullptr) {
  F2PropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct F3Property FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef F3PropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const Mega::F3 *value() const {
    return GetStruct<const Mega::F3 *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::F3>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct F3PropertyBuilder {
  typedef F3Property Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(const Mega::F3 *value) {
    fbb_.AddStruct(F3Property::VT_VALUE, value);
  }
  explicit F3PropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<F3Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<F3Property>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<F3Property> CreateF3Property(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::F3 *value = nullptr) {
  F3PropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct F4Property FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef F4PropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const Mega::F4 *value() const {
    return GetStruct<const Mega::F4 *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::F4>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct F4PropertyBuilder {
  typedef F4Property Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(const Mega::F4 *value) {
    fbb_.AddStruct(F4Property::VT_VALUE, value);
  }
  explicit F4PropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<F4Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<F4Property>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<F4Property> CreateF4Property(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::F4 *value = nullptr) {
  F4PropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct QuatProperty FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef QuatPropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const Mega::Quat *value() const {
    return GetStruct<const Mega::Quat *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Quat>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct QuatPropertyBuilder {
  typedef QuatProperty Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(const Mega::Quat *value) {
    fbb_.AddStruct(QuatProperty::VT_VALUE, value);
  }
  explicit QuatPropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<QuatProperty> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<QuatProperty>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<QuatProperty> CreateQuatProperty(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Quat *value = nullptr) {
  QuatPropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct F33Property FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef F33PropertyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUE = 4
  };
  const Mega::F33 *value() const {
    return GetStruct<const Mega::F33 *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::F33>(verifier, VT_VALUE, 4) &&
           verifier.EndTable();
  }
};

struct F33PropertyBuilder {
  typedef F33Property Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_value(const Mega::F33 *value) {
    fbb_.AddStruct(F33Property::VT_VALUE, value);
  }
  explicit F33PropertyBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<F33Property> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<F33Property>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<F33Property> CreateF33Property(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::F33 *value = nullptr) {
  F33PropertyBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct Properties FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropertiesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_VARIANT_TYPE = 6,
    VT_VARIANT = 8
  };
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  Mega::Variant variant_type() const {
    return static_cast<Mega::Variant>(GetField<uint8_t>(VT_VARIANT_TYPE, 0));
  }
  const void *variant() const {
    return GetPointer<const void *>(VT_VARIANT);
  }
  template<typename T> const T *variant_as() const;
  const Mega::FloatProperty *variant_as_FloatProperty() const {
    return variant_type() == Mega::Variant_FloatProperty ? static_cast<const Mega::FloatProperty *>(variant()) : nullptr;
  }
  const Mega::LongProperty *variant_as_LongProperty() const {
    return variant_type() == Mega::Variant_LongProperty ? static_cast<const Mega::LongProperty *>(variant()) : nullptr;
  }
  const Mega::StringProperty *variant_as_StringProperty() const {
    return variant_type() == Mega::Variant_StringProperty ? static_cast<const Mega::StringProperty *>(variant()) : nullptr;
  }
  const Mega::F2Property *variant_as_F2Property() const {
    return variant_type() == Mega::Variant_F2Property ? static_cast<const Mega::F2Property *>(variant()) : nullptr;
  }
  const Mega::F3Property *variant_as_F3Property() const {
    return variant_type() == Mega::Variant_F3Property ? static_cast<const Mega::F3Property *>(variant()) : nullptr;
  }
  const Mega::F4Property *variant_as_F4Property() const {
    return variant_type() == Mega::Variant_F4Property ? static_cast<const Mega::F4Property *>(variant()) : nullptr;
  }
  const Mega::QuatProperty *variant_as_QuatProperty() const {
    return variant_type() == Mega::Variant_QuatProperty ? static_cast<const Mega::QuatProperty *>(variant()) : nullptr;
  }
  const Mega::F33Property *variant_as_F33Property() const {
    return variant_type() == Mega::Variant_F33Property ? static_cast<const Mega::F33Property *>(variant()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           VerifyField<uint8_t>(verifier, VT_VARIANT_TYPE, 1) &&
           VerifyOffset(verifier, VT_VARIANT) &&
           VerifyVariant(verifier, variant(), variant_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Mega::FloatProperty *Properties::variant_as<Mega::FloatProperty>() const {
  return variant_as_FloatProperty();
}

template<> inline const Mega::LongProperty *Properties::variant_as<Mega::LongProperty>() const {
  return variant_as_LongProperty();
}

template<> inline const Mega::StringProperty *Properties::variant_as<Mega::StringProperty>() const {
  return variant_as_StringProperty();
}

template<> inline const Mega::F2Property *Properties::variant_as<Mega::F2Property>() const {
  return variant_as_F2Property();
}

template<> inline const Mega::F3Property *Properties::variant_as<Mega::F3Property>() const {
  return variant_as_F3Property();
}

template<> inline const Mega::F4Property *Properties::variant_as<Mega::F4Property>() const {
  return variant_as_F4Property();
}

template<> inline const Mega::QuatProperty *Properties::variant_as<Mega::QuatProperty>() const {
  return variant_as_QuatProperty();
}

template<> inline const Mega::F33Property *Properties::variant_as<Mega::F33Property>() const {
  return variant_as_F33Property();
}

struct PropertiesBuilder {
  typedef Properties Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(Properties::VT_TYPE, type);
  }
  void add_variant_type(Mega::Variant variant_type) {
    fbb_.AddElement<uint8_t>(Properties::VT_VARIANT_TYPE, static_cast<uint8_t>(variant_type), 0);
  }
  void add_variant(::flatbuffers::Offset<void> variant) {
    fbb_.AddOffset(Properties::VT_VARIANT, variant);
  }
  explicit PropertiesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Properties> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Properties>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Properties> CreateProperties(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    Mega::Variant variant_type = Mega::Variant_NONE,
    ::flatbuffers::Offset<void> variant = 0) {
  PropertiesBuilder builder_(_fbb);
  builder_.add_variant(variant);
  builder_.add_type(type);
  builder_.add_variant_type(variant_type);
  return builder_.Finish();
}

struct Area FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AreaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PROPERTIES = 6,
    VT_AREAS = 8
  };
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *>(VT_PROPERTIES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Area>> *areas() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Area>> *>(VT_AREAS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           VerifyOffset(verifier, VT_AREAS) &&
           verifier.VerifyVector(areas()) &&
           verifier.VerifyVectorOfTables(areas()) &&
           verifier.EndTable();
  }
};

struct AreaBuilder {
  typedef Area Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(Area::VT_TYPE, type);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties) {
    fbb_.AddOffset(Area::VT_PROPERTIES, properties);
  }
  void add_areas(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Area>>> areas) {
    fbb_.AddOffset(Area::VT_AREAS, areas);
  }
  explicit AreaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Area> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Area>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Area> CreateArea(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Area>>> areas = 0) {
  AreaBuilder builder_(_fbb);
  builder_.add_areas(areas);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Area> CreateAreaDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Properties>> *properties = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Area>> *areas = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Properties>>(*properties) : 0;
  auto areas__ = areas ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Area>>(*areas) : 0;
  return Mega::CreateArea(
      _fbb,
      type,
      properties__,
      areas__);
}

struct Pane FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PaneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PROPERTIES = 6,
    VT_QUAD = 8
  };
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *>(VT_PROPERTIES);
  }
  const Mega::Mesh *quad() const {
    return GetPointer<const Mega::Mesh *>(VT_QUAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           VerifyOffset(verifier, VT_QUAD) &&
           verifier.VerifyTable(quad()) &&
           verifier.EndTable();
  }
};

struct PaneBuilder {
  typedef Pane Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(Pane::VT_TYPE, type);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties) {
    fbb_.AddOffset(Pane::VT_PROPERTIES, properties);
  }
  void add_quad(::flatbuffers::Offset<Mega::Mesh> quad) {
    fbb_.AddOffset(Pane::VT_QUAD, quad);
  }
  explicit PaneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Pane> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Pane>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Pane> CreatePane(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties = 0,
    ::flatbuffers::Offset<Mega::Mesh> quad = 0) {
  PaneBuilder builder_(_fbb);
  builder_.add_quad(quad);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Pane> CreatePaneDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Properties>> *properties = nullptr,
    ::flatbuffers::Offset<Mega::Mesh> quad = 0) {
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Properties>>(*properties) : 0;
  return Mega::CreatePane(
      _fbb,
      type,
      properties__,
      quad);
}

struct WallSection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WallSectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PROPERTIES = 6,
    VT_MESH = 8
  };
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *>(VT_PROPERTIES);
  }
  const Mega::Mesh *mesh() const {
    return GetPointer<const Mega::Mesh *>(VT_MESH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           VerifyOffset(verifier, VT_MESH) &&
           verifier.VerifyTable(mesh()) &&
           verifier.EndTable();
  }
};

struct WallSectionBuilder {
  typedef WallSection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(WallSection::VT_TYPE, type);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties) {
    fbb_.AddOffset(WallSection::VT_PROPERTIES, properties);
  }
  void add_mesh(::flatbuffers::Offset<Mega::Mesh> mesh) {
    fbb_.AddOffset(WallSection::VT_MESH, mesh);
  }
  explicit WallSectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<WallSection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<WallSection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<WallSection> CreateWallSection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties = 0,
    ::flatbuffers::Offset<Mega::Mesh> mesh = 0) {
  WallSectionBuilder builder_(_fbb);
  builder_.add_mesh(mesh);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<WallSection> CreateWallSectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Properties>> *properties = nullptr,
    ::flatbuffers::Offset<Mega::Mesh> mesh = 0) {
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Properties>>(*properties) : 0;
  return Mega::CreateWallSection(
      _fbb,
      type,
      properties__,
      mesh);
}

struct Boundary FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoundaryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PROPERTIES = 6,
    VT_CONTOUR = 8,
    VT_HORI_HOLES = 10,
    VT_HORI_FLOORS = 12,
    VT_HORI_MIDS = 14,
    VT_HORI_CEILINGS = 16,
    VT_VERT_PANES = 18,
    VT_WALLS = 20
  };
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *>(VT_PROPERTIES);
  }
  const Mega::Polygon *contour() const {
    return GetPointer<const Mega::Polygon *>(VT_CONTOUR);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *hori_holes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_HORI_HOLES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *hori_floors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_HORI_FLOORS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *hori_mids() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_HORI_MIDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *hori_ceilings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_HORI_CEILINGS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Pane>> *vert_panes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Pane>> *>(VT_VERT_PANES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::WallSection>> *walls() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::WallSection>> *>(VT_WALLS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           VerifyOffset(verifier, VT_CONTOUR) &&
           verifier.VerifyTable(contour()) &&
           VerifyOffset(verifier, VT_HORI_HOLES) &&
           verifier.VerifyVector(hori_holes()) &&
           verifier.VerifyVectorOfTables(hori_holes()) &&
           VerifyOffset(verifier, VT_HORI_FLOORS) &&
           verifier.VerifyVector(hori_floors()) &&
           verifier.VerifyVectorOfTables(hori_floors()) &&
           VerifyOffset(verifier, VT_HORI_MIDS) &&
           verifier.VerifyVector(hori_mids()) &&
           verifier.VerifyVectorOfTables(hori_mids()) &&
           VerifyOffset(verifier, VT_HORI_CEILINGS) &&
           verifier.VerifyVector(hori_ceilings()) &&
           verifier.VerifyVectorOfTables(hori_ceilings()) &&
           VerifyOffset(verifier, VT_VERT_PANES) &&
           verifier.VerifyVector(vert_panes()) &&
           verifier.VerifyVectorOfTables(vert_panes()) &&
           VerifyOffset(verifier, VT_WALLS) &&
           verifier.VerifyVector(walls()) &&
           verifier.VerifyVectorOfTables(walls()) &&
           verifier.EndTable();
  }
};

struct BoundaryBuilder {
  typedef Boundary Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(Boundary::VT_TYPE, type);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties) {
    fbb_.AddOffset(Boundary::VT_PROPERTIES, properties);
  }
  void add_contour(::flatbuffers::Offset<Mega::Polygon> contour) {
    fbb_.AddOffset(Boundary::VT_CONTOUR, contour);
  }
  void add_hori_holes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_holes) {
    fbb_.AddOffset(Boundary::VT_HORI_HOLES, hori_holes);
  }
  void add_hori_floors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_floors) {
    fbb_.AddOffset(Boundary::VT_HORI_FLOORS, hori_floors);
  }
  void add_hori_mids(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_mids) {
    fbb_.AddOffset(Boundary::VT_HORI_MIDS, hori_mids);
  }
  void add_hori_ceilings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_ceilings) {
    fbb_.AddOffset(Boundary::VT_HORI_CEILINGS, hori_ceilings);
  }
  void add_vert_panes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Pane>>> vert_panes) {
    fbb_.AddOffset(Boundary::VT_VERT_PANES, vert_panes);
  }
  void add_walls(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::WallSection>>> walls) {
    fbb_.AddOffset(Boundary::VT_WALLS, walls);
  }
  explicit BoundaryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Boundary> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Boundary>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Boundary> CreateBoundary(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties = 0,
    ::flatbuffers::Offset<Mega::Polygon> contour = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_holes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_floors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_mids = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> hori_ceilings = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Pane>>> vert_panes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::WallSection>>> walls = 0) {
  BoundaryBuilder builder_(_fbb);
  builder_.add_walls(walls);
  builder_.add_vert_panes(vert_panes);
  builder_.add_hori_ceilings(hori_ceilings);
  builder_.add_hori_mids(hori_mids);
  builder_.add_hori_floors(hori_floors);
  builder_.add_hori_holes(hori_holes);
  builder_.add_contour(contour);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Boundary> CreateBoundaryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Properties>> *properties = nullptr,
    ::flatbuffers::Offset<Mega::Polygon> contour = 0,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *hori_holes = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *hori_floors = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *hori_mids = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *hori_ceilings = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Pane>> *vert_panes = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::WallSection>> *walls = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Properties>>(*properties) : 0;
  auto hori_holes__ = hori_holes ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*hori_holes) : 0;
  auto hori_floors__ = hori_floors ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*hori_floors) : 0;
  auto hori_mids__ = hori_mids ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*hori_mids) : 0;
  auto hori_ceilings__ = hori_ceilings ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*hori_ceilings) : 0;
  auto vert_panes__ = vert_panes ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Pane>>(*vert_panes) : 0;
  auto walls__ = walls ? _fbb.CreateVector<::flatbuffers::Offset<Mega::WallSection>>(*walls) : 0;
  return Mega::CreateBoundary(
      _fbb,
      type,
      properties__,
      contour,
      hori_holes__,
      hori_floors__,
      hori_mids__,
      hori_ceilings__,
      vert_panes__,
      walls__);
}

struct Floor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FloorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PROPERTIES = 6,
    VT_PARENT = 8,
    VT_CONTOUR = 10,
    VT_FLOOR = 12,
    VT_GROUND_ONE = 14,
    VT_GROUND_TWO = 16,
    VT_GROUND_THREE = 18,
    VT_GROUND_FOUR = 20
  };
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *>(VT_PROPERTIES);
  }
  const Mega::Area *parent() const {
    return GetPointer<const Mega::Area *>(VT_PARENT);
  }
  const Mega::Polygon *contour() const {
    return GetPointer<const Mega::Polygon *>(VT_CONTOUR);
  }
  const Mega::Mesh *floor() const {
    return GetPointer<const Mega::Mesh *>(VT_FLOOR);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *ground_one() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_GROUND_ONE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *ground_two() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_GROUND_TWO);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *ground_three() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_GROUND_THREE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *ground_four() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_GROUND_FOUR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           VerifyOffset(verifier, VT_PARENT) &&
           verifier.VerifyTable(parent()) &&
           VerifyOffset(verifier, VT_CONTOUR) &&
           verifier.VerifyTable(contour()) &&
           VerifyOffset(verifier, VT_FLOOR) &&
           verifier.VerifyTable(floor()) &&
           VerifyOffset(verifier, VT_GROUND_ONE) &&
           verifier.VerifyVector(ground_one()) &&
           verifier.VerifyVectorOfTables(ground_one()) &&
           VerifyOffset(verifier, VT_GROUND_TWO) &&
           verifier.VerifyVector(ground_two()) &&
           verifier.VerifyVectorOfTables(ground_two()) &&
           VerifyOffset(verifier, VT_GROUND_THREE) &&
           verifier.VerifyVector(ground_three()) &&
           verifier.VerifyVectorOfTables(ground_three()) &&
           VerifyOffset(verifier, VT_GROUND_FOUR) &&
           verifier.VerifyVector(ground_four()) &&
           verifier.VerifyVectorOfTables(ground_four()) &&
           verifier.EndTable();
  }
};

struct FloorBuilder {
  typedef Floor Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(Floor::VT_TYPE, type);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties) {
    fbb_.AddOffset(Floor::VT_PROPERTIES, properties);
  }
  void add_parent(::flatbuffers::Offset<Mega::Area> parent) {
    fbb_.AddOffset(Floor::VT_PARENT, parent);
  }
  void add_contour(::flatbuffers::Offset<Mega::Polygon> contour) {
    fbb_.AddOffset(Floor::VT_CONTOUR, contour);
  }
  void add_floor(::flatbuffers::Offset<Mega::Mesh> floor) {
    fbb_.AddOffset(Floor::VT_FLOOR, floor);
  }
  void add_ground_one(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_one) {
    fbb_.AddOffset(Floor::VT_GROUND_ONE, ground_one);
  }
  void add_ground_two(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_two) {
    fbb_.AddOffset(Floor::VT_GROUND_TWO, ground_two);
  }
  void add_ground_three(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_three) {
    fbb_.AddOffset(Floor::VT_GROUND_THREE, ground_three);
  }
  void add_ground_four(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_four) {
    fbb_.AddOffset(Floor::VT_GROUND_FOUR, ground_four);
  }
  explicit FloorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Floor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Floor>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Floor> CreateFloor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties = 0,
    ::flatbuffers::Offset<Mega::Area> parent = 0,
    ::flatbuffers::Offset<Mega::Polygon> contour = 0,
    ::flatbuffers::Offset<Mega::Mesh> floor = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_one = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_two = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_three = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> ground_four = 0) {
  FloorBuilder builder_(_fbb);
  builder_.add_ground_four(ground_four);
  builder_.add_ground_three(ground_three);
  builder_.add_ground_two(ground_two);
  builder_.add_ground_one(ground_one);
  builder_.add_floor(floor);
  builder_.add_contour(contour);
  builder_.add_parent(parent);
  builder_.add_properties(properties);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Floor> CreateFloorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Properties>> *properties = nullptr,
    ::flatbuffers::Offset<Mega::Area> parent = 0,
    ::flatbuffers::Offset<Mega::Polygon> contour = 0,
    ::flatbuffers::Offset<Mega::Mesh> floor = 0,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *ground_one = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *ground_two = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *ground_three = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *ground_four = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Properties>>(*properties) : 0;
  auto ground_one__ = ground_one ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*ground_one) : 0;
  auto ground_two__ = ground_two ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*ground_two) : 0;
  auto ground_three__ = ground_three ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*ground_three) : 0;
  auto ground_four__ = ground_four ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*ground_four) : 0;
  return Mega::CreateFloor(
      _fbb,
      type,
      properties__,
      parent,
      contour,
      floor,
      ground_one__,
      ground_two__,
      ground_three__,
      ground_four__);
}

struct Object FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PARENT = 6,
    VT_CHILDREN = 8,
    VT_PROPERTIES = 10
  };
  const Mega::Type *type() const {
    return GetStruct<const Mega::Type *>(VT_TYPE);
  }
  const Mega::Floor *parent() const {
    return GetPointer<const Mega::Floor *>(VT_PARENT);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Object>> *children() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Object>> *>(VT_CHILDREN);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>> *>(VT_PROPERTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Mega::Type>(verifier, VT_TYPE, 2) &&
           VerifyOffset(verifier, VT_PARENT) &&
           verifier.VerifyTable(parent()) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.VerifyVectorOfTables(children()) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(const Mega::Type *type) {
    fbb_.AddStruct(Object::VT_TYPE, type);
  }
  void add_parent(::flatbuffers::Offset<Mega::Floor> parent) {
    fbb_.AddOffset(Object::VT_PARENT, parent);
  }
  void add_children(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Object>>> children) {
    fbb_.AddOffset(Object::VT_CHILDREN, children);
  }
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties) {
    fbb_.AddOffset(Object::VT_PROPERTIES, properties);
  }
  explicit ObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Object> CreateObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    ::flatbuffers::Offset<Mega::Floor> parent = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Object>>> children = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Properties>>> properties = 0) {
  ObjectBuilder builder_(_fbb);
  builder_.add_properties(properties);
  builder_.add_children(children);
  builder_.add_parent(parent);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Object> CreateObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const Mega::Type *type = nullptr,
    ::flatbuffers::Offset<Mega::Floor> parent = 0,
    const std::vector<::flatbuffers::Offset<Mega::Object>> *children = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Properties>> *properties = nullptr) {
  auto children__ = children ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Object>>(*children) : 0;
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Properties>>(*properties) : 0;
  return Mega::CreateObject(
      _fbb,
      type,
      parent,
      children__,
      properties__);
}

struct Lane FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LaneBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WALLS = 4,
    VT_FLOORS = 6,
    VT_ROOFS = 8
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *walls() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_WALLS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *floors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_FLOORS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *roofs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>> *>(VT_ROOFS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WALLS) &&
           verifier.VerifyVector(walls()) &&
           verifier.VerifyVectorOfTables(walls()) &&
           VerifyOffset(verifier, VT_FLOORS) &&
           verifier.VerifyVector(floors()) &&
           verifier.VerifyVectorOfTables(floors()) &&
           VerifyOffset(verifier, VT_ROOFS) &&
           verifier.VerifyVector(roofs()) &&
           verifier.VerifyVectorOfTables(roofs()) &&
           verifier.EndTable();
  }
};

struct LaneBuilder {
  typedef Lane Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_walls(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> walls) {
    fbb_.AddOffset(Lane::VT_WALLS, walls);
  }
  void add_floors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> floors) {
    fbb_.AddOffset(Lane::VT_FLOORS, floors);
  }
  void add_roofs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> roofs) {
    fbb_.AddOffset(Lane::VT_ROOFS, roofs);
  }
  explicit LaneBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Lane> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Lane>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Lane> CreateLane(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> walls = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> floors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Mesh>>> roofs = 0) {
  LaneBuilder builder_(_fbb);
  builder_.add_roofs(roofs);
  builder_.add_floors(floors);
  builder_.add_walls(walls);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Lane> CreateLaneDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *walls = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *floors = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Mesh>> *roofs = nullptr) {
  auto walls__ = walls ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*walls) : 0;
  auto floors__ = floors ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*floors) : 0;
  auto roofs__ = roofs ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Mesh>>(*roofs) : 0;
  return Mega::CreateLane(
      _fbb,
      walls__,
      floors__,
      roofs__);
}

struct Map FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CONTOUR = 4,
    VT_ROOT_AREA = 6,
    VT_FLOORS = 8,
    VT_BOUNDARIES = 10,
    VT_LANE_NETWORK_EXTERIOR = 12,
    VT_LANE_NETWORK_INTERIOR = 14,
    VT_LANE_LARGE_TRACK = 16,
    VT_LANE_SMALL_TRACK = 18,
    VT_LANE_SYSTEMS = 20
  };
  const Mega::Polygon *contour() const {
    return GetPointer<const Mega::Polygon *>(VT_CONTOUR);
  }
  const Mega::Area *root_area() const {
    return GetPointer<const Mega::Area *>(VT_ROOT_AREA);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Floor>> *floors() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Floor>> *>(VT_FLOORS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Boundary>> *boundaries() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Mega::Boundary>> *>(VT_BOUNDARIES);
  }
  const Mega::Lane *lane_network_exterior() const {
    return GetPointer<const Mega::Lane *>(VT_LANE_NETWORK_EXTERIOR);
  }
  const Mega::Lane *lane_network_interior() const {
    return GetPointer<const Mega::Lane *>(VT_LANE_NETWORK_INTERIOR);
  }
  const Mega::Lane *lane_large_track() const {
    return GetPointer<const Mega::Lane *>(VT_LANE_LARGE_TRACK);
  }
  const Mega::Lane *lane_small_track() const {
    return GetPointer<const Mega::Lane *>(VT_LANE_SMALL_TRACK);
  }
  const Mega::Lane *lane_systems() const {
    return GetPointer<const Mega::Lane *>(VT_LANE_SYSTEMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CONTOUR) &&
           verifier.VerifyTable(contour()) &&
           VerifyOffset(verifier, VT_ROOT_AREA) &&
           verifier.VerifyTable(root_area()) &&
           VerifyOffset(verifier, VT_FLOORS) &&
           verifier.VerifyVector(floors()) &&
           verifier.VerifyVectorOfTables(floors()) &&
           VerifyOffset(verifier, VT_BOUNDARIES) &&
           verifier.VerifyVector(boundaries()) &&
           verifier.VerifyVectorOfTables(boundaries()) &&
           VerifyOffset(verifier, VT_LANE_NETWORK_EXTERIOR) &&
           verifier.VerifyTable(lane_network_exterior()) &&
           VerifyOffset(verifier, VT_LANE_NETWORK_INTERIOR) &&
           verifier.VerifyTable(lane_network_interior()) &&
           VerifyOffset(verifier, VT_LANE_LARGE_TRACK) &&
           verifier.VerifyTable(lane_large_track()) &&
           VerifyOffset(verifier, VT_LANE_SMALL_TRACK) &&
           verifier.VerifyTable(lane_small_track()) &&
           VerifyOffset(verifier, VT_LANE_SYSTEMS) &&
           verifier.VerifyTable(lane_systems()) &&
           verifier.EndTable();
  }
};

struct MapBuilder {
  typedef Map Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_contour(::flatbuffers::Offset<Mega::Polygon> contour) {
    fbb_.AddOffset(Map::VT_CONTOUR, contour);
  }
  void add_root_area(::flatbuffers::Offset<Mega::Area> root_area) {
    fbb_.AddOffset(Map::VT_ROOT_AREA, root_area);
  }
  void add_floors(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Floor>>> floors) {
    fbb_.AddOffset(Map::VT_FLOORS, floors);
  }
  void add_boundaries(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Boundary>>> boundaries) {
    fbb_.AddOffset(Map::VT_BOUNDARIES, boundaries);
  }
  void add_lane_network_exterior(::flatbuffers::Offset<Mega::Lane> lane_network_exterior) {
    fbb_.AddOffset(Map::VT_LANE_NETWORK_EXTERIOR, lane_network_exterior);
  }
  void add_lane_network_interior(::flatbuffers::Offset<Mega::Lane> lane_network_interior) {
    fbb_.AddOffset(Map::VT_LANE_NETWORK_INTERIOR, lane_network_interior);
  }
  void add_lane_large_track(::flatbuffers::Offset<Mega::Lane> lane_large_track) {
    fbb_.AddOffset(Map::VT_LANE_LARGE_TRACK, lane_large_track);
  }
  void add_lane_small_track(::flatbuffers::Offset<Mega::Lane> lane_small_track) {
    fbb_.AddOffset(Map::VT_LANE_SMALL_TRACK, lane_small_track);
  }
  void add_lane_systems(::flatbuffers::Offset<Mega::Lane> lane_systems) {
    fbb_.AddOffset(Map::VT_LANE_SYSTEMS, lane_systems);
  }
  explicit MapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Map> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Map>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Map> CreateMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Mega::Polygon> contour = 0,
    ::flatbuffers::Offset<Mega::Area> root_area = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Floor>>> floors = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Mega::Boundary>>> boundaries = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_network_exterior = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_network_interior = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_large_track = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_small_track = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_systems = 0) {
  MapBuilder builder_(_fbb);
  builder_.add_lane_systems(lane_systems);
  builder_.add_lane_small_track(lane_small_track);
  builder_.add_lane_large_track(lane_large_track);
  builder_.add_lane_network_interior(lane_network_interior);
  builder_.add_lane_network_exterior(lane_network_exterior);
  builder_.add_boundaries(boundaries);
  builder_.add_floors(floors);
  builder_.add_root_area(root_area);
  builder_.add_contour(contour);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Map> CreateMapDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<Mega::Polygon> contour = 0,
    ::flatbuffers::Offset<Mega::Area> root_area = 0,
    const std::vector<::flatbuffers::Offset<Mega::Floor>> *floors = nullptr,
    const std::vector<::flatbuffers::Offset<Mega::Boundary>> *boundaries = nullptr,
    ::flatbuffers::Offset<Mega::Lane> lane_network_exterior = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_network_interior = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_large_track = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_small_track = 0,
    ::flatbuffers::Offset<Mega::Lane> lane_systems = 0) {
  auto floors__ = floors ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Floor>>(*floors) : 0;
  auto boundaries__ = boundaries ? _fbb.CreateVector<::flatbuffers::Offset<Mega::Boundary>>(*boundaries) : 0;
  return Mega::CreateMap(
      _fbb,
      contour,
      root_area,
      floors__,
      boundaries__,
      lane_network_exterior,
      lane_network_interior,
      lane_large_track,
      lane_small_track,
      lane_systems);
}

inline bool VerifyVariant(::flatbuffers::Verifier &verifier, const void *obj, Variant type) {
  switch (type) {
    case Variant_NONE: {
      return true;
    }
    case Variant_FloatProperty: {
      auto ptr = reinterpret_cast<const Mega::FloatProperty *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Variant_LongProperty: {
      auto ptr = reinterpret_cast<const Mega::LongProperty *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Variant_StringProperty: {
      auto ptr = reinterpret_cast<const Mega::StringProperty *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Variant_F2Property: {
      auto ptr = reinterpret_cast<const Mega::F2Property *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Variant_F3Property: {
      auto ptr = reinterpret_cast<const Mega::F3Property *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Variant_F4Property: {
      auto ptr = reinterpret_cast<const Mega::F4Property *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Variant_QuatProperty: {
      auto ptr = reinterpret_cast<const Mega::QuatProperty *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Variant_F33Property: {
      auto ptr = reinterpret_cast<const Mega::F33Property *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyVariantVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyVariant(
        verifier,  values->Get(i), types->GetEnum<Variant>(i))) {
      return false;
    }
  }
  return true;
}

inline const Mega::Map *GetMap(const void *buf) {
  return ::flatbuffers::GetRoot<Mega::Map>(buf);
}

inline const Mega::Map *GetSizePrefixedMap(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Mega::Map>(buf);
}

inline const char *MapIdentifier() {
  return "MEGA";
}

inline bool MapBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MapIdentifier());
}

inline bool SizePrefixedMapBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MapIdentifier(), true);
}

inline bool VerifyMapBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Mega::Map>(MapIdentifier());
}

inline bool VerifySizePrefixedMapBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Mega::Map>(MapIdentifier());
}

inline const char *MapExtension() {
  return "map";
}

inline void FinishMapBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mega::Map> root) {
  fbb.Finish(root, MapIdentifier());
}

inline void FinishSizePrefixedMapBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Mega::Map> root) {
  fbb.FinishSizePrefixed(root, MapIdentifier());
}

}  // namespace Mega

#endif  // FLATBUFFERS_GENERATED_FORMAT_MEGA_H_
