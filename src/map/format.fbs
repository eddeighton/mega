
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.
//
//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.
//
//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

namespace Mega;

// Indicate intention to use this flat buffer schema as file type
file_identifier "MEGA";

// Set the default extension to .map
file_extension "map";

struct Type
{
    mangle:short;
}

// Type name table - map all full type names to type id mangle used within map file
table TypeName
{
    name:string;
    type:Type;
}

// Value Types
struct F2
{
    x:float;
    y:float;
}

struct F3
{
    x:float;
    y:float;
    z:float;
}

struct F4
{
    x:float;
    y:float;
    z:float;
    w:float;
}

struct Quat
{
    x:float;
    y:float;
    z:float;
    w:float;
}

struct F33
{
    m:[F3:3];
}

// Vertices
table Vertex
{
    position:F2;
}

table Polygon
{
    vertices:[Vertex];
}

enum Plane : short
{
    eHole,
    eGround,
    eMid,
    eCeiling
}

table Vertex3D
{
    vertex:Vertex;
    plane:Plane;
    normal:F3;
    uv:F2;
    tangent:F4;
}

table Mesh
{
    vertices:[Vertex3D];
    indices:[int];
}

// Property Types
table FloatProperty
{
    value:float;
}
table LongProperty
{
    value:long;
}
table StringProperty
{
    value:string;
}
table F2Property
{
    value:F2;
}
table F3Property
{
    value:F3;
}
table F4Property
{
    value:F4;
}
table QuatProperty
{
    value:Quat;
}
table F33Property
{
    value:F33;
}

union Variant
{
    FloatProperty,
    LongProperty,
    StringProperty,
    F2Property,
    F3Property,
    F4Property,
    QuatProperty,
    F33Property
}

// Data Tables
table Properties
{
    type:Type;
    variant:Variant;
}

table Area
{
    type:Type;
    properties:[Properties];
    areas:[Area];
}

table Pane
{
    type:Type;
    properties:[Properties];
    quad:Mesh;
}

table WallSection
{
    type:Type;
    properties:[Properties];
    mesh:Mesh;
}

table Boundary
{
    type:Type;
    properties:[Properties];
    contour:Polygon;

    hori_holes:[Mesh];
    hori_floors:[Mesh];
    hori_mids:[Mesh];
    hori_ceilings:[Mesh];

    vert_panes:[Pane];

    walls:[WallSection];
}

table Object
{
    type:Type;
    children:[Object];
    properties:[Properties];
}

table Room
{
    type:Type;
    properties:[Properties];
    parent:Area;
    contour:Polygon;

    floors:[Mesh];
    pavements:[Mesh];
    linings:[Mesh];

    objects:[Object];
}

table Lane
{
    walls:[Mesh];
    floors:[Mesh];
    roofs:[Mesh];
}

table Map
{
    contour:Polygon;
    root_area:Area;
    rooms:[Room];
    boundaries:[Boundary];

    lane_network_exterior:Lane;
    lane_network_interior:Lane;
    lane_large_track:Lane;
    lane_small_track:Lane;
    lane_systems:Lane;
}

root_type Map;