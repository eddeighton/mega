//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


// C++ SSA Header


#ifndef SSA_GEN_25_JULY_2022
#define SSA_GEN_25_JULY_2022

#include "ssa.hpp"

//#include <vulkan/vulkan.hpp>
//#include <vulkan/vulkan_handles.hpp>
//#include <vulkan/vulkan_structs.hpp>
//#include <vulkan/vulkan_format_traits.hpp>

#include "/workspace/root/thirdparty/vulkansdk/1.3.204.0/x86_64/include/vulkan/vulkan.hpp"
#include "/workspace/root/thirdparty/vulkansdk/1.3.204.0/x86_64/include/vulkan/vulkan_handles.hpp"
#include "/workspace/root/thirdparty/vulkansdk/1.3.204.0/x86_64/include/vulkan/vulkan_structs.hpp"

namespace ssa
{

template < typename T >
struct structureChainTraits
{
    static_assert( false && typeid( T ).name(), "Invalid structure chain: " );
};

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// chain struct traits
{% for chainTrait in chainTraits %}
template <>
struct structureChainTraits< Chain< {% for type in chainTrait.types %}{{type}}{% if not loop.is_last %}, {%endif%}{% endfor %} > >
{
    static constexpr uint32_t ID = {{ chainTrait.id }};
};
{% endfor %}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// commands
{% for command in commands %}
{% if command.param_count > 0 %}
template
<
{% for result in command.results %}
    typename TResult{{result.index}} = {{result.type}},
{% endfor %}
{% for param in command.params %}
    template< typename T{{param.index}} > class W{{param.index}},
{% endfor %}
{% for param in command.params %}
{% if param.is_type_chain %}
    typename T{{param.index}},
    std::enable_if_t< check_param< {{param.type}}, typename chain_head< T{{param.index}} >::Type >::value, bool > = true,
{% endif %}
{% endfor %}
{% for result in command.results %}
{% if result.is_type_chain %}
    typename T{{result.index}},
    std::enable_if_t< check_param< {{result.type}}, typename chain_head< T{{result.index}} >::Type >::value, bool > = true,
{% endif %}
{% endfor %}
    typename TDummy = void
>
{% endif %}
inline {{ command.result_type }}
{{ command.name }}
(
{% for param in command.params %}
    const W{{param.index}}<{% if param.is_type_chain %}T{{param.index}}{% else %}{{param.type}}{% endif %} >& {{ param.name }}{% if not loop.is_last %}, {%endif%}

{% endfor %}
)
{
    typename Command::Ptr pCommand = Allocator::get().make_command();
    pCommand->id = {{ command.typeid }};
{% for param in command.params %}
{% if param.optional %}
    pCommand->parameters.push_back( get_param_optional( {{ param.name }} ) );
{% else %}
    pCommand->parameters.push_back( get_param( {{ param.name }} ) );
{% endif %}
{% endfor %}
{% for result in command.results %}
    Lazy< TResult{{result.index}} > {{ result.name }}{ Allocator::get().make< TResult{{result.index}} >() };
    pCommand->results.push_back( get_param( {{ result.name }} ) );
{% endfor %}
    return std::make_tuple( {{ command.main_result }}{ pCommand }{% for result in command.results %}, {{ result.name }}{% endfor %} );
}

{% endfor %}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// non chain constructors
{% for nonChainCtor in nonChainCtors %}
{% if nonChainCtor.param_count > 0 %}
template
<
{% for param in nonChainCtor.params %}
    template< typename T{{param.index}} > class W{{param.index}},
{% endfor %}
{% for param in nonChainCtor.params %}
{% if param.is_type_chain %}
    typename T{{param.index}},
    std::enable_if_t< check_param< {{param.type}}, typename chain_head< T{{param.index}} >::Type >::value, bool > = true,
{% endif %}
{% endfor %}
    typename Dummy = void
>
{% endif %}
inline Lazy< {{ nonChainCtor.type }} >
{{ nonChainCtor.name }}
(
{% for param in nonChainCtor.params %}
    const W{{param.index}}<{% if param.is_type_chain %}T{{param.index}}{% else %}{{param.type}}{% endif %} >& {{ param.name }}{% if not loop.is_last %}, {%endif%}

{% endfor %}
)
{
    typename Value< {{ nonChainCtor.type }} >::Ptr pValue = Allocator::get().make< {{ nonChainCtor.type }} >();
    pValue->id = {{ nonChainCtor.typeid }};
{% for param in nonChainCtor.params %}
{% if param.optional %}
    pValue->parameters.push_back( get_param_optional( {{ param.name }} ) );
{% else %}
    pValue->parameters.push_back( get_param( {{ param.name }} ) );
{% endif %}
{% endfor %}
    return Lazy< {{ nonChainCtor.type }} >{ pValue };
}
{% endfor %}

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
// chaining structure constructors
{% for chainCtor in chainCtors %}

// no chain tail overload
{% if chainCtor.param_count > 1 %}
template
<
{% for param in chainCtor.params %}
{% if not param.is_chain_tail %}
    template< typename T{{param.index}} > class W{{param.index}},
{% endif %}
{% endfor %}
{% for param in chainCtor.params %}
{% if param.is_type_chain %}
    typename T{{param.index}},
    std::enable_if_t< check_param< {{param.type}}, typename chain_head< T{{param.index}} >::Type >::value, bool > = true,
{% endif %}
{% endfor %}
    typename Dummy = void
>
{% endif %}
inline Lazy< {{ chainCtor.type }} >
{{ chainCtor.name }}
(
{% for param in chainCtor.params %}
{% if not param.is_chain_tail %}
    const W{{param.index}}<{% if param.is_type_chain %}T{{param.index}}{% else %}{{param.type}}{% endif %} >& {{ param.name }}{% if not loop.is_last %}, {%endif%}

{% endif %}
{% endfor %}
)
{
    typename Value< {{ chainCtor.type }} >::Ptr pValue = Allocator::get().make< {{ chainCtor.type }} >();
    pValue->id = structureChainTraits< typename make_chain< Chain< {{ chainCtor.type }} > >::Type >::ID;
{% for param in chainCtor.params %}
{% if not param.is_chain_tail %}
{% if param.optional %}
    pValue->parameters.push_back( get_param_optional( {{ param.name }} ) );
{% else %}
    pValue->parameters.push_back( get_param( {{ param.name }} ) );
{% endif %}
{% endif %}
{% endfor %}
    return Lazy< {{ chainCtor.type }} >{ pValue };
}

// chain tail overload
template
<
{% for param in chainCtor.params %}
    template< typename T{{param.index}} > class W{{param.index}},
{% if param.is_chain_tail %}
    typename TChainTail,
{% endif%}
{% endfor %}
{% for param in chainCtor.params %}
{% if param.is_type_chain %}
    typename T{{param.index}},
    std::enable_if_t< check_param< {{param.type}}, typename chain_head< T{{param.index}} >::Type >::value, bool > = true,
{% endif %}
{% endfor %}
    typename Dummy = void
>
inline Lazy< typename make_chain< Chain< {{ chainCtor.type }}, TChainTail > >::Type >
{{ chainCtor.name }}
(
{% for param in chainCtor.params %}
    const W{{param.index}}<{% if param.is_type_chain %}T{{param.index}}{% else %}{{param.type}}{% endif %} >& {{ param.name }}{% if not loop.is_last %}, {%endif%}

{% endfor %}
)
{
    using TChain = typename make_chain< Chain< {{ chainCtor.type }}, TChainTail > >::Type;
    typename TChain::Ptr pValue = Allocator::get().make< TChain >();
    pValue->id = structureChainTraits< TChain >::ID;
{% for param in chainCtor.params %}
{% if param.optional %}
    pValue->parameters.push_back( get_param_optional( {{ param.name }} ) );
{% else %}
    pValue->parameters.push_back( get_param( {{ param.name }} ) );
{% endif %}
{% endfor %}
    return Lazy< TChain >{ pValue };
}

{% endfor %}


}

#endif //SSA_GEN_25_JULY_2022


