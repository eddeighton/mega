//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "mega/relation_id.hpp"
#include "service/protocol/common/mpo_context_interface.hpp" 
#include "jit/object_functions.hxx"
#include "jit/relation_functions.hxx"
#include "jit/jit_exception.hpp"

namespace mega::mangle
{
{% for event in events %}
    void load_record_{{event}}(void*,void*,mega::U64);
    void save_record_{{event}}(const reference&,const void*);
{% endfor %}

    mega::TypeID iterator_object_typeid( void* );
}

void object_save_bin( mega::TypeID objectTypeID, void* pData, void* pSerialiser )
{
    switch( objectTypeID.getSymbolID() )
    {
{% for type in object_types %}
        case {{ type }}:
        {
            static thread_local mega::runtime::object::ObjectSaveBin objectSaveBin( "simulation", mega::TypeID{ {{ type }} } );
            objectSaveBin( pData, pSerialiser );
        }
        break;
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown type in object_save_bin" };
        }
        break;
    }
}

void object_load_bin( mega::TypeID objectTypeID, void* pData, void* pSerialiser )
{
    switch( objectTypeID.getSymbolID() )
    {
{% for type in object_types %}
        case {{ type }}:
        {
            static thread_local mega::runtime::object::ObjectLoadBin objectLoadBin( "simulation", mega::TypeID{ {{ type }} } );
            objectLoadBin( pData, pSerialiser );
        }
        break;
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown type in object_load_bin" };
        }
        break;
    }
}

void record_load_bin( mega::reference ref, void* pData, mega::U64 size )
{
    if( ref.isNetworkAddress() )
    {
        mega::runtime::networkToHeap( ref );
    }

    switch( ref.getType().getSymbolID() )
    {
{% for type in dimension_types %}
        case {{ type.type_id }}:
        {
            void* pTarget = 
                reinterpret_cast< char* >( ref.getHeap() )
                + {{ type.part_offset }} + ( {{ type.part_size }} * ref.getInstance() ) 
                + {{ type.dimension_offset }};
            mega::mangle::load_record_{{ type.mangled_type_name }}( pTarget, pData, size );
            mega::mangle::save_record_{{ type.mangled_type_name }}( ref, pTarget );
        }
        break;
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown type in object_load_bin" };
        }
        break;
    }
}

mega::TypeID concrete_to_interface( mega::TypeID concreteTypeID )
{
    switch( concreteTypeID.getSymbolID() )
    {
{% for type in concrete_types %}
        case {{ type.concrete }}: return mega::TypeID( {{ type.interface }} );
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown concrete type id" };
        }
        break;
    }
}

mega::TypeID concrete_to_link_interface( mega::TypeID concreteTypeID )
{
    switch( concreteTypeID.getSymbolID() )
    {
{% for type in concrete_link_types %}
        case {{ type.concrete }}: return mega::TypeID( {{ type.interface }} );
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown concrete type id" };
        }
        break;
    }
}

void record_make( mega::reference source, mega::reference target )
{
    const mega::RelationID relationID{ 
        concrete_to_link_interface( source.getType() ), 
        concrete_to_link_interface( target.getType() ) };

    switch( relationID.getID() )
    {
{% for relation in relation_types %}
        case {{ relation.id }}:
        {
            static thread_local mega::runtime::relation::LinkMake 
                linkMake( "simulation", mega::RelationID( 
                    mega::TypeID( {{ relation.lower }} ), 
                    mega::TypeID( {{ relation.upper }} ) ) );
            linkMake( source, target );
        }
        break;
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown relationID" };
        }
        break;
    }
}

void record_break( mega::reference source, mega::reference target )
{
    const mega::RelationID relationID{ 
        concrete_to_link_interface( source.getType() ), 
        concrete_to_link_interface( target.getType() ) };

    switch( relationID.getID() )
    {
{% for relation in relation_types %}
        case {{ relation.id }}:
        {
            static thread_local mega::runtime::relation::LinkBreak 
                linkBreak( "simulation", mega::RelationID( 
                    mega::TypeID( {{ relation.lower }} ), 
                    mega::TypeID( {{ relation.upper }} ) ) );
            linkBreak( source, target );
        }
        break;
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown relationID" };
        }
        break;
    }
}

void traverse( void* pIterator )
{
    switch( mega::mangle::iterator_object_typeid( pIterator ).getObjectID() )
    {
{% for type in object_types %}
        case {{ type }}:
        {
            static thread_local mega::runtime::object::ObjectTraverse objectTraverse( "simulation", mega::TypeID{ {{ type }} } );
            objectTraverse( pIterator );
        }
{% endfor %}
        default:
        {
            throw mega::runtime::JITException{ "Unknown concrete type id" };
        }
        break;
    }
}