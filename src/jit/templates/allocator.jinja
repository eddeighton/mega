//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "service/protocol/common/mpo_context_interface.hpp" 
#include "jit/object_functions.hxx"

static const char* g_pszModuleName = "object_{{ objectTypeID }}";

namespace mega::mangle
{
    void xml_begin_object_structure( const mega::reference&, void* );
    void xml_end_object_structure( const mega::reference&, void* );
    void xml_begin_part( const mega::reference&, const char*, void* );
    void xml_end_part( const mega::reference&, const char*, void* );
    void xml_begin_object( const mega::reference&, const char*, void* );
    void xml_end_object( const mega::reference&, const char*, void* );

    mega::U64 ref_vector_get_size( void* );
    mega::reference& ref_vector_get_at( void*, mega::U64 );

{% for type in mangled_data_types %}
    void new_{{type}}(void*);
    void delete_{{type}}(void*);
    void save_xml_{{type}}(void*,const char*,void*);
    void load_xml_{{type}}(void*,const char*,void*);
    void save_bin_{{type}}(void*,void*);
    void load_bin_{{type}}(void*,void*);
{% endfor %}
}

void ctor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::mangle::new_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
{% for member in part.links %}
        mega::mangle::new_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void dtor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::mangle::delete_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
{% for member in part.links %}
        mega::mangle::delete_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void save_object_bin_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::mangle::save_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser ); // {{ member.type }} {{ member.name }}
{% endfor %}
{% for member in part.links %}
        mega::mangle::save_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void load_object_bin_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::mangle::load_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser ); // {{ member.type }} {{ member.name }}
{% endfor %}
{% for member in part.links %}
        mega::mangle::load_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void save_object_xml_structure_{{ objectTypeID }}( mega::reference ref, void* pSerialiser )
{
    mega::mangle::xml_begin_object_structure( ref, pSerialiser );

    char* pBuffer = reinterpret_cast< char* >( ref.getHeap() );

{% for element in elements %}
{% if element.is_part_begin %}
    // {{ element.name }}
    for( mega::U64 {{ element.iter }} = {{ element.start }}; {{ element.iter }} != {{ element.end }}; ++{{ element.iter }} )
    {
{% else if element.is_part_end %}
    }
{% else if element.owning %}
{% if element.singular %}
    {
        mega::reference& linkRef = *reinterpret_cast< mega::reference* >( pBuffer + {{ element.offset }} );
        if( linkRef.is_valid() )
        {
            switch( linkRef.getType() )
            {
{% for type in element.types %}
                case {{ type.link_type_id }}:
                {
                    static thread_local mega::runtime::object::ObjectSaveXMLStructure function( g_pszModuleName, {{ type.object_type_id }} );
                    function( mega::reference::make( linkRef, {{ type.object_type_id }} ), pSerialiser );
                }
                break;
{% endfor %}
            }
        }
    }
{% else %}
    {
        char* pLinkData = pBuffer + {{ element.offset }};
        for( mega::U64 i = 0U, iCount = mega::mangle::ref_vector_get_size( pLinkData ); i != iCount; ++i )
        {
            mega::reference& linkRef = mega::mangle::ref_vector_get_at( pLinkData, i );
            if( linkRef.is_valid() )
            {
                switch( linkRef.getType() )
                {
{% for type in element.types %}
                    case {{ type.link_type_id }}:
                    {
                        static thread_local mega::runtime::object::ObjectSaveXMLStructure function( g_pszModuleName, {{ type.object_type_id }} );
                        function( mega::reference::make( linkRef, {{ type.object_type_id }} ), pSerialiser );
                    }
                    break;
{% endfor %}
                }
            }
        }
    }
{% endif %}
{% endif %}
{% endfor %}

    mega::mangle::xml_end_object_structure( ref, pSerialiser );
}

void load_object_xml_structure_{{ objectTypeID }}( mega::reference ref, void* pSerialiser )
{


}

void save_object_xml_{{ objectTypeID }}( mega::reference ref, void* pSerialiser )
{
    char* pBuffer = reinterpret_cast< char* >( ref.getHeap() );

{% for element in elements %}
{% if element.is_part_begin %}
    for( mega::U64 {{ element.iter }} = {{ element.start }}; {{ element.iter }} != {{ element.end }}; ++{{ element.iter }} )
    {
        mega::mangle::xml_begin_part( ref, "{{element.name}}", pSerialiser );
{% else if element.is_part_end %}
        mega::mangle::xml_end_part( ref, "{{element.name}}", pSerialiser );
    }
{% else if element.owning %}
    mega::mangle::xml_begin_part( ref, "{{element.name}}", pSerialiser );
{% if element.singular %}
    {
        mega::reference& linkRef = *reinterpret_cast< mega::reference* >( pBuffer + {{ element.offset }} );
        if( linkRef.is_valid() )
        {
            switch( linkRef.getType() )
            {
{% for type in element.types %}
                case {{ type.link_type_id }}:
                {
                    static thread_local mega::runtime::object::ObjectSaveXML function( g_pszModuleName, {{ type.object_type_id }} );
                    function( mega::reference::make( linkRef, {{ type.object_type_id }} ), pSerialiser );
                }
                break;
{% endfor %}
            }
        }
    }
{% else %}
    {
        char* pLinkData = pBuffer + {{ element.offset }};
        for( mega::U64 i = 0U, iCount = mega::mangle::ref_vector_get_size( pLinkData ); i != iCount; ++i )
        {
            mega::reference& linkRef = mega::mangle::ref_vector_get_at( pLinkData, i );
            if( linkRef.is_valid() )
            {
                switch( linkRef.getType() )
                {
{% for type in element.types %}
                    case {{ type.link_type_id }}:
                    {
                        static thread_local mega::runtime::object::ObjectSaveXML function( g_pszModuleName, {{ type.object_type_id }} );
                        function( mega::reference::make( linkRef, {{ type.object_type_id }} ), pSerialiser );
                    }
                    break;
{% endfor %}
                }
            }
        }
    }
{% endif %}
    mega::mangle::xml_end_part( ref, "{{element.name}}", pSerialiser );
{% else %}
    mega::mangle::save_xml_{{element.mangle}}( pBuffer + {{ element.offset }}, "{{ element.name }}", pSerialiser ); // {{ element.type }} 
{% endif %}
{% endfor %}
}

void load_object_xml_{{ objectTypeID }}( mega::reference ref, void* pSerialiser )
{
}
