//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "mega/any.hpp"
#include "service/protocol/common/mpo_context_interface.hpp" 
#include "jit/object_functions.hxx"
#include "jit/relation_functions.hxx"
#include "jit/jit_exception.hpp"

static const char* g_pszModuleName = "object_{{ objectTypeID }}";

namespace mega::mangle
{
{% for type in mangled_data_types %}
    void new_{{type}}(void*);
    void delete_{{type}}(void*);
    void save_bin_{{type}}(void*,void*);
    void load_bin_{{type}}(void*,void*);
    Any read_any_{{type}}(void*);
    void write_any_{{type}}(void*,Any);
{% endfor %}

    mega::TypeID iterator_state( void* );
    void iterator_object_start( void*, const char* pszType, mega::TypeID );
    void iterator_object_end( void*, const char* pszType );
    void iterator_component_start( void*, const char* pszType, mega::TypeID, mega::Instance );
    void iterator_component_end( void*, const char* pszType, mega::TypeID );
    void iterator_action_start( void*, const char* pszType, mega::TypeID, mega::Instance );
    void iterator_action_end( void*, const char* pszType, mega::TypeID );
    void iterator_state_start( void*, const char* pszType, mega::TypeID, mega::Instance );
    void iterator_state_end( void*, const char* pszType, mega::TypeID );
    void iterator_event_start( void*, const char* pszType, mega::TypeID, mega::Instance );
    void iterator_event_end( void*, const char* pszType, mega::TypeID );
    void iterator_link_start( void*, const char* pszType, mega::TypeID, bool bOwning, bool bOwned );
    void iterator_link_end( void*, const char* pszType, mega::TypeID, bool bOwning, bool bOwned );
    void iterator_interupt_start( void*, const char* pszType, mega::TypeID );
    void iterator_interupt_end( void*, const char* pszType, mega::TypeID );
    void iterator_function_start( void*, const char* pszType, mega::TypeID );
    void iterator_function_end( void*, const char* pszType, mega::TypeID );
    void iterator_namespace_start( void*, const char* pszType, mega::TypeID );
    void iterator_namespace_end( void*, const char* pszType, mega::TypeID );
    void iterator_dimension( void*, const char* pszType, mega::TypeID );
}

void ctor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::mangle::new_{{member.mangle}}( pIter + {{ member.offset }} );
{% endfor %}
{% for member in part.links %}
        mega::mangle::new_{{member.mangle}}( pIter + {{ member.offset }} );
        mega::mangle::new_{{member.link_type_mangle}}( pIter + {{ member.link_type_offset }} );
{% endfor %}
    }
{% endfor %}
}

void dtor_{{ objectTypeID }}( mega::reference ref, void* pBuffer, bool bLinkReset )
{
{% for part in parts %}
{
    mega::Instance instance = 0;
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }}, ++instance )
    {
{% for member in part.members %}
        mega::mangle::delete_{{member.mangle}}( pIter + {{ member.offset }} );
{% endfor %}
{% for link in part.links %}
{% if link.owning %}
{% endif %}
    {
        if( bLinkReset )
        {
            const mega::reference linkRef = mega::reference::make( ref, 
                    mega::TypeInstance{ {{ link.link_type_id }}, static_cast< mega::Instance >( instance ) } );
            static thread_local mega::runtime::relation::LinkReset function( 
                g_pszModuleName, mega::RelationID{ {{ link.relation_id_lower }}, {{ link.relation_id_upper }} } );
            function( linkRef );
        }
        mega::mangle::delete_{{link.mangle}}( pIter + {{ link.offset }} );
        mega::mangle::delete_{{link.link_type_mangle}}( pIter + {{ link.link_type_offset }} );
    }
{% endfor %}
    }
}
{% endfor %}
}

void save_object_bin_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::mangle::save_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser );
{% endfor %}
{% for member in part.links %}
        mega::mangle::save_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser );
        mega::mangle::save_bin_{{member.link_type_mangle}}( pIter + {{ member.link_type_offset }}, pSerialiser );
{% endfor %}
    }
{% endfor %}
}

void load_object_bin_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::mangle::load_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser );
{% endfor %}
{% for member in part.links %}
        mega::mangle::load_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser );
        mega::mangle::load_bin_{{member.link_type_mangle}}( pIter + {{ member.link_type_offset }}, pSerialiser );
{% endfor %}
    }
{% endfor %}
}

void unparent_{{ objectTypeID }}( mega::reference ref )
{
    if( ref.getMPO() != mega::runtime::getThisMPO() )
    {
        mega::runtime::readLock( ref );
    }
    else if( ref.isNetworkAddress() )
    {
        mega::runtime::networkToHeap( ref );
    }

    void* pBuffer = ref.getHeap();

{% for part in parts %}
{
    mega::Instance instance = 0;
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }}, ++instance )
    {
{% for link in part.links %}
{% if link.owned %}
{% endif %}
    {
        const mega::reference linkRef = mega::reference::make( ref, 
                mega::TypeInstance{ {{ link.link_type_id }}, static_cast< mega::Instance >( instance ) } );
        static thread_local mega::runtime::relation::LinkReset function( 
            g_pszModuleName, mega::RelationID{ {{ link.relation_id_lower }}, {{ link.relation_id_upper }} } );
        function( linkRef );
    }
{% endfor %}
    }
}
{% endfor %}
}

void traverse_{{ objectTypeID }}( void* pIterator )
{
    switch( mega::mangle::iterator_state( pIterator ) )
    {
{%  for state in states %}
        case {{ state.value }}: // {{ state.name }} {% if state.start %}START{% else %}END{% endif %}

{% if state.type == "object" %}
{% if state.start %}
            mega::mangle::iterator_object_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% else %}
            mega::mangle::iterator_object_end( pIterator, "{{ state.name }}" );
{% endif %}
{% else if state.type == "component" %}
{% if state.start %}
            mega::mangle::iterator_component_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} }, {{ state.local_domain_size }} );
{% else %}
            mega::mangle::iterator_component_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% endif %}
{% else if state.type == "action" %}
{% if state.start %}
            mega::mangle::iterator_action_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} }, {{ state.local_domain_size }} );
{% else %}
            mega::mangle::iterator_action_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% endif %}
{% else if state.type == "state" %}
{% if state.start %}
            mega::mangle::iterator_state_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} }, {{ state.local_domain_size }} );
{% else %}
            mega::mangle::iterator_state_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% endif %}
{% else if state.type == "event" %}
{% if state.start %}
            mega::mangle::iterator_event_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} }, {{ state.local_domain_size }} );
{% else %}
            mega::mangle::iterator_event_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% endif %}
{% else if state.type == "link" %}
{% if state.start %}
            mega::mangle::iterator_link_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} }, {{ state.owning }}, {{ state.owned }} );
{% else %}
            mega::mangle::iterator_link_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} }, {{ state.owning }}, {{ state.owned }} );
{% endif %}
{% else if state.type == "dimension" %}
            mega::mangle::iterator_dimension( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% else if state.type == "interupt" %}
{% if state.start %}
            mega::mangle::iterator_interupt_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% else %}
            mega::mangle::iterator_interupt_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% endif %}
{% else if state.type == "function" %}
{% if state.start %}
            mega::mangle::iterator_function_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% else %}
            mega::mangle::iterator_function_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% endif %}
{% else if state.type == "namespace" %}
{% if state.start %}
            mega::mangle::iterator_namespace_start( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% else %}
            mega::mangle::iterator_namespace_end( pIterator, "{{ state.name }}", mega::TypeID{ {{ state.successor }} } );
{% endif %}
{% endif %}
        break;
{%  endfor %}
        default:
            throw mega::runtime::JITException{ "traverse_{{ objectTypeID }} Unknown concrete type id" };
        break;
    }
}

mega::U64 link_size_{{ objectTypeID }}( mega::reference ref )
{
    switch( ref.getType() )
    {
{% for part in parts %}
{% for link in part.links %}
        case {{ link.link_type_id }}:
        {
            static thread_local mega::runtime::relation::LinkSize function( 
                g_pszModuleName, mega::RelationID{ {{ link.relation_id_lower }}, {{ link.relation_id_upper }} } );
            return function( ref );
        }
        break;
{% endfor %}
{% endfor %}
        default:
            throw mega::runtime::JITException{ "link_size_{{ objectTypeID }} Unknown concrete type id" };
        break;
    }
    return {};
}

mega::reference link_get_{{ objectTypeID }}( mega::reference ref, mega::U64 index )
{
    switch( ref.getType() )
    {
{% for part in parts %}
{% for link in part.links %}
        case {{ link.link_type_id }}:
        {
            static thread_local mega::runtime::relation::LinkGet function( 
                g_pszModuleName, mega::RelationID{ {{ link.relation_id_lower }}, {{ link.relation_id_upper }} } );
            return function( ref, index );
        }
        break;
{% endfor %}
{% endfor %}
        default:
            throw mega::runtime::JITException{ "link_get_{{ objectTypeID }} Unknown concrete type id" };
        break;
    }
    return {};
}

mega::Any read_any_{{ objectTypeID }}( mega::reference ref )
{
    if( ref.getMPO() != mega::runtime::getThisMPO() )
    {
        mega::runtime::readLock( ref );
    }
    else if( ref.isNetworkAddress() )
    {
        mega::runtime::networkToHeap( ref );
    }

    void* pBuffer = ref.getHeap();

    switch( ref.getType() )
    {
{% for part in parts %}
{% for member in part.members %}
        case {{ member.type_id }}:return mega::mangle::read_any_{{member.mangle}}( reinterpret_cast< char* >( pBuffer ) + {{ part.offset }} + ( ref.getInstance() * {{ part.size }} ) + {{ member.offset }} );
{% endfor %}
{% endfor %}
        default:
            throw mega::runtime::JITException{ "read_{{ objectTypeID }} Unknown concrete type id" };
        break;
    }
    return {};
}

void write_any_{{ objectTypeID }}( mega::reference ref, mega::Any value )
{
    if( ref.getMPO() != mega::runtime::getThisMPO() )
    {
        mega::runtime::readLock( ref );
    }
    else if( ref.isNetworkAddress() )
    {
        mega::runtime::networkToHeap( ref );
    }

    void* pBuffer = ref.getHeap();

    switch( ref.getType() )
    {
{% for part in parts %}
{% for member in part.members %}
        case {{ member.type_id }}:mega::mangle::write_any_{{member.mangle}}( reinterpret_cast< char* >( pBuffer ) + {{ part.offset }} + ( ref.getInstance() * {{ part.size }} ) + {{ member.offset }}, value );break;
{% endfor %}
{% endfor %}
        default:
            throw mega::runtime::JITException{ "read_{{ objectTypeID }} Unknown concrete type id" };
        break;
    }
}
