//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


#include "mega/native_types.hpp"
#include "mega/reference.hpp"

#include "service/protocol/common/mpo_context_interface.hpp" 

#include "jit/object_functions.hxx"
#include "jit/jit_exception.hpp"

namespace mega::mangle
{
    void structure_make( const mega::reference& source, const mega::reference& target, mega::U64 relationID );
    void structure_break( const mega::reference& source, const mega::reference& target, mega::U64 relationID );

    bool ref_vector_contains( void* pData, const mega::reference& ref );
    void ref_vector_remove( void* pData, const mega::reference& ref );
    void ref_vector_add( void* pData, const mega::reference& ref );
    void ref_vector_clear( void* pData );

    void log( const char* );
}

void prepare( mega::reference& ref )
{
    if( ref.is_valid() )
    {
        if( ref.getMPO() != mega::runtime::getThisMPO() )
        {
            mega::runtime::writeLock( ref );
        }
        else if( ref.isNetworkAddress() )
        {
            mega::runtime::networkToHeap( ref );
        }
    }
}

bool isSource( const mega::reference& ref )
{
    switch( ref.getType() )
    {
{% for source in sources %}
        case {{ source.type }} : return true;
{% endfor %}
    }
    return false;
}

bool isTarget( const mega::reference& ref )
{
    switch( ref.getType() )
    {
{% for target in targets %}
        case {{ target.type }} : return true;
{% endfor %}
    }
    return false;
}

void* getSourceData( mega::reference& ref )
{
    switch( ref.getType() )
    {
{% for source in sources %}
        case {{ source.type }} : 
        {
            return reinterpret_cast< char* >( ref.getHeap() )
                + {{ source.part_offset }} + ( {{ source.part_size }} * ref.getInstance() ) 
                + {{ source.dimension_offset }};
        }
        break;
{% endfor %}
        default:
            throw mega::runtime::JITException{ "Invalid source type for link" };
    }
    return nullptr;
}

void* getTargetData( mega::reference& ref )
{
    switch( ref.getType() )
    {
{% for target in targets %}
        case {{ target.type }} : 
        {
            return reinterpret_cast< char* >( ref.getHeap() )
                + {{ target.part_offset }} + ( {{ target.part_size }} * ref.getInstance() ) 
                + {{ target.dimension_offset }};
        }
        break;
{% endfor %}
        default:
            throw mega::runtime::JITException{ "Invalid target type for link" };
    }
    return nullptr;
}

{% if source_singular %}
{%      if target_singular %}
void unlinkSource( mega::reference& source )
{
    // source AND target are singular
    mega::reference& sourceRef = *reinterpret_cast< mega::reference* >( getSourceData( source ) );
    prepare( sourceRef );
    if( sourceRef.is_valid() )
    {
        mega::reference& sourceTarget = *reinterpret_cast< mega::reference* >( getTargetData( sourceRef ) );
        if( source != sourceTarget )
        {
            throw mega::runtime::JITException{ "Hypergraph error source not equal to target ref" };
        }

        // generate edge delete record
        mega::mangle::structure_break( source, sourceRef, {{ relationID }} );
        sourceRef = mega::reference{};
        sourceTarget = mega::reference{};
    }
}
{%      else %}
void unlinkSource( mega::reference& source )
{
    // source is singular, target is non-singular
    mega::reference& sourceRef = *reinterpret_cast< mega::reference* >( getSourceData( source ) );
    prepare( sourceRef );
    if( sourceRef.is_valid() )
    {
        void* pTargetData = getTargetData( sourceRef );
        if( !mega::mangle::ref_vector_contains( pTargetData, source ) )
        {
            throw mega::runtime::JITException{ "Hypergraph error source not contained in target" };
        }

        // generate edge delete record
        mega::mangle::structure_break( sourceRef, targetRef, {{ relationID }} );
        mega::mangle::ref_vector_remove( pTargetData, source );
        sourceRef = mega::reference{};
    }
}
{%      endif %}
{% endif %}

{% if target_singular %}
{%      if source_singular %}
void unlinkTarget( mega::reference& target )
{
    // source AND target are singular
    mega::reference& targetRef = *reinterpret_cast< mega::reference* >( getTargetData( target ) );
    prepare( targetRef );
    if( targetRef.is_valid() )
    {
        mega::reference& sourceRef = *reinterpret_cast< mega::reference* >( getSourceData( targetRef ) );
        if( target != sourceRef )
        {
            throw mega::runtime::JITException{ "Hypergraph error target not equal to source ref" };
        }

        // generate edge delete record
        mega::mangle::structure_break( sourceRef, targetRef, {{ relationID }} );
        sourceRef = mega::reference{};
        targetRef = mega::reference{};
    }
}
{%      else %}
void unlinkTarget( mega::reference& target )
{
    // source is singular, target is non-singular
    mega::reference& targetRef = *reinterpret_cast< mega::reference* >( getTargetData( target ) );
    prepare( targetRef );
    if( targetRef.is_valid() )
    {
        void* pSourceData = getTargetData( targetRef );
        if( !mega::mangle::ref_vector_contains( pSourceData, target ) )
        {
            throw mega::runtime::JITException{ "Hypergraph error target not contained in source" };
        }

        // generate edge delete record
        mega::mangle::structure_break( targetRef, target, {{ relationID }} );
        mega::mangle::ref_vector_remove( pSourceData, target );
        targetRef = mega::reference{};
    }
}
{%      endif %}
{% endif %}


{% if source_singular %}
void linkSource( mega::reference& source, mega::reference& target )
{
    *reinterpret_cast< mega::reference* >( getSourceData( source ) ) = target;
}
{% else %}
void linkSource( mega::reference& source, mega::reference& target )
{
    mega::mangle::ref_vector_add( getSourceData( source ), target );
}
{% endif %}

{% if target_singular %}
void linkTarget( mega::reference& target, mega::reference& source )
{
    *reinterpret_cast< mega::reference* >( getTargetData( target ) ) = source;
}
{% else %}
void linkTarget( mega::reference& target, mega::reference& source )
{
    mega::mangle::ref_vector_add( getTargetData( target ), source );
}
{% endif %}

void link_make_{{ relationID }}( mega::reference context, mega::reference parameter )
{
    // mega::mangle::log( "link_make_{{ relationID }}" );
    if( ( !context.is_valid() ) || ( !parameter.is_valid() ) )
    {
        throw mega::runtime::JITException{ "Invalid parameters to link_make_{{ relationID }}" };
    }
    prepare( context );
    prepare( parameter );

    mega::reference& source = isSource( context ) ? context : parameter;
    mega::reference& target = isTarget( parameter ) ? parameter : context;

    if( !isSource( source ) )
    {
        throw mega::runtime::JITException{ "link_make_{{ relationID }} given invalid source" };
    }
    if( !isTarget( target ) )
    {
        throw mega::runtime::JITException{ "link_make_{{ relationID }} given invalid target" };
    }

{% if source_singular %}
    unlinkSource( source );
{% endif %}
{% if target_singular %}
    unlinkTarget( target );
{% endif %}

    linkSource( source, target );
    linkTarget( target, source );
    mega::mangle::structure_make( source, target, {{ relationID }} );
}

void link_break_{{ relationID }}( mega::reference context, mega::reference parameter )
{
    if( ( !context.is_valid() ) || ( !parameter.is_valid() ) )
    {
        throw mega::runtime::JITException{ "Invalid parameters to link_break_{{ relationID }}" };
    }

    prepare( context );
    prepare( parameter );

    mega::reference& source = isSource( context ) ? context : parameter;
    mega::reference& target = isTarget( parameter ) ? parameter : context;
    
    if( !isSource( source ) )
    {
        throw mega::runtime::JITException{ "link_break_{{ relationID }} given invalid source" };
    }
    if( !isTarget( target ) )
    {
        throw mega::runtime::JITException{ "link_break_{{ relationID }} given invalid target" };
    }

{% if source_singular %}
{%      if target_singular %}
    mega::reference& sourceRef = *reinterpret_cast< mega::reference* >( getSourceData( source ) );
    mega::reference& targetRef = *reinterpret_cast< mega::reference* >( getTargetData( target ) );

    if( ( sourceRef != target ) || ( targetRef != source ) )
    {
        throw mega::runtime::JITException{ "link_break_{{ relationID }} source target combination does not match link" };
    }
            
    mega::mangle::structure_break( source, target, {{ relationID }} );
    sourceRef = mega::reference{};
    targetRef = mega::reference{};
        
{%      else %}
    mega::reference& sourceRef = *reinterpret_cast< mega::reference* >( getSourceData( source ) );
    void* pTargetData = getTargetData( target );

    if( ( sourceRef != target ) || ( !mega::mangle::ref_vector_contains( pTargetData, source ) ) )
    {
        throw mega::runtime::JITException{ "link_break_{{ relationID }} source target combination does not match link" };
    }

    mega::mangle::structure_break( source, target, {{ relationID }} );
    sourceRef = mega::reference{};
    mega::mangle::ref_vector_remove( pTargetData, source );
    
{%      endif %}
{% else %}
{%      if target_singular %}
    void* pSourceData = getSourceData( source );
    mega::reference& targetRef = *reinterpret_cast< mega::reference* >( getTargetData( target ) );

    if( ( targetRef != source ) || ( !mega::mangle::ref_vector_contains( pSourceData, target ) ) )
    {
        throw mega::runtime::JITException{ "link_break_{{ relationID }} source target combination does not match link" };
    }

    mega::mangle::structure_break( source, target, {{ relationID }} );
    mega::mangle::ref_vector_remove( pSourceData, target );
    targetRef = mega::reference{};
    
{%      else %}
    void* pSourceData = getSourceData( source );
    void* pTargetData = getTargetData( target );
    if( !mega::mangle::ref_vector_contains( pSourceData, target ) ||
        !mega::mangle::ref_vector_contains( pTargetData, source ) )
    {
        throw mega::runtime::JITException{ "link_break_{{ relationID }} source target combination does not match link" };
    }
    
    mega::mangle::structure_break( source, target, {{ relationID }} );
    mega::mangle::ref_vector_remove( pSourceData, target );
    mega::mangle::ref_vector_remove( pTargetData, source );
    
{%      endif %}
{% endif %}
}

void link_overwrite_{{ relationID }}( mega::reference context, mega::reference parameter )
{
    prepare( context );
    prepare( parameter );
    throw mega::runtime::JITException{ "link_overwrite_{{ relationID }} NOT IMPLEMENTED" };
}

void link_reset_{{ relationID }}( mega::reference context, mega::reference parameter )
{
    prepare( context );
    prepare( parameter );
    throw mega::runtime::JITException{ "link_reset_{{ relationID }} NOT IMPLEMENTED" };
}