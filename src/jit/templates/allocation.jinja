//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "mega/jit_interface.hpp"

namespace mega
{
{% for type in mangled_data_types %}
    void new_{{type}}(void*);
    void delete_{{type}}(void*);
    void save_xml_{{type}}(void*,const char*,void*);
    void load_xml_{{type}}(void*,const char*,void*);
    void save_bin_{{type}}(void*,void*);
    void load_bin_{{type}}(void*,void*);
{% endfor %}
}

void ctor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::new_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void dtor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::delete_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void save_object_bin_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::save_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void load_object_bin_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
{% for part in parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::load_bin_{{member.mangle}}( pIter + {{ member.offset }}, pSerialiser ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void save_object_xml_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
}

void load_object_xml_{{ objectTypeID }}( void* pBuffer, void* pSerialiser )
{
}

void load_object_record_{{ objectTypeID }}( mega::reference ref, void* pData )
{
    switch( ref.getType() )
    {
{% for part in parts %}
{% for member in part.members %}
        case {{ member.type_id }}: // {{ member.type }} {{ member.name }}
        {
            // TODO
            // mega::load_bin_{{member.mangle}}( pIter + {{ member.offset }}, pData );
        }
        break;
{% endfor %}
{% endfor %}
        default:
            throw "Unknown record type";
    }
}
