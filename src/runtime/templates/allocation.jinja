//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.


#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "runtime/functions.hpp"

namespace mega
{
{% for allocator in allocators %}
    void new_{{allocator}}(void*,void*);
{% endfor %}
{% for deallocator in deallocators %}
    void delete_{{deallocator}}(void*);
{% endfor %}
}

void shared_ctor_{{ objectTypeID }}( void* pBuffer, void* pMemory )
{
{% for part in shared_parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::new_{{member.mangle}}( pIter + {{ member.offset }}, pMemory ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void shared_dtor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in shared_parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::delete_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void heap_ctor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in heap_parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::new_{{member.mangle}}( pIter + {{ member.offset }}, 0 ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

void heap_dtor_{{ objectTypeID }}( void* pBuffer )
{
{% for part in heap_parts %}
    for( char* pIter = (char*)pBuffer + {{ part.offset }}, *pEnd = pIter + {{ part.total_domain }} * {{ part.size }}; pIter != pEnd; pIter += {{ part.size }} )
    {
{% for member in part.members %}
        mega::delete_{{member.mangle}}( pIter + {{ member.offset }} ); // {{ member.type }} {{ member.name }}
{% endfor %}
    }
{% endfor %}
}

static mega::runtime::Allocator* __g_allocator = nullptr;

void set_allocator_{{ objectTypeID }}( mega::runtime::Allocator* pAllocator )
{
    __g_allocator = pAllocator;
}

void* get_shared_{{ objectTypeID }}( mega::MachineAddress address )
{
    return __g_allocator->get_shared( address );
}

void* get_heap_{{ objectTypeID }}( mega::MachineAddress address )
{
    return __g_allocator->get_heap( address );
}
