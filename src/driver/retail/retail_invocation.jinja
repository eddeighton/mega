struct {{ type }}
{
    {{ context }}& _ref;
    {{ type }}({{ context }}& ref):_ref(ref){}
{% for operation in operations %}
{% if operation.implicit %}
    template< typename... Args >
    inline typename _result_type< {{ type }}, Args... >::Type operator()({% if operation.has_args %}Args... args{% endif %}) const;
{% else %}
    struct {{ operation.type }}
    {
        {{ context }}& _ref;
        {{ operation.type }}({{ context }}& ref):_ref(ref){}
        template< typename... Args >
        inline typename _result_type< {{ operation.type }}, Args... >::Type operator()({% if operation.has_args %}Args... args{% endif %}) const;
    } {{ operation.symbol }} = {{ operation.type }}(_ref);
{% endif %}
{% endfor %}
    {{ nested }}
} {{ symbol }} = {{ type }}({% if first_level_deep %}*this{% else %}_ref{% endif %} );
