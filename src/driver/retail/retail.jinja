//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

{% for include in cppIncludes %}
#include "{{include}}"
{% endfor %}

#include "mega/native_types.hpp"
#include "mega/reference.hpp"
#include "mega/operation_id.hpp"
#include "mega/types/traits.hpp"
//#include "mega/type_path.hpp" // has array


//#include "mega/variant.hpp"


#include "mega/event.hpp"
#include "mega/clock.hpp"
//#include "mega/operations.hpp" 
//#include "mega/iterators.hpp" // has array and vector and defines __mega_vector std::vector type alias
#include "mega/write_operation.hpp"

#include "mega/coroutine.hpp" // has stl dependencies
#include "mega/scheduler.hpp" // has stl dependencies
#include "mega/maths_types.hpp" // has boost math stuff

{% for include in systemIncludes %}
#include <{{include}}>
{% endfor %}

namespace
{

template< std::size_t >
struct _result_type;

template< typename To, typename From >
static To mega_cast( const From& from );

template< typename Context >
static bool mega_active( const Context& context );

template< typename Context >
static bool mega_stopped( const Context& context );

// Interface
{{ interface }}

// concrete
{% for object in objects %}
struct {{ object.type }}
{
{% for member in object.members %}
    {{ member.type }} {{ member.name }};
{% endfor %}
};
{% endfor %}

// traits
{% for struct in trait_structs %}
struct {% for type in struct.types %}{{ type }}{% if not loop.is_last%}::{% endif %}{% endfor %}
{
{% for trait in struct.traits %}
    {{ trait }};
{% endfor %}
};
{% endfor %}

// result types
{% for result_type in result_types %}
{{ result_type }}
{% endfor %}

// invocations
{% for invocation in invocations %}
{{ invocation }}
{% endfor %}

// operation_bodies
{% for operation_body in operation_bodies %}
{{ operation_body }}
{% endfor %}

}

