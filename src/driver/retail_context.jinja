struct {{ name }} : public mega::reference
{
    enum : mega::TypeID::ValueType { ID = {{ typeid }} };
    inline {{ name }}() = default;
    inline {{ name }}( mega::reference reference ) : mega::reference( reference ) {}
    template< typename T >
    inline bool operator==( const T& cmp ) const
    {
        return mega::reference::operator==( cmp );
    }
    template< typename T >
    inline bool operator!=( const T& cmp ) const
    {
        return !this->operator==( cmp );
    }
    inline operator const void*() const
    {
        return is_valid() ? this : nullptr;
    }
    
{% if has_operation %}
    template< typename... Args >
    typename _result_type< {{ name }}, Args... >::Type operator()({%if operation_has_args%}Args... args{% endif %}) const;
{% endif %}

    // traits
{% for trait_struct in trait_structs %}
    struct {{ trait_struct.name }};
{% endfor %}

    // invocations
    {{ invocations }}

    // subtree
    {{ nested }}
};
