
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#ifndef GUARD_2023_December_05_functor_id
#define GUARD_2023_December_05_functor_id

{% for include in includes %}
#include "{{ include }}"
{% endfor %}

#include "mega/values/compilation/interface/type_id.hpp"

#include "common/unreachable.hpp"
#include "common/hash.hpp"

#include <ostream>

namespace mega::runtime
{

{% for materialiser in materialisers %}
struct {{ materialiser.name }}_id
{
{% for arg in materialiser.parameters %}
    {{ arg.type_cpp }} {{ arg.name }};
{% endfor %}
};

{% endfor %}

struct FunctorID
{
    enum Type
    {
{% for materialiser in materialisers %}
{% for function in materialiser.functions %}
        e_{{ materialiser.name }}_{{ function.name }}{% if not loop.is_last%}, {% endif %}
        
{% endfor %}{% if not loop.is_last%}, {% endif %}
{% endfor %}
    } type;

    union
    {
{% for materialiser in materialisers %}
        {{ materialiser.name }}_id m_{{ materialiser.name }};
{% endfor %}
    };

{% for materialiser in materialisers %}
    FunctorID( Type _type, {{ materialiser.name }}_id _id )
        :   type( _type )
        ,   m_{{ materialiser.name }}{ _id }
    {
    }
{% endfor %}

    inline const char* mat() const
    {
        switch( type )
        {
{% for materialiser in materialisers %}
{% for function in materialiser.functions %}
            case FunctorID::e_{{ materialiser.name }}_{{ function.name }}:
{% endfor %}
            {
                return "{{ materialiser.name }}";
            }
            break;
{% endfor %}
        }
        UNREACHABLE;
    }

    inline const char* name() const
    {
        switch( type )
        {
{% for materialiser in materialisers %}
{% for function in materialiser.functions %}
            case FunctorID::e_{{ materialiser.name }}_{{ function.name }}:
            {
                return "{{ function.name }}";
            }
            break;
{% endfor %}
{% endfor %}
        }
        UNREACHABLE;
    }

    inline std::string getSymbol() const
    {
        std::ostringstream os;
        switch( type )
        {
{% for materialiser in materialisers %}
{% for function in materialiser.functions %}
            case e_{{ materialiser.name }}_{{ function.name }}:
            {
                std::ostringstream osFunctionName;
                osFunctionName << name() << '_' << mega::materialiser::{{ materialiser.name }}::Name{}( {% for arg in materialiser.parameters %}m_{{ materialiser.name }}.{{ arg.name }}{% if not loop.is_last %}, {% endif %}{% endfor %} );
                os << "{{ function.symbol_prefix }}" << osFunctionName.str().size() << osFunctionName.str() << "{{ function.symbol_postfix }}";
            }
            break;
{% endfor %}
{% endfor %}
        }
        return os.str();
    }

    inline bool operator==( const FunctorID& cmp ) const
    {
        if( type != cmp.type ) return false;
        switch( type )
        {
{% for materialiser in materialisers %}
{% for function in materialiser.functions %}
            case e_{{ materialiser.name }}_{{ function.name }}:
{% endfor %}
            {
                return true 
{% for arg in materialiser.parameters %}
                    && ( m_{{ materialiser.name }}.{{ arg.name }} == cmp.m_{{ materialiser.name }}.{{ arg.name }} )
{% endfor %}
                ;
            }
            break;
{% endfor %}
        }
        UNREACHABLE;
    }

    struct Hash
    {
        inline std::size_t operator()( const FunctorID& functorID ) const
        {
            switch( functorID.type )
            {
{% for materialiser in materialisers %}
{% for function in materialiser.functions %}
                case e_{{ materialiser.name }}_{{ function.name }}:
{% endfor %}
                {
                    return common::Hash( static_cast< std::size_t >( functorID.type )
{% for arg in materialiser.parameters %}
                        , functorID.m_{{ materialiser.name }}.{{ arg.name }} 
{% endfor %}
                    ).get();
                }
                break;
{% endfor %}
            }
            UNREACHABLE;
        }
    };
};

inline std::ostream& operator<<( std::ostream& os, const FunctorID& functorID )
{
    return os << functorID.mat() << '_' << functorID.name();
}

}

#endif //GUARD_2023_December_05_functor_id
