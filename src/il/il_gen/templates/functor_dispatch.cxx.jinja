
//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#include "runtime/functor_dispatch.hpp"

#include "common/assert_verify.hpp"

namespace mega::runtime
{

il::FunctionDefinition dispatchFactory( JITDatabase& db, il::Factory& factory, const FunctorID& functorID )
{
    switch( functorID.type )
    {
{% for materialiser in materialisers %}
{% for function in materialiser.functions %}
        case FunctorID::e_{{ materialiser.name }}_{{ function.name }}:
        {
            return factory.generate_{{ materialiser.name }}_{{ function.name }}( db, functorID );
        }
        break;
{% endfor %}
{% endfor %}
    }
    THROW_RTE( "Unsupported IL function: " << functorID );
}

}

