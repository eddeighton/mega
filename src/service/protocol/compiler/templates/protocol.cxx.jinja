
#include "service/protocol/model/{{ filename }}.hxx"

#include "service/protocol/common/serialisation.hpp"

#include "service/network/network.hpp"
#include "service/network/activity.hpp"
#include "service/network/end_point.hpp"
#include "service/network/log.hpp"

#include "common/assert_verify.hpp"

#include "boost/asio/streambuf.hpp"
#include <boost/archive/binary_oarchive.hpp>
#include <boost/asio/detached.hpp>

#include <sstream>
#include <string_view>
#include <iostream>

namespace mega
{
namespace network
{
namespace {{ filename }}
{

Request_Encode::Request_Encode( network::Activity&            activity,
                                boost::asio::ip::tcp::socket& socket,
                                boost::asio::yield_context&   yield_ctx )
    : m_activity( activity )
    , m_socket( socket )
    , m_yield_ctx( yield_ctx )
{
}

void Request_Encode::Complete()
{
    boost::asio::streambuf streambuffer;
    {
        boost::archive::binary_oarchive oa( streambuffer );
        const Header header( MSG_Complete_Request::ID, m_activity.getActivityID() );
        oa& header;
    }
    if ( const boost::system::error_code ec = send( streambuffer, m_socket, m_yield_ctx ) )
    {
        THROW_RTE( "Error writing: " << ec.what() );
    }
    else
    {
        SPDLOG_TRACE( "Sent request: MSG_Complete_Request" );
    }
}

{% for request in requests %}
{{ request.return_type }} Request_Encode::{{ request.name }}
( 
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%} 
)
{
    boost::asio::streambuf streambuffer;
    {
        boost::archive::binary_oarchive oa( streambuffer );
        const Header header( {{ filename }}::MSG_{{ request.name }}_Request::ID, m_activity.getActivityID() );
        oa&          header;
{%for p in request.params%}
        oa& {{p.name}};
{%endfor%} 
    }

    if ( const boost::system::error_code ec = send( streambuffer, m_socket, m_yield_ctx ) )
    {
        THROW_RTE( "Error writing: " << ec.what() );
    }
    else
    {
        SPDLOG_TRACE( "Sent request: {{ filename }}::MSG_{{ request.name }}_Request" );
    }

    const MessageVariant msg = m_activity.dispatchRequestsUntilResponse( m_yield_ctx );
    VERIFY_RTE_MSG( msg.index() == {{ filename }}::MSG_{{ request.name }}_Response::ID,
        "Unexpected reponse of type: " << getMsgNameFromID( msg.index() ) << " instead of: {{ filename }}::MSG_{{ request.name }}_Response" );
{%if request.return_type != "void" %}
    return std::get< {{ filename }}::MSG_{{ request.name }}_Response >( msg ).{{ request.return_msg_member }};
{% endif %}
}
{% endfor %}


Response_Encode::Response_Encode( network::Activity&            activity,
                                  boost::asio::ip::tcp::socket& socket,
                                  boost::asio::yield_context&   yield_ctx )
    : m_activity( activity )
    , m_socket( socket )
    , m_yield_ctx( yield_ctx )
{
}

{% for response in responses %}
void Response_Encode::{{ response.name }}
( 
{%for p in response.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
)
{
    boost::asio::streambuf streambuffer;
    {
        boost::archive::binary_oarchive oa( streambuffer );
        const Header header( {{ filename }}::MSG_{{ response.name }}_Response::ID, m_activity.getActivityID() );
        oa&          header;
{%for p in response.params%}
        oa& {{p.name}};
{%endfor%}
    }

    if ( const boost::system::error_code ec = send( streambuffer, m_socket, m_yield_ctx ) )
    {
        THROW_RTE( "Error writing: " << ec.what() );
    }
    else
    {
        SPDLOG_TRACE( "Sent response: {{ filename }}::MSG_{{ response.name }}_Response" );
    }
}
{% endfor %}
namespace 
{
    struct Visitor
    {
        Impl&     m_impl;
        Activity& m_activity;
        boost::asio::yield_context yield_ctx;
        Visitor( Impl& impl, Activity& activity, boost::asio::yield_context yield_ctx )
            : m_impl( impl )
            , m_activity( activity )
            , yield_ctx( yield_ctx )
        {
        }

{% for request in requests %}
        bool operator() ( const {{ filename }}::MSG_{{ request.name }}_Request& msg ) const
        {
            m_activity.requestStarted( msg.connectionID );
            m_impl.{{ request.name }}
            ( 
{%for p in request.params%}
                msg.{{p.name}},
{%endfor%}
                yield_ctx 
            );
            return true;
        }
{% endfor %}
        template< typename TOtherMsgType >
        bool operator() ( const TOtherMsgType& ) const
        {
            return false;
        }

    } ;
}
bool Impl::dispatchRequest( const MessageVariant& msg, Activity& activity, boost::asio::yield_context yield_ctx )
{
    Visitor visitor( *this, activity, yield_ctx );
    return std::visit( visitor, msg );
}

} // namespace {{ filename }}
} // namespace network
} // namespace mega
