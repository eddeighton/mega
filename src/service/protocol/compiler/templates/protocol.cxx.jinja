
#include "service/protocol/model/{{ filename }}.hxx"

#include "service/network/network.hpp"
#include "service/network/conversation.hpp"
#include "service/network/end_point.hpp"
#include "service/network/log.hpp"
#include "service/network/sender.hpp"

#include "mega/mpo_context.hpp"

#include "common/assert_verify.hpp"

namespace mega
{
namespace network
{
namespace {{ filename }}
{

Request_Encode::Request_Encode( ConversationBase& conversation,
                                Sender& sender,
                                boost::asio::yield_context&   yield_ctx )
    : m_conversation( conversation )
    , m_sender( sender )
    , m_yield_ctx( yield_ctx )
{
}

{% for request in requests %}
{{ request.return_type }} Request_Encode::{{ request.name }}
( 
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%} 
)
{
    SUSPEND_MPO_CONTEXT();
    ConversationBase::RequestStack stack( "{{ filename }}::MSG_{{ request.name }}_Request", m_conversation, m_sender.getConnectionID() );

    {
        const Message msg = MSG_{{ request.name }}_Request::make
        (
            MSG_{{ request.name }}_Request
            {
{%for p in request.params%}
                {{p.name}}{% if not loop.is_last %},{%endif%}
{%endfor%} 
            }
        );

        if ( const boost::system::error_code ec = m_sender.send( m_conversation.getID(), msg, m_yield_ctx ) )
        {
            THROW_RTE( "Error writing: " << ec.what() );
        }
    }

    const Message msg = m_conversation.dispatchRequestsUntilResponse( m_yield_ctx );
    VERIFY_RTE_MSG( getMsgID( msg ) == {{ filename }}::MSG_{{ request.name }}_Response::ID,
        "Unexpected reponse of type: " << getMsgNameFromID( getMsgID( msg ) ) << " instead of: {{ filename }}::MSG_{{ request.name }}_Response" );
    RESUME_MPO_CONTEXT();
{%if request.return_type != "void" %}
    return {{ filename }}::MSG_{{ request.name }}_Response::get( msg ).{{ request.return_msg_member }};
{% endif %}
}
{% endfor %}


Response_Encode::Response_Encode( ConversationBase& conversation,
                                  Sender& sender,
                                  boost::asio::yield_context&   yield_ctx )
    : m_conversation( conversation )
    , m_sender( sender )
    , m_yield_ctx( yield_ctx )
{
}

{% for response in responses %}
void Response_Encode::{{ response.name }}
( 
{%for p in response.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
)
{
    const Message msg = MSG_{{ response.name }}_Response::make
    (
        MSG_{{ response.name }}_Response
        {
{%for p in response.params%}
            {{p.name}}{% if not loop.is_last %},{%endif%}
{%endfor%} 
        }
    );

    if ( const boost::system::error_code ec = m_sender.send( m_conversation.getID(), msg, m_yield_ctx ) )
    {
        THROW_RTE( "Error writing: " << ec.what() );
    }
    else
    {
        // SPDLOG_TRACE( "Sent response: {{ filename }}::MSG_{{ response.name }}_Response conversation: {}", m_conversation.getID() );
    }
}
{% endfor %}

bool Impl::dispatchRequest( const Message& message, boost::asio::yield_context& yield_ctx )
{
    switch( getMsgID( message ) )
    {
       
{% for request in requests %}
        case {{ filename }}::MSG_{{ request.name }}_Request::ID:
        {
            auto& msg = {{ filename }}::MSG_{{ request.name }}_Request::get( message );
            {{ request.name }}
            ( 
{%for p in request.params%}
                msg.{{p.name}},
{%endfor%}
                yield_ctx 
            );
            return true;
        }
        break;
{% endfor %}
        default:
            return false;
    }
}

} // namespace {{ filename }}
} // namespace network
} // namespace mega
