#ifndef MESSAGES_GENERATED_26_MAY_2022
#define MESSAGES_GENERATED_26_MAY_2022

#include "pipeline/task.hpp"
#include "pipeline/pipeline.hpp"

#include "service/protocol/common/header.hpp"
#include "service/protocol/common/serialisation.hpp"
#include "service/protocol/common/pipeline_result.hpp"

#include "common/stash.hpp"

#include "boost/asio/experimental/concurrent_channel.hpp"

#include "boost/filesystem/path.hpp"

#include <variant>
#include <array>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <optional>
#include <tuple>

namespace mega
{
namespace network
{
class Activity;


{%for message in messages%}
{%for namespace in message.namespaces%}
{%if loop.is_first %}namespace {{namespace}}{%else%}::{{namespace}}{%endif%}
{%endfor%}{# for namespace in message.namespaces #}
{%if message.has_namespace%} { {%endif%}

struct {{ message.name }}
{
    static const MessageID ID = {{ message.id }};
    ConnectionID connectionID;
{%for member in message.members%}
    {{ member.type }} {{ member.name }}; 
{%endfor%}
};

{%if message.has_namespace%} } {%endif%} 
{%endfor%}

using MessageVariant = std::variant 
<
{%for message in messages%}
{%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}{%if not loop.is_last %},{%endif%}
{%endfor%}
>;

using MessageChannel
    = boost::asio::experimental::concurrent_channel< void( boost::system::error_code, MessageVariant ) >;

bool isRequest( const MessageVariant& msg );
const ConnectionID& getConnectionID( const MessageVariant& msg );
bool decode( boost::archive::binary_iarchive& archive, const Header& header, const ConnectionID& connectionID, std::shared_ptr< Activity > pActivity );

std::ostream& operator<<( std::ostream& os, const MessageVariant& msg );
const char* getMsgNameFromID( MessageID id );

} // namespace network
} // namespace mega

#endif // MESSAGES_GENERATED_26_MAY_2022
