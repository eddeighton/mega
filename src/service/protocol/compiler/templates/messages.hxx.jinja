//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#ifndef MESSAGES_GENERATED_26_MAY_2022
#define MESSAGES_GENERATED_26_MAY_2022

#include "pipeline/task.hpp"
#include "pipeline/pipeline.hpp"

#include "mega/values/compilation/operation_id.hpp"
#include "mega/values/compilation/invocation_id.hpp"
#include "mega/values/compilation/megastructure_installation.hpp"
#include "mega/values/compilation/symbol_table.hpp"

#include "mega/values/runtime/reference.hpp"
#include "mega/values/runtime/reference_io.hpp"

#include "mega/values/service/logical_thread_id.hpp"
#include "mega/values/service/node.hpp"
#include "mega/values/service/program.hpp"
#include "mega/values/service/project.hpp"
#include "mega/values/service/status.hpp"
#include "mega/values/service/url.hpp"

#include "service/protocol/common/jit_base.hpp"
#include "service/protocol/common/sender_ref.hpp"
#include "service/protocol/common/transaction.hpp"

#include "reports/report.hpp"

#include "service/network/log.hpp"

#include "pipeline/pipeline_result.hpp"

#include "common/stash.hpp"

#include "mega/memory.hpp"
#include "mega/move_archive.hpp"
#include "mega/snapshot.hpp"

#include "log/range.hpp"

#include "common/serialisation.hpp"

#include <boost/filesystem/path.hpp>
#include <boost/archive/binary_iarchive.hpp>
#include <boost/archive/binary_oarchive.hpp>
#include <boost/interprocess/streams/vectorstream.hpp>

#include <vector>
#include <map>
#include <set>
#include <string>
#include <optional>
#include <memory>
#include <any>

namespace mega::network
{

class Message
{
    friend const void*  getData( const Message& message );
    friend void*        getData( Message& message );
    friend void         encode( boost::archive::binary_oarchive& archive, const Message& message );
    friend Message      decode( boost::archive::binary_iarchive& archive );

    MessageID               index = 0; // MSG_Error_Disconnect
    LogicalThreadID         logicalThreadID;
    std::shared_ptr< void > data;

public:
    Message() = default;
    Message( MessageID index, LogicalThreadID logicalThreadID, std::shared_ptr< void > data )
        : index( index )
        , logicalThreadID( std::move( logicalThreadID ) )
        , data( std::move( data ) )
    {
    }

    MessageID               getID() const { return index; }
    const LogicalThreadID&  getLogicalThreadID() const { return logicalThreadID; }
    const char*             getName() const;

    operator bool() const { return index != 0; }

    template < typename Archive >
    void save( Archive& ar, const unsigned int version ) const;

    template < typename Archive >
    void load( Archive& ar, const unsigned int version );
    BOOST_SERIALIZATION_SPLIT_MEMBER()
};

std::ostream& operator<<( std::ostream& os, const Message& msg );

}

namespace fmt
{
template <>
struct formatter< mega::network::Message >
{
    constexpr auto parse( format_parse_context& ctx ) -> decltype( ctx.begin() ) { return ctx.begin(); }

    template < typename FormatContext >
    inline auto format( const mega::network::Message& msg, FormatContext& ctx ) -> decltype( ctx.out() )
    {
        std::ostringstream os;
        os << msg;
        return fmt::format_to( ctx.out(), "{}", os.str() );
    }
};
}

namespace mega::network
{

{%for message in messages%}
{%for namespace in message.namespaces%}
{%if loop.is_first %}namespace {{namespace}}{%else%}::{{namespace}}{%endif%}
{%endfor%}{# for namespace in message.namespaces #}
{%if message.has_namespace%} { {%endif%}

struct {{ message.name }}
{
    static const MessageID ID = {{ message.id }};
{%for member in message.members%}
    {{ member.type }} {{ member.name }}; 
{%endfor%}
    static Message make( const LogicalThreadID& logicalThreadID, {{ message.name }}&& msg );
    static const {{ message.name }}& get( const Message& msg );
};

{%if message.has_namespace%} } {%endif%} 
{%endfor%}

Message make_disconnect_error_msg( const LogicalThreadID& logicalThreadID, const std::string& strErrorMsg );
Message make_response_error_msg( const LogicalThreadID& logicalThreadID, const std::string& strErrorMsg );

bool isRequest( const Message& msg );

Message decode( boost::archive::binary_iarchive& archive );

static constexpr auto boostArchiveFlags = boost::archive::no_header | boost::archive::no_codecvt
                                          | boost::archive::no_xml_tag_checking | boost::archive::no_tracking;

inline void decode( boost::interprocess::basic_vectorbuf< std::vector< char > >& buffer, Message& msg )
{
    boost::archive::binary_iarchive ia( buffer, boostArchiveFlags );
    msg = decode( ia );
}

template < typename Archive >
void Message::load( Archive& ar, const unsigned int version )
{
    *this = decode( ar );
}

void encode( boost::archive::binary_oarchive& archive, const Message& msg );

inline void encode( boost::interprocess::basic_vectorbuf< std::vector< char > >& buffer, const Message& msg )
{
    boost::archive::binary_oarchive oa( buffer, boostArchiveFlags );
    encode( oa, msg );
}

template < typename Archive >
void Message::save( Archive& ar, const unsigned int version ) const
{
    encode( ar, *this );
}

void aggregate( Message& request, const std::vector< Message >& responses );

} // namespace mega::network

#endif // MESSAGES_GENERATED_26_MAY_2022
