#ifndef MESSAGES_GENERATED_26_MAY_2022
#define MESSAGES_GENERATED_26_MAY_2022

#include "pipeline/task.hpp"
#include "pipeline/pipeline.hpp"

#include "service/protocol/common/header.hpp"
#include "service/protocol/common/node.hpp"
#include "service/protocol/common/megastructure_installation.hpp"
#include "service/protocol/common/pipeline_result.hpp"
#include "service/protocol/common/project.hpp"

#include "utilities/serialization_helpers.hpp"

#include "common/stash.hpp"

#include "mega/common.hpp"

#include "boost/filesystem/path.hpp"

#include <vector>
#include <map>
#include <set>
#include <string>
#include <optional>
#include <memory>
#include <any>

namespace mega
{
namespace network
{

struct Message
{
    MessageID index = 0; // MSG_Error_Dispatch
    std::any msg;

    operator bool() const { return index != 0; }

    template < typename Archive >
    void save( Archive& ar, const unsigned int version ) const;

    template < typename Archive >
    void load( Archive& ar, const unsigned int version );
    BOOST_SERIALIZATION_SPLIT_MEMBER()
};

{%for message in messages%}
{%for namespace in message.namespaces%}
{%if loop.is_first %}namespace {{namespace}}{%else%}::{{namespace}}{%endif%}
{%endfor%}{# for namespace in message.namespaces #}
{%if message.has_namespace%} { {%endif%}

struct {{ message.name }}
{
    static const MessageID ID = {{ message.id }};
{%for member in message.members%}
    {{ member.type }} {{ member.name }}; 
{%endfor%}
    static Message make( const {{ message.name }}& msg );
    static const {{ message.name }}& get( const Message& msg );
};

{%if message.has_namespace%} } {%endif%} 
{%endfor%}


Message make_error_msg( const std::string& strErrorMsg );

bool isRequest( const Message& msg );
Message decode( boost::archive::binary_iarchive& archive, MessageID msgID );
void encode( boost::archive::binary_oarchive& archive, const Message& msg );

template < typename Archive >
void Message::save( Archive& ar, const unsigned int version ) const
{
    ar & index;
    encode( ar, *this );
}

template < typename Archive >
void Message::load( Archive& ar, const unsigned int version )
{
    ar & index;
    *this = decode( ar, index );
}

const char* getMsgName( const Message& msg );
std::ostream& operator<<( std::ostream& os, const Message& msg );
MessageID getMsgID( const Message& msg );
const char* getMsgNameFromID( MessageID id );

} // namespace network
} // namespace mega

#endif // MESSAGES_GENERATED_26_MAY_2022
