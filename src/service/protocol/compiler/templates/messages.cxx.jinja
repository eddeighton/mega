//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.




#include "service/protocol/model/messages.hxx"

#include <variant>

namespace mega::network
{
namespace 
{
    const char* getMsgNameFromID( MessageID id )
    {
        switch( id )
        {
{%for message in messages%}
            case {{ message.id }}: return "{%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}";
{% endfor %}
            default: 
            {
                THROW_RTE( "Unknown message type: " << id );
            }
        }
    }
}

const void* getData( const Message& message )
{
    return message.data.get();
}
void* getData( Message& message )
{
    return message.data.get();
}

{%for message in messages%}
{%for namespace in message.namespaces%}
{%if loop.is_first %}namespace {{namespace}}{%else%}::{{namespace}}{%endif%}
{%endfor%}{# for namespace in message.namespaces #}
{%if message.has_namespace%} { {%endif%}

Message {{ message.name }}::make( const LogicalThreadID& logicalThreadID, {{ message.name }}&& msg )
{
    if( sizeof( {{ message.name }} ) )
        return Message{ ID, logicalThreadID, std::shared_ptr< void >( new {{ message.name }}{ std::move( msg ) }, []( {{ message.name }}* p ){ delete p; } ) };
    else
        return Message{ ID, logicalThreadID, std::shared_ptr< void >{} };
}

const {{ message.name }}& {{ message.name }}::get( const Message& msg )
{
    VERIFY_RTE_MSG( msg.getID() == ID, "Expected message type: " << getMsgNameFromID( ID ) << " but got: " << msg );
    using Type = {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }};
    ASSERT( sizeof( Type ) );
    return *reinterpret_cast< const Type* >( getData( msg ) );
}

{%if message.has_namespace%} } {%endif%} 
{%endfor%}

Message make_error_msg( const LogicalThreadID& logicalThreadID, const std::string& strErrorMsg )
{
    return Message{ MSG_Error_Response::ID, logicalThreadID, 
        std::shared_ptr< void >( new MSG_Error_Response{ strErrorMsg }, []( MSG_Error_Response* p ){ delete p; } ) };
}

bool isRequest( const Message& _message_ )
{
    switch( _message_.getID() )
    {
{%for message in messages%}
        case {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}::ID: 
{%if message.is_request %}
            return true;
{% else %}
            return false;
{% endif %}
{% endfor %} 
        default:
        {
            THROW_RTE( "Unknown message: " << _message_.getName() );
        }
    }
}

Message decode( boost::archive::binary_iarchive& _archive_ )
{
    Message header;
    _archive_& header.index;
    _archive_& header.logicalThreadID;
    switch ( header.index )
    {
{%for message in messages%}
        case {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}::ID:
        {
            {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }} msg;
{%for member in message.members%}
            _archive_& msg.{{ member.name }}; 
{%endfor%}
            return {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}::make( 
                header.logicalThreadID, std::move( msg ) );
        }
        break;
{%endfor%}
        default:
        {
            THROW_RTE( "Error decoding message: " << header.getName() );
        }
    }
}

void encode( boost::archive::binary_oarchive& _archive_, const Message& _message_ )
{
    _archive_& _message_.index;
    _archive_& _message_.logicalThreadID;
    switch( _message_.index )
    {
{%for message in messages%}
        case {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}::ID:
        {
            using Type = {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }};
            if( sizeof( Type ) )
            {
                const Type& msg = *reinterpret_cast< const Type* >( getData( _message_ ) );
{%for member in message.members%}
                _archive_& msg.{{ member.name }}; 
{%endfor%}
            }
        }
        break;
{% endfor %}
        default:
        {
            THROW_RTE( "Error decoding message: " << _message_.getName() );
        }
    }
}

std::ostream& operator<<( std::ostream& os, const Message& msg )
{
    return os << msg.getName();
}

const char* Message::getName() const
{
    return getMsgNameFromID( getID() );
}

void aggregate( Message& _request_, const std::vector< Message >& _responses_ )
{
    switch( _request_.getID() )
    {
{%for message in messages%}
{% if message.is_broadcast %}
        case {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}::ID:
        {
            using Type = {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }};
            Type& msg = *reinterpret_cast< Type* >( getData( _request_ ) );
{%for member in message.members%}
{% if loop.is_last %}
            msg.{{ member.name }}.clear();
            for( const Message& response : _responses_ )
            {
                using ResponseType = {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.response_name }};
                const ResponseType& responseMsg = *reinterpret_cast< const ResponseType* >( getData( response ) );
                msg.{{ member.name }}.push_back( responseMsg.{{ message.response_member }} );
            }
{% endif %}
{%endfor%}
        }
        break;
{% endif %}
{% endfor %}
        default:
        {
            THROW_RTE( "Error decoding message: " << _request_.getName() );
        }
    }
}

}
