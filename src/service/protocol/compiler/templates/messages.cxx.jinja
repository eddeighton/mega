
#include "service/protocol/model/messages.hxx"

#include "service/network/activity.hpp"

namespace mega
{
namespace network
{

namespace 
{
    struct Visitor
    {
{%for message in messages%}
        bool operator() ( const {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}& msg ) const
        {
{%if message.is_request %}
            return true;
{% else %}
            return false;
{% endif %}
        }
{% endfor %}
        template< typename TOtherMsgType >
        bool operator() ( const TOtherMsgType& ) const
        {
            return false;
        }
    } ;
}
bool isRequest( const MessageVariant& msg )
{
    Visitor visitor;
    return std::visit( visitor, msg );
}

const ConnectionID& getConnectionID( const MessageVariant& msg )
{
    return std::visit( []( auto&& arg ) -> const ConnectionID& { return arg.connectionID; }, msg );
}

bool decode( boost::archive::binary_iarchive& archive, const Header& header, const ConnectionID& connectionID, std::shared_ptr< Activity > pActivity )
{
    switch ( header.getMessageID() )
    {
{%for message in messages%}

        case {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}::ID:
        {
{%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }} msg;
            msg.connectionID = connectionID;
{%for member in message.members%}
            archive& msg.{{ member.name }}; 
{%endfor%}
            pActivity->send( MessageVariant{ msg } );
            return true;
        }
        break;
{%endfor%}
        default:
        {
            return false;
        }
    }
}

namespace 
{
    struct Printer
    {
{%for message in messages%}
        const char* operator() ( const {%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}& msg ) const
        {
            return "{%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}";
        }
{% endfor %}
        template< typename TOtherMsgType >
        const char* operator() ( const TOtherMsgType& ) const
        {
            return "Unknown message type";
        }
    } ;
}

const char* getMsgName( const MessageVariant& msg )
{
    return std::visit( Printer{}, msg );
}

std::ostream& operator<<( std::ostream& os, const MessageVariant& msg )
{
    return os << getMsgName( msg );
}

const char* getMsgNameFromID( MessageID id )
{
    switch( id )
    {
{%for message in messages%}
        case {{ message.id }}: return "{%for namespace in message.namespaces%}{{namespace}}::{%endfor%}{{ message.name }}";
{% endfor %}
        default: THROW_RTE( "Unknown message type" );
    }
}
}
}