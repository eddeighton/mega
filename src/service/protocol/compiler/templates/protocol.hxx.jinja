//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.





#ifndef {{ guard }}
#define {{ guard }}

#include "service/protocol/model/messages.hxx"

#include "service/protocol/common/conversation_id.hpp"

#include "common/assert_verify.hpp"

#include <boost/asio/spawn.hpp>

#include <array>
#include <vector>
#include <string>
#include <ostream>
#include <istream>
#include <optional>
#include <functional>

namespace mega::network
{

class ConversationBase;
class ExternalConversation;
class Sender;

namespace {{ filename }}
{

class Request_Encoder
{
public:
    using Sender = std::function< Message(const Message&) >;
    Request_Encoder( Sender pSender, const ConversationID& sender );
    Request_Encoder( Sender pSender, const ConversationID& sender, const ConversationID& receiver );
{% for request in requests %}
    {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
    );
{% endfor %}
private:
    Sender m_pSender;
    const ConversationID m_sender;
    const ConversationID m_receiver;
};

class Request_Sender
{
public:
    Request_Sender( ConversationBase& conversation,
                    Sender& sender,
                    boost::asio::yield_context&   yield_ctx );
    Request_Sender( ConversationBase& conversation, 
                    const ConversationID& receiver,
                    Sender& sender,
                    boost::asio::yield_context&   yield_ctx );

{% for request in requests %}
    {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
    );
{% endfor %}

private:
    ConversationBase&             m_conversation;
    ConversationID                m_receiver;
    Sender&                       m_sender;
    boost::asio::yield_context&   m_yield_ctx;
};

class External_Request_Sender
{
public:
    External_Request_Sender( ConversationBase& sender, 
                    ExternalConversation& receiver );

{% for request in requests %}
    {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
    );
{% endfor %}

private:
    ConversationBase& m_sender;
    ExternalConversation& m_receiver;
};

class Impl
{
public:
    Message dispatchRequest( const Message& msg, boost::asio::yield_context& yield_ctx );

{% for request in requests %}
    virtual {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
        const {{p.type}}& 
        {{p.name}},
{%endfor%}
        boost::asio::yield_context& yield_ctx
    ) 
    {
        THROW_RTE( "{{ request.name }} called when NOT implemented" );
    }

{% endfor %}
};

}
}

#endif //{{ guard }}
