



#ifndef {{ guard }}
#define {{ guard }}

#include "service/protocol/model/messages.hxx"

#include "service/protocol/common/header.hpp"

#include "common/assert_verify.hpp"

#include "boost/asio/spawn.hpp"

#include <array>
#include <vector>
#include <string>
#include <ostream>
#include <istream>
#include <optional>
#include <functional>

namespace mega
{
namespace network
{

class ConversationBase;
class Sender;

namespace {{ filename }}
{

class Request_Encoder
{
public:
    using Sender = std::function< Message(const Message&) >;
    Request_Encoder( Sender pSender, const ConversationID& sender );
    Request_Encoder( Sender pSender, const ConversationID& sender, const ConversationID& receiver );
{% for request in requests %}
    {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
    );
{% endfor %}
private:
    Sender m_pSender;
    const ConversationID m_sender;
    const ConversationID m_receiver;
};

class Request_Sender
{
public:
    Request_Sender( ConversationBase& conversation,
                    Sender& sender,
                    boost::asio::yield_context&   yield_ctx );
    Request_Sender( ConversationBase& conversation, 
                    const ConversationID& receiver,
                    Sender& sender,
                    boost::asio::yield_context&   yield_ctx );

{% for request in requests %}
    {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
    );
{% endfor %}

private:
    ConversationBase&             m_conversation;
    ConversationID                m_receiver;
    Sender&                       m_sender;
    boost::asio::yield_context&   m_yield_ctx;
};

class Impl
{
public:
    Message dispatchRequest( const Message& msg, boost::asio::yield_context& yield_ctx );

{% for request in requests %}
    virtual {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
        const {{p.type}}& 
        {{p.name}},
{%endfor%}
        boost::asio::yield_context& yield_ctx
    ) 
    {
        THROW_RTE( "{{ request.name }} called when NOT implemented" );
    }

{% endfor %}
};

}
}
}


#endif //{{ guard }}
