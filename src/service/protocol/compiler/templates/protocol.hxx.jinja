#ifndef {{ guard }}
#define {{ guard }}

#include "service/protocol/model/messages.hxx"

#include "service/protocol/common/header.hpp"
#include "service/protocol/common/serialisation.hpp"

#include "common/assert_verify.hpp"

#include "boost/asio/ip/tcp.hpp"
#include "boost/asio/spawn.hpp"

#include <array>
#include <vector>
#include <string>
#include <ostream>
#include <istream>
#include <optional>

namespace mega
{
namespace network
{
namespace {{ filename }}
{

class Request_Encode
{
public:
    Request_Encode( network::Activity&            activity,
                    boost::asio::ip::tcp::socket& socket,
                    boost::asio::yield_context&   yield_ctx );

    void Complete();

{% for request in requests %}
    {{ request.return_type }} {{ request.name }}
    (
{%for p in request.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
    );
{% endfor %}

private:
    Activity&            m_activity;
    boost::asio::ip::tcp::socket& m_socket;
    boost::asio::yield_context&   m_yield_ctx;
};

class Response_Encode
{
public:
    Response_Encode( Activity&            activity,
                     boost::asio::ip::tcp::socket& socket,
                     boost::asio::yield_context&   yield_ctx );

{% for response in responses %}
    void {{ response.name }}
    (
{%for p in response.params%}
    const {{p.type}}& 
    {{p.name}}
    {% if not loop.is_last %}, {%endif%}
{%endfor%}
    );
{% endfor %}

private:
    Activity&                   m_activity;
    boost::asio::ip::tcp::socket& m_socket;
    boost::asio::yield_context&   m_yield_ctx;
};

class Impl
{
public:
    bool dispatchRequest( const MessageVariant& msg, Activity& activity, boost::asio::yield_context& yield_ctx );

{% for request in requests %}
    virtual void {{ request.name }}
    (
{%for p in request.params%}
        const {{p.type}}& 
        {{p.name}},
{%endfor%}
        boost::asio::yield_context& yield_ctx
    ) 
    {
        THROW_RTE( "{{ request.name }} called when NOT implemented" );
    }

{% endfor %}
};

}
}
}


#endif //{{ guard }}
