//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

msg EnroleDaemon
{
    request();
    response( runtime::MachineID daemonMachineID );
}

msg EnroleLeafWithDaemon
{
    request( std::string startupUUID, mega::network::Node type );
    response( runtime::MP leafMP );
}

msg EnroleLeafWithRoot
{
    request( std::string startupUUID, runtime::MachineID daemonMachineID );
    response( runtime::MP leafMP );
}

msg EnroleLeafDisconnect
{
    request( runtime::MP leafMP );
    response();
}

msg EnroleGetDaemons
{
    request();
    response( std::vector< runtime::MachineID > daemons );
}
msg EnroleGetProcesses
{
    request( runtime::MachineID machineID );
    response( std::vector< runtime::MP > machineProcesses );
}
msg EnroleGetMPO
{
    request( runtime::MP machineProcess );
    response( std::vector<runtime::MPO > mpos );
}

msg EnroleCreateExecutor
{
    request( runtime::MachineID daemonMachineID );
    response( runtime::MP executorMP );
}
msg EnroleDestroy
{
    request();
    response();
}
msg EnroleDaemonSpawn
{
    request( std::string strProgram, std::string strStartupUUID );
    response();
}

