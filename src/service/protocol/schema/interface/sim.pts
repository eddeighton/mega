//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

msg SimErrorCheck
{
    request();
    response();
}

msg SimObjectSnapshot
{
    request( runtime::PointerNet object );
    response( Snapshot snapshot );
}

msg SimAllocate
{
    request( concrete::ObjectID objectTypeID );
    response( runtime::PointerHeap result );
}

msg SimSnapshot // TODO
{
    request( runtime::MPO mpo );
    response( Snapshot snapshot );
}

msg SimLockRead
{
    request( runtime::MPO requestingMPO, runtime::MPO targetMPO );
    response( runtime::TimeStamp lockCycle );
}

msg SimLockWrite
{
    request( runtime::MPO requestingMPO, runtime::MPO targetMPO );
    response( runtime::TimeStamp lockCycle );
}

msg SimLockRelease
{
    request( runtime::MPO requestingMPO, runtime::MPO targetMPO, network::Transaction transaction );
    response();
}

msg SimRegister
{
    request( network::SenderRef senderRef );
    response();
}

msg SimUnregister
{
    request( runtime::MPO mpo );
    response();
}

msg SimClock
{
    request( runtime::MPO mpo, event::Range range );
    response( network::ClockTick clockTick );
}

msg SimMoveComplete
{
    request( runtime::MPO mpo );
    response();
}

msg SimMove
{
    request( mega::SimMoveArchive moveArchive, mega::U64 moveID );
    response( mega::U64 moveID );
}

msg SimCreate
{
    request();
    response( runtime::MPO mpo );
}

msg SimStart
{
    request();
    response();
}

msg SimDestroy
{
    request();
    response();
}

msg SimDestroyBlocking
{
    request();
    response();
}