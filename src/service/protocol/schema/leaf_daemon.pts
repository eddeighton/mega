
msg LeafEnrole
{
    request(mega::network::Node::Type type);
    response(MPO mpo);
}

msg TermListNetworkNodes
{
    request();
    response(std::vector< std::string > nodes);
}

msg TermPipelineRun
{
    request(mega::pipeline::Configuration configuration);
    response(mega::network::PipelineResult result);
}

msg TermGetMegastructureInstallation
{
    request();
    response(mega::network::MegastructureInstallation installation);
}

msg TermGetProject
{
    request();
    response(mega::network::Project project);
}

msg TermSetProject
{
    request(mega::network::Project project);
    response(bool bSuccess);
}

msg TermNewInstallation
{
    request(mega::network::Project project);
    response(bool bSuccess);
}

msg TermSimNew
{
    request();
    response(mega::network::ConversationID simulationID);
}
msg TermSimDestroy
{
    request(mega::network::ConversationID simulationID);
    response();
}
msg TermSimList
{
    request();
    response(std::vector< mega::network::ConversationID > simulationID);
}
msg TermSimReadLock
{
    request(mega::network::ConversationID owningID,mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg TermSimWriteLock
{
    request(mega::network::ConversationID owningID,mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg TermSimReleaseLock
{
    request(mega::network::ConversationID owningID,mega::network::ConversationID simulationID);
    response();
}

msg TermClearStash
{
    request();
    response();
}

msg TermCapacity
{
    request();
    response(mega::U64 capacity);
}

msg TermShutdown
{
    request();
    response();
}


// pipelines
msg ExePipelineReadyForWork
{
    request(network::ConversationID rootConversationID);
    response();
}

msg ExePipelineWorkProgress
{
    request(std::string message);
    response();
}

msg ExeGetBuildHashCode
{
    request( boost::filesystem::path filePath );
    response( task::FileHash hashCode );
}

msg ExeSetBuildHashCode
{
    request( boost::filesystem::path filePath, task::FileHash hashCode );
    response();
}

msg ExeStash
{
    request( boost::filesystem::path filePath, task::DeterminantHash determinant );
    response();
}

msg ExeRestore
{
    request( boost::filesystem::path filePath, task::DeterminantHash determinant );
    response( bool bRestored );
}

msg ExeGetMegastructureInstallation
{
    request();
    response(mega::network::MegastructureInstallation installation);
}

msg ExeGetProject
{
    request();
    response(mega::network::Project project);
}

// Simulations
msg ExeCreateMPO
{
    request(mega::MPO mpo);
    response(mega::MPO mpo);
}

msg ExeAcquireMemory
{
    request(mega::MPO mpo);
    response(std::string strMemoryName);
}
msg ExeAllocateNetworkAddress
{
    request(mega::MPO mpo, mega::TypeID objectTypeID);
    response(mega::AddressStorage networkAddress);
}
msg ExeDeAllocateNetworkAddress
{
    request(mega::MPO mpo, mega::AddressStorage networkAddress);
    response();
}
msg ExeGetMPOContextID
{
    request(mega::MPO mpo);
    response(mega::network::ConversationID conversationID);
}

msg ExeSimReadLock
{
    request(mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg ExeSimWriteLock
{
    request(mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg ExeSimReleaseLock
{
    request(mega::network::ConversationID simulationID);
    response();
}

// Tool
msg ToolGetMegastructureInstallation
{
    request();
    response(mega::network::MegastructureInstallation installation);
}

msg ToolCreateMPO
{
    request(mega::MPO mpo);
    response(mega::MPO mpo);
}

msg ToolAcquireMemory
{
    request(mega::MPO mpo);
    response(std::string strMemoryName);
}
msg ToolAllocateNetworkAddress
{
    request(mega::MPO mpo, mega::TypeID objectTypeID);
    response(mega::AddressStorage networkAddress);
}
msg ToolDeAllocateNetworkAddress
{
    request(mega::MPO mpo, mega::AddressStorage networkAddress);
    response();
}

msg ToolStash
{
    request( boost::filesystem::path filePath, task::DeterminantHash determinant );
    response();
}
msg ToolRestore
{
    request( boost::filesystem::path filePath, task::DeterminantHash determinant );
    response( bool bRestored );
}
msg ToolGetMPOContextID
{
    request(mega::MPO mpo);
    response(mega::network::ConversationID conversationID);
}
msg ToolGetMPO
{
    request(mega::network::ConversationID conversationID);
    response(mega::MPO mpo);
}
msg ToolSimReadLock
{
    request(mega::network::ConversationID owningID,mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg ToolSimWriteLock
{
    request(mega::network::ConversationID owningID,mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg ToolSimReleaseLock
{
    request(mega::network::ConversationID owningID,mega::network::ConversationID simulationID);
    response();
}
msg ToolSimList
{
    request();
    response(std::vector< mega::network::ConversationID > simulationID);
}