

// pipelines
msg ExePipelineReadyForWork
{
    request(network::ConversationID rootConversationID);
    response();
}

msg ExePipelineWorkProgress
{
    request(std::string message);
    response();
}

msg ExeGetBuildHashCode
{
    request( boost::filesystem::path filePath );
    response( task::FileHash hashCode );
}

msg ExeSetBuildHashCode
{
    request( boost::filesystem::path filePath, task::FileHash hashCode );
    response();
}

msg ExeStash
{
    request( boost::filesystem::path filePath, task::DeterminantHash determinant );
    response();
}

msg ExeRestore
{
    request( boost::filesystem::path filePath, task::DeterminantHash determinant );
    response( bool bRestored );
}

// project

msg ExeGetMegastructureInstallation
{
    request();
    response(mega::network::MegastructureInstallation installation);
}

msg ExeGetProject
{
    request();
    response(mega::network::Project project);
}

// Simulations
msg ExeCreateExecutionContext
{
    request();
    response(mega::MPE result);
}

msg ExeAcquireMemory
{
    request(mega::MPE mpe);
    response(std::string strMemoryName);
}
msg ExeAllocateNetworkAddress
{
    request(mega::MPE mpe, mega::TypeID objectTypeID);
    response(mega::AddressStorage networkAddress);
}
msg ExeDeAllocateNetworkAddress
{
    request(mega::MPE mpe, mega::AddressStorage networkAddress);
    response();
}

msg ExeGetExecutionContextID
{
    request(mega::MPE mpe);
    response(mega::network::ConversationID conversationID);
}

msg ExeSimReadLock
{
    request(mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg ExeSimWriteLock
{
    request(mega::network::ConversationID simulationID);
    response(bool bSuccess);
}
msg ExeSimReleaseLock
{
    request(mega::network::ConversationID simulationID);
    response();
}