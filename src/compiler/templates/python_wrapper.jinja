//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#include "{{ include }}"

#include <pybind11/pybind11.h>

#include <vector>
#include <string>
#include <unordered_map>

namespace mega::service::python
{

class PythonModule;

class PythonReference
{
public:
    using TypePath              = std::vector< mega::TypeID >;
    using PythonWrapperFunction = PyObject* ( * )( mega::runtime::CallResult&, const pybind11::args& );

    class Registration
    {
    public:
        using SymbolTable = std::unordered_map< std::string, mega::TypeID >;

        Registration( const SymbolTable& symbols );
        ~Registration();

        PyTypeObject* getTypeObject() const { return m_pTypeObject; }
        mega::TypeID  getTypeID( const char* pszIdentity ) const;

    private:
        SymbolTable                m_symbols;
        std::vector< PyGetSetDef > m_pythonAttributesData;
        PyTypeObject*              m_pTypeObject;
    };

    PythonReference( PythonModule& module, const mega::reference& ref );

    PyObject* get( void* pClosure );
    int       set( void* pClosure, PyObject* pValue );
    PyObject* str() const;
    PyObject* call( PyObject* args, PyObject* kwargs );

    const mega::reference getReference() const { return m_reference; }

    static PyObject*       cast( PythonModule& module, const mega::reference& ref );
    static mega::reference cast( PyObject* pObject );
    static std::optional< mega::reference > tryCast( PyObject* pObject );

private:
    PythonModule&   m_module;
    mega::reference m_reference;
    TypePath        m_type_path;
};

} // namespace mega::service::python


namespace mega::service::python
{
    class PythonModule;
}
extern std::shared_ptr< mega::service::python::PythonModule > getModule();

namespace PYBIND11_NAMESPACE
{
namespace detail
{
template < typename T >
concept IsReferenceType = std::is_base_of< mega::reference, T >::value;

template < IsReferenceType TReferenceType >
struct type_caster< TReferenceType >
{
public:
    /**
     * This macro establishes the name 'inty' in
     * function signatures and declares a local variable
     * 'value' of type inty
     */
    PYBIND11_TYPE_CASTER( TReferenceType, const_name( "reference" ) );

    /**
     * Conversion part 1 (Python->C++): convert a PyObject into a inty
     * instance or return false upon failure. The second argument
     * indicates whether implicit conversions should be applied.
     */
    bool load( handle src, bool )
    {
        /* Extract PyObject from handle */
        PyObject* source = src.ptr();
        if( !source )
            return false;

        /* Now try to convert into a C++ int */
        value = mega::service::python::PythonReference::cast( source );

        /* Ensure return code was OK (to avoid out-of-range errors etc) */
        return !( value != TReferenceType{} && !PyErr_Occurred() );
    }

    /**
     * Conversion part 2 (C++ -> Python): convert an inty instance into
     * a Python object. The second and third arguments are used to
     * indicate the return value policy and parent object (for
     * ``return_value_policy::reference_internal``) and are generally
     * ignored by implicit casters.
     */
    static handle cast( TReferenceType src, return_value_policy /* policy */, handle /* parent */ )
    {
        return mega::service::python::PythonReference::cast( *getModule(), src );
    }
};

} // namespace detail
} // namespace PYBIND11_NAMESPACE

{% for operation in operations %}

extern "C"
{
PyObject* _pw{{ operation.typeID }}( mega::runtime::CallResult& callResult, const pybind11::args& pyArgs )
{
    using FPtr = {{ operation.return_type }} (*)( mega::reference*{% for param in operation.params %}, {{param.type}} {{param.name}}{% endfor %} );
    FPtr pOp = reinterpret_cast< FPtr >( const_cast< void* >( callResult.pFunction ) );
{% if operation.return_type == "void" %}
    pOp( &callResult.context {% for param in operation.params %}, pybind11::cast< {{param.type}} >( pyArgs[ {{ loop.index }} ] ){% endfor %} );
    Py_INCREF( Py_None );
    return Py_None;
{% else %}
    static {{ operation.return_type }} result;
    result = pOp( &callResult.context {% for param in operation.params %}, pybind11::cast< {{param.type}} >( pyArgs[ {{ loop.index }} ] ){% endfor %} );
    auto pyObject = pybind11::cast( result );
    pyObject.inc_ref();
    return pyObject.ptr();
{% endif %}

}
}
BOOST_DLL_ALIAS_SECTIONED( _pw{{ operation.typeID }}, _pa{{ operation.typeID }}, mega )

{% endfor %}
