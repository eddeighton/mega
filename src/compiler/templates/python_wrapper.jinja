//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

// #include "{{ include }}"

#include <pybind11/pybind11.h>

#include <vector>
#include <string>
#include <unordered_map>

#include "service/python/reference.hpp"
#include "service/python/cast.hpp"

{% if define_setPythonCaster %}
namespace mega::service::python
{
    static IPythonModuleCast* g_pIPythonModuleCast = nullptr;

    void setPythonCaster( void* pPythonCaster )
    {
        g_pIPythonModuleCast = (IPythonModuleCast*)pPythonCaster;
    }

    PyObject* cast( const mega::reference& ref )
    {
        if( !g_pIPythonModuleCast )
        {
            throw std::runtime_error( "g_pIPythonModuleCast not initialised" );
        }
        return g_pIPythonModuleCast->cast( ref );
    }
}
BOOST_DLL_ALIAS( mega::service::python::setPythonCaster, _{{ component_name }}_setPythonCaster )
{% endif %}

{% for operation in operations %}

extern "C"
{
PyObject* _p{{ operation.hash }}_{{ operation.typeID }}( mega::runtime::CallResult& callResult, const pybind11::args& pyArgs )
{
    using FPtr = {{ operation.return_type }} (*)( mega::reference*{% for param in operation.params %}, {{param.type}} {{param.name}}{% endfor %} );
    FPtr pOp = reinterpret_cast< FPtr >( const_cast< void* >( callResult.pFunction ) );
{% if operation.return_type == "void" %}
    pOp( &callResult.context {% for param in operation.params %}, pybind11::cast< {{param.type}} >( pyArgs[ {{ loop.index }} ] ){% endfor %} );
    Py_INCREF( Py_None );
    return Py_None;
{% else %}
    static {{ operation.return_type }} result;
    result = pOp( &callResult.context {% for param in operation.params %}, pybind11::cast< {{param.type}} >( pyArgs[ {{ loop.index }} ] ){% endfor %} );
    auto pyObject = pybind11::cast( result );
    pyObject.inc_ref();
    return pyObject.ptr();
{% endif %}

}
}
BOOST_DLL_ALIAS_SECTIONED( _p{{ operation.hash }}_{{ operation.typeID }}, _pa{{ operation.hash }}_{{ operation.typeID }}, mega )

{% endfor %}
