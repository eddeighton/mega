//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

struct [[clang::eg_type( {{ typeid }} )]]{{ name }}
{
    enum : mega::TypeID { ID = {{ typeid }} };
    mega::reference data;
    inline {{ name }}() {};
    inline {{ name }}( mega::reference reference ) : data( reference ) {}
    inline operator ::mega::ReferenceState() const             { return ::mega::Null; }
    inline bool operator==( ::mega::ReferenceState cmp ) const { return false; }
    inline bool operator!=( ::mega::ReferenceState cmp ) const { return false; }
{% if has_operation %}
    {{ operation_return_type }} operator()( {{ operation_parameters }} ) const;
{% endif %}
    template< typename TypePath, typename Operation, typename... Args >
    inline typename mega::result_type< {{ name }}, TypePath, Operation >::Type invoke( Args... args ) const
    {
        using ResultType = typename mega::result_type< {{ name }}, TypePath, Operation >::Type;
        if constexpr ( std::is_same< ResultType, void >::value )
            invoke_impl_void< {{ name }}, TypePath, Operation, Args... >( *this, args... );
        if constexpr ( !std::is_same< ResultType, void >::value )
            return invoke_impl< ResultType, {{ name }}, TypePath, Operation, Args... >( *this, args... );
    }
{% for trait_struct in trait_structs %}
    struct [[clang::eg_type( {{ trait_struct.typeid }} )]]{{ trait_struct.name }};
{% endfor %}
    {{ nested }}
};
