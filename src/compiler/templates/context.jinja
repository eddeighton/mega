struct [[clang::eg_type( {{ typeid }} )]]{{ name }}
{
    mega::reference data;
    {{ name }}()
    {
        data.instance = 0;
        data.type = 0;
        data.timestamp = mega::INVALID_TIMESTAMP;
    };
    {{ name }}( const mega::reference& reference )
        :   data( reference )
    {
    }
    operator ::mega::ReferenceState() const;
    bool operator==( ::mega::ReferenceState cmp ) const;
    bool operator!=( ::mega::ReferenceState cmp ) const;
{% if has_operation %}
    {{ operation_return_type }} operator()( {{ operation_parameters }} ) const;
{% endif %}
    template< typename TypePath, typename Operation, typename... Args >
    typename mega::result_type< {{ name }}, TypePath, Operation >::Type invoke( Args... args ) const;

    // Ed was here
{% for trait_struct in trait_structs %}
    struct [[clang::eg_type( {{ trait_struct.typeid }} )]]{{ trait_struct.name }};
{% endfor %}

    {{ nested }}
};
