//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#include "mega/xml_archive.hpp"

#include <typeinfo>

#include "jit/invocation_functions.hxx"

namespace 
{

static const char* g_unit_name = "{{ unitname }}";

template< typename ResultType, typename ContextType, typename TypePathType, typename OperationType >
struct __invoke_impl{
    template< typename... Args >
    inline ResultType operator()( ContextType, Args... )
    {
        static_assert( 0 && typeid( ResultType ).name() && typeid( ContextType ).name() && typeid( TypePathType ).name(), "Critical error: Invocation system failed to match implementation" );
    }
};

{% for invocation in invocations %}
template<>
struct __invoke_impl
<
    {{ invocation.return_type }},
    {{ invocation.context }},
    {{ invocation.type_path }},
    {{ invocation.operation }}
>
{
    template< typename... Args >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }} context, Args... args ) const
    {
        static constexpr std::array< mega::TypeID, {{ invocation.type_path_size }} > g_type_path_types = { {{ invocation.type_path_type_id_list }} };
        static thread_local const mega::InvocationID id{ {{ invocation.context }}::ID, g_type_path_types, {{ invocation.operation }}::ID };
{% if invocation.explicit_operation == "Read" %}
        // Read
        static thread_local mega::runtime::invocation::Read function( g_unit_name, id );
        return *reinterpret_cast< {{ invocation.runtime_return_type }}* >( function( context.data ) );
{% else if invocation.explicit_operation == "Write" %}
        // Write
        static thread_local mega::runtime::invocation::Write function( g_unit_name, id );
        const {{ invocation.runtime_return_type }} temp{ args... };
        return function( context.data, (const void*)&temp );
{% else if invocation.explicit_operation == "Allocate" %}
        // Allocate
        static thread_local mega::runtime::invocation::Allocate function( g_unit_name, id );
        return function( context.data );
{% else if invocation.explicit_operation == "Call" %}
        // Call
        static thread_local mega::runtime::invocation::Call function( g_unit_name, id );
        mega::runtime::CallResult result = function( context.data );
        using FunctionType = {{ invocation.runtime_return_type }};
        const FunctionType pFunction = (const FunctionType)( result.pFunction );
{% if invocation.return_type == "void" %}
        pFunction( result.context, args... );
{% else %}
        return pFunction( result.context, args... );
{% endif %}
{% else if invocation.explicit_operation == "Start" %}
        // Start
        // static thread_local mega::runtime::invocation::Start function( g_unit_name, id );
        // return function( context.data );
{% else if invocation.explicit_operation == "Stop" %}
        // Stop
        // static thread_local mega::runtime::invocation::Stop function( g_unit_name, id );
        // return function( context.data );
{% else if invocation.explicit_operation == "Save" %}
        // Save
        // static thread_local mega::runtime::invocation::Save function( g_unit_name, id );
        // mega::XMLSaveArchive archive( args... );
        // function( context.data, &archive );
{% else if invocation.explicit_operation == "Load" %}
        // Load
        // static thread_local mega::runtime::invocation::Load function( g_unit_name, id );
        // mega::XMLLoadArchive archive( args... );
        // function( context.data, &archive );
{% else if invocation.explicit_operation == "Files" %}
        // Files
{% else if invocation.explicit_operation == "GetAction" %}
        // GetAction
{% else if invocation.explicit_operation == "GetDimension" %}
        // GetDimension
{% else if invocation.explicit_operation == "Range" %}
        // Range
{% else if invocation.explicit_operation == "Raw" %}
        // Raw
{% endif %}
    }

{% if invocation.explicit_operation == "Write" %}
    template<>
    inline {{ invocation.return_type }} operator()( {{ invocation.context }} context, const {{ invocation.runtime_return_type }}& arg ) const
    {
        static constexpr std::array< mega::TypeID, {{ invocation.type_path_size }} > g_type_path_types = { {{ invocation.type_path_type_id_list }} };
        static thread_local const mega::InvocationID id{ {{ invocation.context }}::ID, g_type_path_types, {{ invocation.operation }}::ID };
        static thread_local mega::runtime::invocation::Write function( g_unit_name, id );
        return function( context.data, (const void*)&arg );
    }
{% endif %}

};
{% endfor %}

}

template< typename Context, typename TypePath, typename Operation, typename... Args >
static void invoke_impl_void( Context context, Args... args )
{
    using TypePathCanonical = typename mega::CanonicaliseTypePath< TypePath >::Type;
    __invoke_impl< void, Context, TypePathCanonical, Operation >()( context, args... );
}

template< typename ResultType, typename Context, typename TypePath, typename Operation, typename... Args >
static ResultType invoke_impl( Context context, Args... args )
{
    using TypePathCanonical = typename mega::CanonicaliseTypePath< TypePath >::Type;
    return __invoke_impl< ResultType, Context, TypePathCanonical, Operation >()( context, args... );
}
