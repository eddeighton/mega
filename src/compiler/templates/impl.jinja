//  Copyright (c) Deighton Systems Limited. 2022. All Rights Reserved.
//  Author: Edward Deighton
//  License: Please see license.txt in the project root folder.

//  Use and copying of this software and preparation of derivative works
//  based upon this software are permitted. Any copy of this software or
//  of any derivative work must include the above copyright notice, this
//  paragraph and the one after it.  Any distribution of this software or
//  derivative works must comply with all applicable laws.

//  This software is made available AS IS, and COPYRIGHT OWNERS DISCLAIMS
//  ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
//  PURPOSE, AND NOTWITHSTANDING ANY OTHER PROVISION CONTAINED HEREIN, ANY
//  LIABILITY FOR DAMAGES RESULTING FROM THE SOFTWARE OR ITS USE IS
//  EXPRESSLY DISCLAIMED, WHETHER ARISING IN CONTRACT, TORT (INCLUDING
//  NEGLIGENCE) OR STRICT LIABILITY, EVEN IF COPYRIGHT OWNERS ARE ADVISED
//  OF THE POSSIBILITY OF SUCH DAMAGES.

#include <typeinfo>

#include "mega/values/compilation/invocation_id.hpp"

#include "runtime/functor_cpp.hxx"

namespace 
{

static const char* g_unit_name = "{{ unitname }}";

template< typename ResultType, typename ContextType, typename TypePathType, typename OperationType >
struct __invoke_impl{
    template< typename... Args >
    inline ResultType operator()( ContextType, Args... )
    {
        static_assert( 0 && typeid( ResultType ).name() && 
            typeid( ContextType ).name() && typeid( TypePathType ).name(), 
            "Critical error: Invocation system failed to match implementation" );
    }
};

{% for invocation in invocations %}
template<>
struct __invoke_impl
<
    {{ invocation.return_type }},
    {{ invocation.context }},
    {{ invocation.type_path }},
    {{ invocation.operation }}
>
{
    static constexpr mega::InvocationID id{ {{ invocation.id }} };
    
{% if invocation.explicit_operation == "Read" %}
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context ) const
    {
        static thread_local mega::runtime::Invocation::Read function( id );
        return *reinterpret_cast< {{ invocation.return_type }}* >( function( context ) );
    }
{% else if invocation.explicit_operation == "Write" %}
    template< typename... Args >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context, Args... args ) const
    {
        static thread_local mega::runtime::Invocation::Write function( id );
        const {{ invocation.parameter_type }} temp{ args... };
        return function( context, (const void*)&temp );
    }
    template<>
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context, const {{ invocation.parameter_type }}& arg ) const
    {
        static thread_local mega::runtime::Invocation::Write function( id );
        return function( context, (const void*)&arg );
    }
{% else if invocation.explicit_operation == "LinkRead" %}
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context ) const
    {
        static thread_local mega::runtime::Invocation::LinkRead function( id );
        using ReturnType = std::remove_reference< {{ invocation.return_type }} >::type;
        return *reinterpret_cast< ReturnType* >( function( context ) );
    }
{% else if invocation.explicit_operation == "LinkAdd" %}
    template< typename T >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context, T& interfaceRef ) const
    {
        static thread_local mega::runtime::Invocation::LinkAdd function( id );
        return function( context, interfaceRef );
    }
{% else if invocation.explicit_operation == "LinkRemove" %}
    template< typename T >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context, T& interfaceRef ) const
    {
        static thread_local mega::runtime::Invocation::LinkRemove function( id );
        return function( context, interfaceRef );
    }
{% else if invocation.explicit_operation == "LinkClear" %}
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context ) const
    {
        static thread_local mega::runtime::Invocation::LinkClear function( id );
        return function( context );
    }
{% else if invocation.explicit_operation == "Call" %}
    template< typename... Args >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context, Args... args ) const
    {
        static thread_local mega::runtime::Invocation::Call function( id );
        mega::runtime::CallResult result = function( context );
        using FunctionType = {{ invocation.function_type }};
        const FunctionType pFunction = (const FunctionType)( result.pFunction );
{% if invocation.return_type == "void" %}
        pFunction( &result.context, args... );
{% else %}
        return pFunction( &result.context, args... );
{% endif %}
    }
{% else if invocation.explicit_operation == "Start" %}
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context ) const
    {
        static thread_local mega::runtime::Invocation::Start function( id );
        return function( context );
    }
{% else if invocation.explicit_operation == "Move" %}
    template< typename T >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context, T& interfaceRef ) const
    {
        static thread_local mega::runtime::Invocation::Move function( id );
        function( context, interfaceRef );
    }
{% else if invocation.explicit_operation == "GetContext" %}
    inline {{ invocation.return_type }} operator()( {{ invocation.context }}& context ) const
    {
        static thread_local mega::runtime::Invocation::Get function( id );
        return function( context );
    }
{% else if invocation.explicit_operation == "Range" %}
        // Range
{% endif %}

};
{% endfor %}

}

template< typename Context, typename TypePath, typename Operation, typename... Args >
static void invoke_impl_void( Context& context, Args... args )
{
    __invoke_impl< void, Context, TypePath, Operation >()( context, args... );
}

template< typename ResultType, typename Context, typename TypePath, typename Operation, typename... Args >
static ResultType invoke_impl( Context& context, Args... args )
{
    return __invoke_impl< ResultType, Context, TypePath, Operation >()( context, args... );
}
/*
template< typename TObject >
static TObject mega_new()
{
    static thread_local mega::runtime::operators::New function( TObject::ID );
    return function();
}

template< typename TObject >
static TObject mega_remote_new( mega::runtime::MPO mpo )
{
    static thread_local mega::runtime::operators::RemoteNew function( TObject::ID );
    return function( mpo );
}

template< typename TObject >
static void mega_delete( const TObject& context )
{
    static thread_local mega::runtime::operators::Delete function( TObject::ID );
    function( context );
}

template< typename To, typename From >
static To mega_cast( const mega::Pointer& from )
{
    static thread_local mega::runtime::operators::Cast function( To::ID );
    return function( from );
}

template< typename Context >
static bool mega_active( const Context& context )
{
    static thread_local mega::runtime::operators::Active function( Context::ID );
    return function( context );
}

template< typename Context >
static bool mega_enabled( const Context& context )
{
    static thread_local mega::runtime::operators::Enabled function( Context::ID );
    return function( context );
}
*/