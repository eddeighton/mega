
template< typename ResultType, typename ContextType, typename TypePathType, typename OperationType >
struct __invoke_impl{
    template< typename... Args >
    inline ResultType operator()( ContextType, Args... )
    {
        static_assert( 0 && typeid( ResultType ).name() && typeid( ContextType ).name() && typeid( TypePathType ).name(), "Critical error: Invocation system failed to match implementation" );
    }
};

{% for invocation in invocations %}
template<>
struct __invoke_impl
<
    {{ invocation.return_type }},
    {{ invocation.context }},
    {{ invocation.type_path }},
    {{ invocation.operation }}
>
{
    template< typename... Args >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }} context, Args... args ) const
    {
        {{ invocation.impl }}
    }
};
{% endfor %}

{% for interface in interfaces %}
template < typename TypePath, typename Operation, typename... Args >
typename mega::result_type< {{ interface }}, TypePath, Operation >::Type {{ interface }}::invoke( Args... args ) const
{
    using CanonicalTypePath = typename mega::CanonicaliseTypePath< TypePath >::Type;
    return __invoke_impl< typename mega::result_type< {{ interface }}, TypePath, Operation >::Type, {{ interface }}, CanonicalTypePath, Operation >()( *this, args... );
}

{% endfor %}
