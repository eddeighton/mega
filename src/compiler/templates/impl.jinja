
#include <typeinfo>

template< typename ResultType, typename ContextType, typename TypePathType, typename OperationType >
struct __invoke_impl{
    template< typename... Args >
    inline ResultType operator()( ContextType, Args... )
    {
        static_assert( 0 && typeid( ResultType ).name() && typeid( ContextType ).name() && typeid( TypePathType ).name(), "Critical error: Invocation system failed to match implementation" );
    }
};

{% for invocation in invocations %}
template<>
struct __invoke_impl
<
    {{ invocation.return_type }},
    {{ invocation.context }},
    {{ invocation.type_path }},
    {{ invocation.operation }}
>
{
    template< typename... Args >
    inline {{ invocation.return_type }} operator()( {{ invocation.context }} context, Args... args ) const
    {
{% if invocation.explicit_operation == "Read" %}
        // Read
{% else if invocation.explicit_operation == "Write" %}
        // Write
{% else if invocation.explicit_operation == "Call" %}
        // Call
{% else if invocation.explicit_operation == "Start" %}
        // Start
{% else if invocation.explicit_operation == "Stop" %}
        // Stop
{% else if invocation.explicit_operation == "Pause" %}
        // Pause
{% else if invocation.explicit_operation == "Resume" %}
        // Resume
{% else if invocation.explicit_operation == "WaitAction" %}
        // WaitAction
{% else if invocation.explicit_operation == "WaitDimension" %}
        // WaitDimension
{% else if invocation.explicit_operation == "GetAction" %}
        // GetAction
{% else if invocation.explicit_operation == "GetDimension" %}
        // GetDimension
{% else if invocation.explicit_operation == "Done" %}
        // Done
{% else if invocation.explicit_operation == "Range" %}
        // Range
{% else if invocation.explicit_operation == "Raw" %}
        // Raw
{% endif %}

        {{ invocation.impl }}
    }
};
{% endfor %}

//mega::CanonicaliseTypePath< TypePath >::ID.data(), 
//mega::CanonicaliseTypePath< TypePath >::ID.size(), 

template< typename Context, typename TypePath, typename Operation, typename... Args >
static void invoke_impl_void( Context context, Args... args )
{
    using TypePathCanonical = typename mega::CanonicaliseTypePath< TypePath >::Type;
    __invoke_impl< void, Context, TypePathCanonical, Operation >()( context, args... );
}

template< typename ResultType, typename Context, typename TypePath, typename Operation, typename... Args >
static ResultType invoke_impl( Context context, Args... args )
{
    using TypePathCanonical = typename mega::CanonicaliseTypePath< TypePath >::Type;
    return __invoke_impl< ResultType, Context, TypePathCanonical, Operation >()( context, args... );
}
