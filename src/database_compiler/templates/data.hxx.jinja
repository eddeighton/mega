#ifndef {{ guard }}
#define {{ guard }}

#include "database/io/object_info.hpp"
#include "database/io/object.hpp"
#include "database/io/loader.hpp"
#include "database/io/storer.hpp"
#include "database/io/data_pointer.hpp"

#include "boost/filesystem/path.hpp"

#include <vector>
#include <string>
#include <cstddef>

namespace data
{

// declarations
{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    struct {{ part.name }};
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}

// definitions
{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    struct {{ part.name }} : public mega::io::Object
    {
        {{ part.name }}( const mega::io::ObjectInfo& objectInfo );
        enum 
        {
            Type = {{ part.typeID }}
        } size_t;

{% for property in part.properties %}
        {{ property.type }} {{ property.name }};
{% endfor %}{#part.property#}

{% for pointer in part.pointers %}
        Ptr< {{ pointer.typename }} > {{ pointer.longname }};
{% endfor %}{#part.pointers#}
        void* pView = nullptr;

        virtual void load( mega::io::Loader& loader );
        virtual void store( mega::io::Storer& storer ) const;
    };
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}

{% for conversion in conversions %}
template <>
inline Ptr< {{ conversion.to }} > convert( Ptr< {{ conversion.from }} >& from )
{
    return from{% for pointer in conversion.pointers %}->{{ pointer }}{% endfor %};
}

{% endfor %}{# conversions #}

}
#endif //{{ guard }}
