
#include "database/model/data.hxx"


namespace data
{

{% for file in files %}
namespace {{ file.name }}
{
{% for part in file.parts %}
    // struct {{ part.name }} : public mega::io::Object
    {{ part.name }}::{{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo )
        :   mega::io::Object( objectInfo )
{% for pointer in part.pointers %}
          , {{ pointer.longname }}( loader )
{% endfor %}{#part.pointers#}
{% for property in part.properties %}
{% if property.is_pointer %}
          , {{ property.name }}( loader )
{% endif %}
{% endfor %}{#part.property#}
    {
    }
{% if length(part.properties) %}
    {{ part.name }}::{{ part.name }}( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo{% for property in part.properties %}, {{ property.argtype }} {{ property.name }}{% endfor %} )
        :   mega::io::Object( objectInfo )
{% for pointer in part.pointers %}
          , {{ pointer.longname }}( loader )
{% endfor %}{#part.pointers#}
{% for property in part.properties %}
          , {{ property.name }}( {{ property.name }} )
{% endfor %}{#part.property#}
    {
    }
{% endif %}{# length(part.properties) #}
    void {{ part.name }}::load( mega::io::Loader& loader )
    {
{% for pointer in part.pointers %}
        loader.load( {{ pointer.longname }} );
{% endfor %}{#part.pointers#}
{% for property in part.properties %}
        loader.load( {{ property.name }} );
{% endfor %}{#part.property#}
    }
    void {{ part.name }}::store( mega::io::Storer& storer ) const
    {
{% for pointer in part.pointers %}
        storer.store( {{ pointer.longname }} );
{% endfor %}{#part.pointers#}
{% for property in part.properties %}
        storer.store( {{ property.name }} );
{% endfor %}{#part.property#}
    }
        
{% endfor %}{#file.parts#}
}
{% endfor %}{# files #}


mega::io::Object* Factory::create( ObjectPartLoader& loader, const mega::io::ObjectInfo& objectInfo )
{
    switch( objectInfo.getType() )
    {
{% for file in files %}
{% for part in file.parts %}
        case {{ part.typeID }}: return new {{ file.name }}::{{ part.name }}( loader, objectInfo );
{% endfor %}{#file.parts#}
{% endfor %}{# files #}
        default:
            THROW_RTE( "Unrecognised object type ID" );
    }
}

}
