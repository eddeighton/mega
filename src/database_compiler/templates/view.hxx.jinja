#ifndef {{ guard }}
#define {{ guard }}

#include "database/io/object_info.hpp"
#include "database/io/environment.hpp"

#include <boost/filesystem/path.hpp>

#include <string>
#include <vector>
#include <optional>
#include <memory>

{% for stage in stages %}
namespace {{ stage.name }}
{
    //////////////////////////////////////////////////////////
    // forward declarations
{% for object in stage.readonly_objects %}
{% for namespace in object.namespaces %}
    namespace {{ namespace }}
    { 
{% endfor %}{#object.namespaces#}
    class {{ object.name }};
{% for namespace in object.namespaces %}
    } // {{ namespace }}
{% endfor %}{#object.namespaces#}
{% endfor %}{#stage.readonly_objects#}
{% for object in stage.readwrite_objects %}
{% for namespace in object.namespaces %}
    namespace {{ namespace }}
    {
{% endfor %}{#object.namespaces#}
    class {{ object.name }};
{% for namespace in object.namespaces %}
    } // {{ namespace }}
{% endfor %}{#object.namespaces#}
{% endfor %}{#stage.readwrite_objects#}

    //////////////////////////////////////////////////////////
    // definitions
    class Database
    {
    public:
        struct Pimpl;
{% if not stage.perobject %}
        Database( const mega::io::Environment& environment );
{% endif %}
{% if stage.perobject %}
        Database( const mega::io::Environment& environment, const boost::filesystem::path& objectFile );
{% endif %}

        template< typename T >
        inline T* construct();

        void store();

    private:
{% for object in stage.readwrite_objects %}
        {{ object.full_name }}* construct_{% for namespace in object.namespaces %}{{namespace}}_{% endfor %}{{ object.name }}();
{% endfor %}{# stage.readwrite_objects #}

    private:
        std::shared_ptr< Pimpl > m_pimpl;
    };

{% for object in stage.readwrite_objects %}
    template<>
    inline {{ object.full_name }}* Database::construct< {{ object.full_name }} >()
    {
        return construct_{% for namespace in object.namespaces %}{{namespace}}_{% endfor %}{{ object.name }}();
    }
{% endfor %}{# stage.readwrite_objects #}

    //////////////////////////////////////////////////////////
    // definitions
{% for object in stage.readonly_objects %}
{% for namespace in object.namespaces %}
    namespace {{ namespace }}
    {
{% endfor %}{#object.namespaces#}
        class {{ object.name }}
        {
            friend struct Database::Pimpl;
        private:
            {{ object.name }}( void* pData );
        public:
            // read-only properties
{% for property in object.readonly_properties %}
            const {{ property.return_type }}& get_{{ property.name }}() const;
{% endfor %}{# object.readonly_properties #}
        private:
            void* m_pData;
        };
{% for namespace in object.namespaces %}
    } // {{ namespace }}
{% endfor %}{#object.namespaces#}
{% endfor %}{#stage.readonly_objects#}

{% for object in stage.readwrite_objects %}
{% for namespace in object.namespaces %}
    namespace {{ namespace }}
    {
{% endfor %}{#object.namespaces#}
        class {{ object.name }}
        {
            friend struct Database::Pimpl;
        private:
            {{ object.name }}( void* pData );

        public:
            // read-only properties
{% for property in object.readonly_properties %}
            const {{ property.return_type }}& get_{{ property.name }}() const;
{% endfor %}{# object.readonly_properties #}

            // read-write properties
{% for property in object.readwrite_properties %}
            const {{ property.return_type }}& get_{{ property.name }}() const;
            void set_{{ property.name }}( const {{ property.return_type }}& value ) const;
{% endfor %}{# object.readwrite_properties #}
        private:
            void* m_pData;
        };
{% for namespace in object.namespaces %}
    } // {{ namespace }}
{% endfor %}{#object.namespaces#}
{% endfor %}{#object.readwrite_objects#}
}
{% endfor %}{#stages#}

#endif //{{ guard }}
