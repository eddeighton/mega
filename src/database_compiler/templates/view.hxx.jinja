#ifndef {{ guard }}
#define {{ guard }}

#include "database/io/object_info.hpp"

#include "database/io/stages.hpp"
#include "database/io/object.hpp"
#include "database/io/loader.hpp"
#include "database/io/storer.hpp"

#include <boost/filesystem/path.hpp>

#include <string>
#include <vector>
#include <optional>


## for stage in stages
namespace {{ stage.name }}
{
    //////////////////////////////////////////////////////////
    // forward declarations
## for object in stage.readonly_objects
## for namespace in object.namespaces
    namespace {{ namespace }}
    {
## endfor
    class {{ object.name }};
## for namespace in object.namespaces
    } // {{ namespace }}
## endfor
## endfor
## for object in stage.readwrite_objects
## for namespace in object.namespaces
    namespace {{ namespace }}
    {
## endfor
    class {{ object.name }};
## for namespace in object.namespaces
    } // {{ namespace }}
## endfor
## endfor

    //////////////////////////////////////////////////////////
    // definitions
    class Database
    {
    public:
        template< typename T >
        T* construct();
    };

    //////////////////////////////////////////////////////////
    // definitions
## for object in stage.readonly_objects
## for namespace in object.namespaces
    namespace {{ namespace }}
    {
## endfor 
        class {{ object.name }}
        {
            friend class mega::io::Factory;
            friend class mega::io::File;
        private:
            {{ object.name }}( const mega::io::ObjectInfo& objectInfo );
        public:
            // read-only properties
## for property in object.readonly_properties
            {{ property.return_type }} get_{{ property.name }}() const;
## endfor
        };
## for namespace in object.namespaces
    } // {{ namespace }}
## endfor
## endfor

## for object in stage.readwrite_objects
## for namespace in object.namespaces
    namespace {{ namespace }}
    {
## endfor
        class {{ object.name }}
        {
            friend class mega::io::Factory;
            friend class mega::io::File;
        private:
            {{ object.name }}( const mega::io::ObjectInfo& objectInfo );

        public:
            // read-only properties
## for property in object.readonly_properties
            {{ property.return_type }} get_{{ property.name }}() const;
## endfor

            // read-write properties
## for property in object.readwrite_properties
            {{ property.return_type }} get_{{ property.name }}() const;
            void set_{{ property.name }}( {{ property.return_type }} value ) const;
## endfor
        };
## for namespace in object.namespaces
    } // {{ namespace }}
## endfor
## endfor
}

## endfor

#endif //{{ guard }}
