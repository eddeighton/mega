
///////////////////////////////////////////
///////////////////////////////////////////
// Stages
stage perprogram ComponentListing
{
    file Components
}

stage perobject InputParse
{
    file AST
    file Body
    file Extra

    accessor perprogram array< ref< Components::Component > >

    accessor perobject ref< Parser::Context >
    accessor perobject ref< Parser::Root >
}

stage perobject InterfaceStage
{
    file Tree

    accessor perobject ref< Parser::Dimension >
    accessor perobject ref< Parser::Context >
    accessor perobject ref< Parser::Root >

    accessor perobject ref< Interface::Dimension >
}

stage perprogram Dependencies
{
    file DependencyAnalysis
}

stage perobject Analysis
{
    file ObjectCompile
    file ObjectAnalysis

    accessor perobject ref< Parser::Root >
    accessor perobject ref< Parser::Dimension >

    accessor perobject ref< Interface::Root >
    accessor perobject ref< Interface::Dimension >
}

stage perprogram Concrete
{
    file Tree
}

stage perprogram Layout
{
    file Buffers
}

stage perprogram HyperGraph
{
    file Graph
}

stage perprogram Derivations
{
    file Invocations
}

///////////////////////////////////////////
///////////////////////////////////////////
// Objects
namespace Components
{
    object Component -> ComponentListing::Components
    {
        value< std::string > name
        value< boost::filesystem::path > directory
        array< value< boost::filesystem::path > > includeDirectories
        array< value< boost::filesystem::path > > sourceFiles
    }
}

namespace Parser
{
    object Opaque -> InputParse::AST
    {
        value< std::string > str
    }

    object Dimension -> InputParse::AST
    {
        value< bool > isConst
        value< std::string > identifier
        value< std::string > type
        value< std::string > test -> InputParse::Extra
        ref< Opaque > cppTypeName
        //array< ref< Dimension > > children 
        //value< std::string > foobar -> Interface::Tree
    }

    object Root : Context -> InputParse::AST
    {
    }

    object Context -> InputParse::AST
    {
        value< std::string > identifier
        value< std::string > body -> InputParse::Body
    }

    object FoobarRoot : TestRoot -> InputParse::AST
    {
    }

    object TestRoot : Root -> InputParse::AST
    {
    }
}

namespace Interface
{
    object Dimension : Parser::Dimension -> InterfaceStage::Tree
    {
        value< bool > more
    }

    object Root -> InterfaceStage::Tree
    {
        //ref< Parser::Root > root
    }
}
